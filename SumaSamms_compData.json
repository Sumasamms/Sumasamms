{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"contract-6262427532.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts@5.0.0/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts@5.0.0/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20Votes.sol\\\";\\nimport \\\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20FlashMint.sol\\\";\\n\\ncontract SumaSamms is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit, ERC20Votes, ERC20FlashMint {\\n    constructor(address initialOwner)\\n        ERC20(\\\"SumaSamms\\\", \\\"SSAS\\\")\\n        Ownable(initialOwner)\\n        ERC20Permit(\\\"SumaSamms\\\")\\n    {\\n        _mint(msg.sender, 1 * 10 ** decimals());\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _update(address from, address to, uint256 value)\\n        internal\\n        override(ERC20, ERC20Pausable, ERC20Votes)\\n    {\\n        super._update(from, to, value);\\n    }\\n\\n    function nonces(address owner)\\n        public\\n        view\\n        override(ERC20Permit, Nonces)\\n        returns (uint256)\\n    {\\n        return super.nonces(owner);\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20FlashMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20FlashMint.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC3156FlashBorrower} from \\\"../../../interfaces/IERC3156FlashBorrower.sol\\\";\\nimport {IERC3156FlashLender} from \\\"../../../interfaces/IERC3156FlashLender.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * Adds the {flashLoan} method, which provides flash loan support at the token\\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\\n *\\n * NOTE: When this extension is used along with the {ERC20Capped} or {ERC20Votes} extensions,\\n * {maxFlashLoan} will not correctly reflect the maximum that can be flash minted. We recommend\\n * overriding {maxFlashLoan} so that it correctly reflects the supply cap.\\n */\\nabstract contract ERC20FlashMint is ERC20, IERC3156FlashLender {\\n    bytes32 private constant RETURN_VALUE = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /**\\n     * @dev The loan token is not valid.\\n     */\\n    error ERC3156UnsupportedToken(address token);\\n\\n    /**\\n     * @dev The requested loan exceeds the max loan value for `token`.\\n     */\\n    error ERC3156ExceededMaxLoan(uint256 maxLoan);\\n\\n    /**\\n     * @dev The receiver of a flashloan is not a valid {onFlashLoan} implementer.\\n     */\\n    error ERC3156InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Returns the maximum amount of tokens available for loan.\\n     * @param token The address of the token that is requested.\\n     * @return The amount of token that can be loaned.\\n     *\\n     * NOTE: This function does not consider any form of supply cap, so in case\\n     * it's used in a token with a cap like {ERC20Capped}, make sure to override this\\n     * function to integrate the cap instead of `type(uint256).max`.\\n     */\\n    function maxFlashLoan(address token) public view virtual returns (uint256) {\\n        return token == address(this) ? type(uint256).max - totalSupply() : 0;\\n    }\\n\\n    /**\\n     * @dev Returns the fee applied when doing flash loans. This function calls\\n     * the {_flashFee} function which returns the fee applied when doing flash\\n     * loans.\\n     * @param token The token to be flash loaned.\\n     * @param value The amount of tokens to be loaned.\\n     * @return The fees applied to the corresponding flash loan.\\n     */\\n    function flashFee(address token, uint256 value) public view virtual returns (uint256) {\\n        if (token != address(this)) {\\n            revert ERC3156UnsupportedToken(token);\\n        }\\n        return _flashFee(token, value);\\n    }\\n\\n    /**\\n     * @dev Returns the fee applied when doing flash loans. By default this\\n     * implementation has 0 fees. This function can be overloaded to make\\n     * the flash loan mechanism deflationary.\\n     * @param token The token to be flash loaned.\\n     * @param value The amount of tokens to be loaned.\\n     * @return The fees applied to the corresponding flash loan.\\n     */\\n    function _flashFee(address token, uint256 value) internal view virtual returns (uint256) {\\n        // silence warning about unused variable without the addition of bytecode.\\n        token;\\n        value;\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the receiver address of the flash fee. By default this\\n     * implementation returns the address(0) which means the fee amount will be burnt.\\n     * This function can be overloaded to change the fee receiver.\\n     * @return The address for which the flash fee will be sent to.\\n     */\\n    function _flashFeeReceiver() internal view virtual returns (address) {\\n        return address(0);\\n    }\\n\\n    /**\\n     * @dev Performs a flash loan. New tokens are minted and sent to the\\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\\n     * interface. By the end of the flash loan, the receiver is expected to own\\n     * value + fee tokens and have them approved back to the token contract itself so\\n     * they can be burned.\\n     * @param receiver The receiver of the flash loan. Should implement the\\n     * {IERC3156FlashBorrower-onFlashLoan} interface.\\n     * @param token The token to be flash loaned. Only `address(this)` is\\n     * supported.\\n     * @param value The amount of tokens to be loaned.\\n     * @param data An arbitrary datafield that is passed to the receiver.\\n     * @return `true` if the flash loan was successful.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because it always preserves the property that the amount\\n    // minted at the beginning is always recovered and burned at the end, or else the entire function will revert.\\n    // slither-disable-next-line reentrancy-no-eth\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 value,\\n        bytes calldata data\\n    ) public virtual returns (bool) {\\n        uint256 maxLoan = maxFlashLoan(token);\\n        if (value > maxLoan) {\\n            revert ERC3156ExceededMaxLoan(maxLoan);\\n        }\\n        uint256 fee = flashFee(token, value);\\n        _mint(address(receiver), value);\\n        if (receiver.onFlashLoan(_msgSender(), token, value, fee, data) != RETURN_VALUE) {\\n            revert ERC3156InvalidReceiver(address(receiver));\\n        }\\n        address flashFeeReceiver = _flashFeeReceiver();\\n        _spendAllowance(address(receiver), address(this), value + fee);\\n        if (fee == 0 || flashFeeReceiver == address(0)) {\\n            _burn(address(receiver), value + fee);\\n        } else {\\n            _burn(address(receiver), value);\\n            _transfer(address(receiver), flashFeeReceiver, fee);\\n        }\\n        return true;\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Votes} from \\\"../../../governance/utils/Votes.sol\\\";\\nimport {Checkpoints} from \\\"../../../utils/structs/Checkpoints.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^208^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: This contract does not provide interface compatibility with Compound's COMP token.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n */\\nabstract contract ERC20Votes is ERC20, Votes {\\n    /**\\n     * @dev Total supply cap has been exceeded, introducing a risk of votes overflowing.\\n     */\\n    error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint208).max` (2^208^ - 1).\\n     *\\n     * This maximum is enforced in {_update}. It limits the total supply of the token, which is otherwise a uint256,\\n     * so that checkpoints can be stored in the Trace208 structure used by {{Votes}}. Increasing this value will not\\n     * remove the underlying limitation, and will cause {_update} to fail because of a math overflow in\\n     * {_transferVotingUnits}. An override could be used to further restrict the total supply (to a lower value) if\\n     * additional logic requires it. When resolving override conflicts on this function, the minimum should be\\n     * returned.\\n     */\\n    function _maxSupply() internal view virtual returns (uint256) {\\n        return type(uint208).max;\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {IVotes-DelegateVotesChanged} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override {\\n        super._update(from, to, value);\\n        if (from == address(0)) {\\n            uint256 supply = totalSupply();\\n            uint256 cap = _maxSupply();\\n            if (supply > cap) {\\n                revert ERC20ExceededSafeSupply(supply, cap);\\n            }\\n        }\\n        _transferVotingUnits(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Returns the voting units of an `account`.\\n     *\\n     * WARNING: Overriding this function may compromise the internal vote accounting.\\n     * `ERC20Votes` assumes tokens map to voting units 1:1 and this is not easy to change.\\n     */\\n    function _getVotingUnits(address account) internal view virtual override returns (uint256) {\\n        return balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return _numCheckpoints(account);\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoints.Checkpoint208 memory) {\\n        return _checkpoints(account, pos);\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Pausable} from \\\"../../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_update}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\\n        super._update(from, to, value);\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/structs/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n */\\nlibrary Checkpoints {\\n    /**\\n     * @dev A value was attempted to be inserted on a past checkpoint.\\n     */\\n    error CheckpointUnorderedInsertion();\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace208 {\\n        Checkpoint208[] _checkpoints;\\n    }\\n\\n    struct Checkpoint208 {\\n        uint48 _key;\\n        uint208 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace208 storage self, uint48 key, uint208 value) internal returns (uint208, uint208) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace208 storage self) internal view returns (uint208) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint208 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace208 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint208[] storage self, uint48 key, uint208 value) private returns (uint208, uint208) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint208 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint208({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint208({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint208[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint208 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/governance/utils/Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/Votes.sol)\\npragma solidity ^0.8.20;\\n\\nimport {IERC5805} from \\\"../../interfaces/IERC5805.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Nonces} from \\\"../../utils/Nonces.sol\\\";\\nimport {EIP712} from \\\"../../utils/cryptography/EIP712.sol\\\";\\nimport {Checkpoints} from \\\"../../utils/structs/Checkpoints.sol\\\";\\nimport {SafeCast} from \\\"../../utils/math/SafeCast.sol\\\";\\nimport {ECDSA} from \\\"../../utils/cryptography/ECDSA.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\n/**\\n * @dev This is a base abstract contract that tracks voting units, which are a measure of voting power that can be\\n * transferred, and provides a system of vote delegation, where an account can delegate its voting units to a sort of\\n * \\\"representative\\\" that will pool delegated voting units from different accounts and can then use it to vote in\\n * decisions. In fact, voting units _must_ be delegated in order to count as actual votes, and an account has to\\n * delegate those votes to itself if it wishes to participate in decisions and does not have a trusted representative.\\n *\\n * This contract is often combined with a token contract such that voting units correspond to token units. For an\\n * example, see {ERC721Votes}.\\n *\\n * The full history of delegate votes is tracked on-chain so that governance protocols can consider votes as distributed\\n * at a particular block number to protect against flash loans and double voting. The opt-in delegate system makes the\\n * cost of this history tracking optional.\\n *\\n * When using this module the derived contract must implement {_getVotingUnits} (for example, make it return\\n * {ERC721-balanceOf}), and can use {_transferVotingUnits} to track a change in the distribution of those units (in the\\n * previous example, it would be included in {ERC721-_update}).\\n */\\nabstract contract Votes is Context, EIP712, Nonces, IERC5805 {\\n    using Checkpoints for Checkpoints.Trace208;\\n\\n    bytes32 private constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address account => address) private _delegatee;\\n\\n    mapping(address delegatee => Checkpoints.Trace208) private _delegateCheckpoints;\\n\\n    Checkpoints.Trace208 private _totalCheckpoints;\\n\\n    /**\\n     * @dev The clock was incorrectly modified.\\n     */\\n    error ERC6372InconsistentClock();\\n\\n    /**\\n     * @dev Lookup to future votes is not available.\\n     */\\n    error ERC5805FutureLookup(uint256 timepoint, uint48 clock);\\n\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based\\n     * checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\\n     */\\n    function clock() public view virtual returns (uint48) {\\n        return Time.blockNumber();\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in EIP-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual returns (string memory) {\\n        // Check that the clock was not modified\\n        if (clock() != Time.blockNumber()) {\\n            revert ERC6372InconsistentClock();\\n        }\\n        return \\\"mode=blocknumber&from=default\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) public view virtual returns (uint256) {\\n        return _delegateCheckpoints[account].latest();\\n    }\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\\n        uint48 currentTimepoint = clock();\\n        if (timepoint >= currentTimepoint) {\\n            revert ERC5805FutureLookup(timepoint, currentTimepoint);\\n        }\\n        return _delegateCheckpoints[account].upperLookupRecent(SafeCast.toUint48(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) public view virtual returns (uint256) {\\n        uint48 currentTimepoint = clock();\\n        if (timepoint >= currentTimepoint) {\\n            revert ERC5805FutureLookup(timepoint, currentTimepoint);\\n        }\\n        return _totalCheckpoints.upperLookupRecent(SafeCast.toUint48(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the current total supply of votes.\\n     */\\n    function _getTotalSupply() internal view virtual returns (uint256) {\\n        return _totalCheckpoints.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegatee[account];\\n    }\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        address account = _msgSender();\\n        _delegate(account, delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > expiry) {\\n            revert VotesExpiredSignature(expiry);\\n        }\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        _useCheckedNonce(signer, nonce);\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegate all of `account`'s voting units to `delegatee`.\\n     *\\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\\n     */\\n    function _delegate(address account, address delegatee) internal virtual {\\n        address oldDelegate = delegates(account);\\n        _delegatee[account] = delegatee;\\n\\n        emit DelegateChanged(account, oldDelegate, delegatee);\\n        _moveDelegateVotes(oldDelegate, delegatee, _getVotingUnits(account));\\n    }\\n\\n    /**\\n     * @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\\n     * should be zero. Total supply of voting units will be adjusted with mints and burns.\\n     */\\n    function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {\\n        if (from == address(0)) {\\n            _push(_totalCheckpoints, _add, SafeCast.toUint208(amount));\\n        }\\n        if (to == address(0)) {\\n            _push(_totalCheckpoints, _subtract, SafeCast.toUint208(amount));\\n        }\\n        _moveDelegateVotes(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Moves delegated votes from one delegate to another.\\n     */\\n    function _moveDelegateVotes(address from, address to, uint256 amount) private {\\n        if (from != to && amount > 0) {\\n            if (from != address(0)) {\\n                (uint256 oldValue, uint256 newValue) = _push(\\n                    _delegateCheckpoints[from],\\n                    _subtract,\\n                    SafeCast.toUint208(amount)\\n                );\\n                emit DelegateVotesChanged(from, oldValue, newValue);\\n            }\\n            if (to != address(0)) {\\n                (uint256 oldValue, uint256 newValue) = _push(\\n                    _delegateCheckpoints[to],\\n                    _add,\\n                    SafeCast.toUint208(amount)\\n                );\\n                emit DelegateVotesChanged(to, oldValue, newValue);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function _numCheckpoints(address account) internal view virtual returns (uint32) {\\n        return SafeCast.toUint32(_delegateCheckpoints[account].length());\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function _checkpoints(\\n        address account,\\n        uint32 pos\\n    ) internal view virtual returns (Checkpoints.Checkpoint208 memory) {\\n        return _delegateCheckpoints[account].at(pos);\\n    }\\n\\n    function _push(\\n        Checkpoints.Trace208 storage store,\\n        function(uint208, uint208) view returns (uint208) op,\\n        uint208 delta\\n    ) private returns (uint208, uint208) {\\n        return store.push(clock(), op(store.latest(), delta));\\n    }\\n\\n    function _add(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Must return the voting units held by an account.\\n     */\\n    function _getVotingUnits(address) internal view virtual returns (uint256);\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC3156FlashLender.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC3156FlashBorrower} from \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n */\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   ↓           ↓       ↓ [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/interfaces/IERC5805.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5805.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IVotes} from \\\"../governance/utils/IVotes.sol\\\";\\nimport {IERC6372} from \\\"./IERC6372.sol\\\";\\n\\ninterface IERC5805 is IERC6372, IVotes {}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n */\\ninterface IVotes {\\n    /**\\n     * @dev The signature used has expired.\\n     */\\n    error VotesExpiredSignature(uint256 expiry);\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"},\"@openzeppelin/contracts@5.0.0/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":true,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}}}}",
	"name": "SumaSamms",
	"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededSafeSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLoan\",\"type\":\"uint256\"}],\"name\":\"ERC3156ExceededMaxLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC3156InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ERC3156UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"_key\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"_value\",\"type\":\"uint208\"}],\"internalType\":\"struct Checkpoints.Checkpoint208\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CheckpointUnorderedInsertion()\":[{\"details\":\"A value was attempted to be inserted on a past checkpoint.\"}],\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20ExceededSafeSupply(uint256,uint256)\":[{\"details\":\"Total supply cap has been exceeded, introducing a risk of votes overflowing.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"ERC3156ExceededMaxLoan(uint256)\":[{\"details\":\"The requested loan exceeds the max loan value for `token`.\"}],\"ERC3156InvalidReceiver(address)\":[{\"details\":\"The receiver of a flashloan is not a valid {onFlashLoan} implementer.\"}],\"ERC3156UnsupportedToken(address)\":[{\"details\":\"The loan token is not valid.\"}],\"ERC5805FutureLookup(uint256,uint48)\":[{\"details\":\"Lookup to future votes is not available.\"}],\"ERC6372InconsistentClock()\":[{\"details\":\"The clock was incorrectly modified.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"VotesExpiredSignature(uint256)\":[{\"details\":\"The signature used has expired.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"DelegateChanged(address,address,address)\":{\"details\":\"Emitted when an account changes their delegate.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"details\":\"Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Machine-readable description of the clock as specified in EIP-6372.\"},\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"clock()\":{\"details\":\"Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"delegate(address)\":{\"details\":\"Delegates votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`.\"},\"delegates(address)\":{\"details\":\"Returns the delegate that `account` has chosen.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"flashFee(address,uint256)\":{\"details\":\"Returns the fee applied when doing flash loans. This function calls the {_flashFee} function which returns the fee applied when doing flash loans.\",\"params\":{\"token\":\"The token to be flash loaned.\",\"value\":\"The amount of tokens to be loaned.\"},\"returns\":{\"_0\":\"The fees applied to the corresponding flash loan.\"}},\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"Performs a flash loan. New tokens are minted and sent to the `receiver`, who is required to implement the {IERC3156FlashBorrower} interface. By the end of the flash loan, the receiver is expected to own value + fee tokens and have them approved back to the token contract itself so they can be burned.\",\"params\":{\"data\":\"An arbitrary datafield that is passed to the receiver.\",\"receiver\":\"The receiver of the flash loan. Should implement the {IERC3156FlashBorrower-onFlashLoan} interface.\",\"token\":\"The token to be flash loaned. Only `address(this)` is supported.\",\"value\":\"The amount of tokens to be loaned.\"},\"returns\":{\"_0\":\"`true` if the flash loan was successful.\"}},\"getPastTotalSupply(uint256)\":{\"details\":\"Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\"},\"getPastVotes(address,uint256)\":{\"details\":\"Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\"},\"getVotes(address)\":{\"details\":\"Returns the current amount of votes that `account` has.\"},\"maxFlashLoan(address)\":{\"details\":\"Returns the maximum amount of tokens available for loan.\",\"params\":{\"token\":\"The address of the token that is requested.\"},\"returns\":{\"_0\":\"The amount of token that can be loaned. NOTE: This function does not consider any form of supply cap, so in case it's used in a token with a cap like {ERC20Capped}, make sure to override this function to integrate the cap instead of `type(uint256).max`.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contract-6262427532.sol\":\"SumaSamms\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.0/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts@5.0.0/governance/utils/IVotes.sol\":{\"keccak256\":\"0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://348fc8e291d54314bb22437b532f443d5dbfb80c8cc9591567c1af6554ccf856\",\"dweb:/ipfs/QmP8ZTyitZinxcpwAHeYHhwj7u21zPpKXSiww38V74sXC2\"]},\"@openzeppelin/contracts@5.0.0/governance/utils/Votes.sol\":{\"keccak256\":\"0xb8f69828d41b3594afd7a8c6393565901c205d8b5baf5bd2e42dbac637172979\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c790253821191ac46b2050d87df820d4209871f90c616381e2c2c00ff3eaac34\",\"dweb:/ipfs/QmcPETTyuZBzDRL39JNXj3SBMdx3Y9o4fPQLSZ27py5Jim\"]},\"@openzeppelin/contracts@5.0.0/interfaces/IERC3156FlashBorrower.sol\":{\"keccak256\":\"0x9f9e6dba43fe0775c400aa384375f1f503efaf733a40187169fdfc195f5ea6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff5fe5fac5e4ecbf9fcd34c42b6d58d1af150263dfe07bc6785a59329dd1e475\",\"dweb:/ipfs/QmX1EhNKKL6n6RFrLLAYh6Uf3itkozjSHyGFs9DqwW4Rzy\"]},\"@openzeppelin/contracts@5.0.0/interfaces/IERC3156FlashLender.sol\":{\"keccak256\":\"0x95d9eb59f21e885406d0e28b0510f9e1a0e7b4abe6636b5c966682927c65cfdd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a1cbff4d620ab51abe0c4ede9e4395bae53bcc3a7edd74e0eb08d7bdef155306\",\"dweb:/ipfs/QmQcnBK28GDH4S5uXWqAcdRY1KcusXH4CxAqp87rYLir6n\"]},\"@openzeppelin/contracts@5.0.0/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts@5.0.0/interfaces/IERC5805.sol\":{\"keccak256\":\"0x4b9b89f91adbb7d3574f85394754cfb08c5b4eafca8a7061e2094a019ab8f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7373d5dbb8eb2381aa0883a456fac89283fcaf52f42fa805d4188f270716742a\",\"dweb:/ipfs/QmVnZDmT4ABvNhRJMaQnbCzsCA8HpyHPVaxi4fCi92LFv2\"]},\"@openzeppelin/contracts@5.0.0/interfaces/IERC6372.sol\":{\"keccak256\":\"0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49bf13f6c2a38a9bcc7b852d4e2b9cebb4068b832642cce61069cdb5f06bb2fb\",\"dweb:/ipfs/QmdKAJVE7rR2kENCZnEM1yKswrGii7WuE9gZpsQvnXJhwn\"]},\"@openzeppelin/contracts@5.0.0/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts@5.0.0/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts@5.0.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20FlashMint.sol\":{\"keccak256\":\"0xde94f78563e985acb16868dae5955135207baa103e2a654108b6f043fd8c51c7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b6f33918ae1ef9898bf976dbd62771ea10054cc330f8ca262e61ab6d0cdfa25\",\"dweb:/ipfs/QmReBtCQDR8F7pEd2Cwf2XWLtJNxQAKJiY3p7n7UZniwuL\"]},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20Pausable.sol\":{\"keccak256\":\"0xb18c53aecf95e53339972e3d496a56c42e6b60a03a49ce8e6a37d3bd9d5d0a67\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a8e54b0924a1acd92806a843998568d6bec01798c550bc440a85cfcd9cfba99\",\"dweb:/ipfs/QmZ26Y3ibYPbCRVB65NAQrGBF1UKDEu2fB8CHHMhYbBqmV\"]},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/ERC20Votes.sol\":{\"keccak256\":\"0x2a650f6e593cfe5ff2e514a17ea7f593ee70cefa1888066bc983a6308acff4b1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9a3477b9665a4b6d19f86bf2cfbfa8c08ba41193f15e68c0d75c0cab7e1fc753\",\"dweb:/ipfs/QmbcurrTatN1PBmkCWdrED8zhAqx5ah9Qp6uR8YwkKWA8V\"]},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts@5.0.0/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]},\"@openzeppelin/contracts@5.0.0/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts@5.0.0/utils/Pausable.sol\":{\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc\",\"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc\"]},\"@openzeppelin/contracts@5.0.0/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts@5.0.0/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts@5.0.0/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts@5.0.0/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts@5.0.0/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts@5.0.0/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts@5.0.0/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts@5.0.0/utils/math/SafeCast.sol\":{\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c\",\"dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj\"]},\"@openzeppelin/contracts@5.0.0/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"@openzeppelin/contracts@5.0.0/utils/structs/Checkpoints.sol\":{\"keccak256\":\"0xbdc5e074d7dd6678f67e92b1a51a20226801a407b0e1af3da367c5d1ff4519ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a36cca6b22fff3db16fc789ff6c60eea71d4b156065d4d0c83a0bc5e91a77a8b\",\"dweb:/ipfs/QmYN3exd5AemxjBrN8XMB1p5LbbE16uC3sjbYjwi8AjcGR\"]},\"@openzeppelin/contracts@5.0.0/utils/types/Time.sol\":{\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7f09bf94d5274334ec021f61a04659db303f31e60460e14b709c9bf187740111\",\"dweb:/ipfs/QmNvgomZYUwFAt4cZbPWAiTeSZQreGehY9BK5xyVJsUttb\"]},\"contract-6262427532.sol\":{\"keccak256\":\"0x77189a09814df3c6164b07aa0431ad34291438c28e6ada649532e265922575c3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ab409d4b4a810be48d513d0fbe35e33955b580d78904b79917f006ab030bcef\",\"dweb:/ipfs/QmWEonkUeRSYZhU3ffeWmQnr5fQ23wqufFj9ypHYEydtGx\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {
			"@_1076": {
				"entryPoint": null,
				"id": 1076,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_1990": {
				"entryPoint": null,
				"id": 1990,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_2413": {
				"entryPoint": null,
				"id": 2413,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_3523": {
				"entryPoint": null,
				"id": 3523,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_50": {
				"entryPoint": null,
				"id": 50,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_8538": {
				"entryPoint": null,
				"id": 8538,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_add_754": {
				"entryPoint": 1422,
				"id": 754,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@_buildDomainSeparator_3570": {
				"entryPoint": null,
				"id": 3570,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_insert_7572": {
				"entryPoint": 2045,
				"id": 7572,
				"parameterSlots": 3,
				"returnSlots": 2
			},
			"@_maxSupply_2128": {
				"entryPoint": null,
				"id": 2128,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_mint_1379": {
				"entryPoint": 652,
				"id": 1379,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_moveDelegateVotes_668": {
				"entryPoint": 1572,
				"id": 668,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_push_740": {
				"entryPoint": 1499,
				"id": 740,
				"parameterSlots": 3,
				"returnSlots": 2
			},
			"@_requireNotPaused_2450": {
				"entryPoint": 1080,
				"id": 2450,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_subtract_768": {
				"entryPoint": 1559,
				"id": 768,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@_transferOwnership_146": {
				"entryPoint": 507,
				"id": 146,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_transferVotingUnits_590": {
				"entryPoint": 929,
				"id": 590,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_unsafeAccess_7691": {
				"entryPoint": null,
				"id": 7691,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@_update_1346": {
				"entryPoint": 1119,
				"id": 1346,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_update_1940": {
				"entryPoint": 906,
				"id": 1940,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_update_2182": {
				"entryPoint": 796,
				"id": 2182,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_update_8593": {
				"entryPoint": 778,
				"id": 8593,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@blockNumber_8248": {
				"entryPoint": 2033,
				"id": 8248,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@clock_299": {
				"entryPoint": 1926,
				"id": 299,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@decimals_1103": {
				"entryPoint": null,
				"id": 1103,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@delegates_426": {
				"entryPoint": null,
				"id": 426,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@getStringSlot_2800": {
				"entryPoint": null,
				"id": 2800,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@latest_7400": {
				"entryPoint": 1942,
				"id": 7400,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@paused_2438": {
				"entryPoint": null,
				"id": 2438,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@push_7203": {
				"entryPoint": 2018,
				"id": 7203,
				"parameterSlots": 3,
				"returnSlots": 2
			},
			"@toShortStringWithFallback_2654": {
				"entryPoint": 596,
				"id": 2654,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@toShortString_2556": {
				"entryPoint": 712,
				"id": 2556,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toUint208_4976": {
				"entryPoint": 1442,
				"id": 4976,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toUint48_5536": {
				"entryPoint": 2443,
				"id": 5536,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@totalSupply_1112": {
				"entryPoint": null,
				"id": 1112,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address_fromMemory": {
				"entryPoint": 2495,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 6,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_rational_208_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 3207,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"array_dataslot_string_storage": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"checked_add_t_uint208": {
				"entryPoint": 3343,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 3321,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_exp_helper": {
				"entryPoint": 2916,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"checked_exp_t_uint256_t_uint8": {
				"entryPoint": 3165,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_exp_unsigned": {
				"entryPoint": 2988,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_mul_t_uint256": {
				"entryPoint": 3181,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_sub_t_uint208": {
				"entryPoint": 3385,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_sub_t_uint256": {
				"entryPoint": 3420,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"clean_up_bytearray_end_slots_string_storage": {
				"entryPoint": 2613,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
				"entryPoint": 3285,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
				"entryPoint": 2692,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"extract_byte_array_length": {
				"entryPoint": 2555,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_used_part_and_set_length_of_short_byte_array": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 2896,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 2535,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:8200:33",
					"nodeType": "YulBlock",
					"src": "0:8200:33",
					"statements": [
						{
							"nativeSrc": "6:3:33",
							"nodeType": "YulBlock",
							"src": "6:3:33",
							"statements": []
						},
						{
							"body": {
								"nativeSrc": "95:209:33",
								"nodeType": "YulBlock",
								"src": "95:209:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "141:16:33",
											"nodeType": "YulBlock",
											"src": "141:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "150:1:33",
																"nodeType": "YulLiteral",
																"src": "150:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "153:1:33",
																"nodeType": "YulLiteral",
																"src": "153:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "143:6:33",
															"nodeType": "YulIdentifier",
															"src": "143:6:33"
														},
														"nativeSrc": "143:12:33",
														"nodeType": "YulFunctionCall",
														"src": "143:12:33"
													},
													"nativeSrc": "143:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "143:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "116:7:33",
															"nodeType": "YulIdentifier",
															"src": "116:7:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "125:9:33",
															"nodeType": "YulIdentifier",
															"src": "125:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "112:3:33",
														"nodeType": "YulIdentifier",
														"src": "112:3:33"
													},
													"nativeSrc": "112:23:33",
													"nodeType": "YulFunctionCall",
													"src": "112:23:33"
												},
												{
													"kind": "number",
													"nativeSrc": "137:2:33",
													"nodeType": "YulLiteral",
													"src": "137:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "108:3:33",
												"nodeType": "YulIdentifier",
												"src": "108:3:33"
											},
											"nativeSrc": "108:32:33",
											"nodeType": "YulFunctionCall",
											"src": "108:32:33"
										},
										"nativeSrc": "105:52:33",
										"nodeType": "YulIf",
										"src": "105:52:33"
									},
									{
										"nativeSrc": "166:29:33",
										"nodeType": "YulVariableDeclaration",
										"src": "166:29:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "185:9:33",
													"nodeType": "YulIdentifier",
													"src": "185:9:33"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "179:5:33",
												"nodeType": "YulIdentifier",
												"src": "179:5:33"
											},
											"nativeSrc": "179:16:33",
											"nodeType": "YulFunctionCall",
											"src": "179:16:33"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "170:5:33",
												"nodeType": "YulTypedName",
												"src": "170:5:33",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "258:16:33",
											"nodeType": "YulBlock",
											"src": "258:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "267:1:33",
																"nodeType": "YulLiteral",
																"src": "267:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "270:1:33",
																"nodeType": "YulLiteral",
																"src": "270:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "260:6:33",
															"nodeType": "YulIdentifier",
															"src": "260:6:33"
														},
														"nativeSrc": "260:12:33",
														"nodeType": "YulFunctionCall",
														"src": "260:12:33"
													},
													"nativeSrc": "260:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "260:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "217:5:33",
															"nodeType": "YulIdentifier",
															"src": "217:5:33"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "228:5:33",
																	"nodeType": "YulIdentifier",
																	"src": "228:5:33"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "243:3:33",
																					"nodeType": "YulLiteral",
																					"src": "243:3:33",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "248:1:33",
																					"nodeType": "YulLiteral",
																					"src": "248:1:33",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nativeSrc": "239:3:33",
																				"nodeType": "YulIdentifier",
																				"src": "239:3:33"
																			},
																			"nativeSrc": "239:11:33",
																			"nodeType": "YulFunctionCall",
																			"src": "239:11:33"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "252:1:33",
																			"nodeType": "YulLiteral",
																			"src": "252:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nativeSrc": "235:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "235:3:33"
																	},
																	"nativeSrc": "235:19:33",
																	"nodeType": "YulFunctionCall",
																	"src": "235:19:33"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "224:3:33",
																"nodeType": "YulIdentifier",
																"src": "224:3:33"
															},
															"nativeSrc": "224:31:33",
															"nodeType": "YulFunctionCall",
															"src": "224:31:33"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "214:2:33",
														"nodeType": "YulIdentifier",
														"src": "214:2:33"
													},
													"nativeSrc": "214:42:33",
													"nodeType": "YulFunctionCall",
													"src": "214:42:33"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "207:6:33",
												"nodeType": "YulIdentifier",
												"src": "207:6:33"
											},
											"nativeSrc": "207:50:33",
											"nodeType": "YulFunctionCall",
											"src": "207:50:33"
										},
										"nativeSrc": "204:70:33",
										"nodeType": "YulIf",
										"src": "204:70:33"
									},
									{
										"nativeSrc": "283:15:33",
										"nodeType": "YulAssignment",
										"src": "283:15:33",
										"value": {
											"name": "value",
											"nativeSrc": "293:5:33",
											"nodeType": "YulIdentifier",
											"src": "293:5:33"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "283:6:33",
												"nodeType": "YulIdentifier",
												"src": "283:6:33"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address_fromMemory",
							"nativeSrc": "14:290:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "61:9:33",
									"nodeType": "YulTypedName",
									"src": "61:9:33",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "72:7:33",
									"nodeType": "YulTypedName",
									"src": "72:7:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "84:6:33",
									"nodeType": "YulTypedName",
									"src": "84:6:33",
									"type": ""
								}
							],
							"src": "14:290:33"
						},
						{
							"body": {
								"nativeSrc": "341:95:33",
								"nodeType": "YulBlock",
								"src": "341:95:33",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "358:1:33",
													"nodeType": "YulLiteral",
													"src": "358:1:33",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "365:3:33",
															"nodeType": "YulLiteral",
															"src": "365:3:33",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "370:10:33",
															"nodeType": "YulLiteral",
															"src": "370:10:33",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "361:3:33",
														"nodeType": "YulIdentifier",
														"src": "361:3:33"
													},
													"nativeSrc": "361:20:33",
													"nodeType": "YulFunctionCall",
													"src": "361:20:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "351:6:33",
												"nodeType": "YulIdentifier",
												"src": "351:6:33"
											},
											"nativeSrc": "351:31:33",
											"nodeType": "YulFunctionCall",
											"src": "351:31:33"
										},
										"nativeSrc": "351:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "351:31:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "398:1:33",
													"nodeType": "YulLiteral",
													"src": "398:1:33",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "401:4:33",
													"nodeType": "YulLiteral",
													"src": "401:4:33",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "391:6:33",
												"nodeType": "YulIdentifier",
												"src": "391:6:33"
											},
											"nativeSrc": "391:15:33",
											"nodeType": "YulFunctionCall",
											"src": "391:15:33"
										},
										"nativeSrc": "391:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "391:15:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "422:1:33",
													"nodeType": "YulLiteral",
													"src": "422:1:33",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "425:4:33",
													"nodeType": "YulLiteral",
													"src": "425:4:33",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "415:6:33",
												"nodeType": "YulIdentifier",
												"src": "415:6:33"
											},
											"nativeSrc": "415:15:33",
											"nodeType": "YulFunctionCall",
											"src": "415:15:33"
										},
										"nativeSrc": "415:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "415:15:33"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "309:127:33",
							"nodeType": "YulFunctionDefinition",
							"src": "309:127:33"
						},
						{
							"body": {
								"nativeSrc": "496:325:33",
								"nodeType": "YulBlock",
								"src": "496:325:33",
								"statements": [
									{
										"nativeSrc": "506:22:33",
										"nodeType": "YulAssignment",
										"src": "506:22:33",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "520:1:33",
													"nodeType": "YulLiteral",
													"src": "520:1:33",
													"type": "",
													"value": "1"
												},
												{
													"name": "data",
													"nativeSrc": "523:4:33",
													"nodeType": "YulIdentifier",
													"src": "523:4:33"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "516:3:33",
												"nodeType": "YulIdentifier",
												"src": "516:3:33"
											},
											"nativeSrc": "516:12:33",
											"nodeType": "YulFunctionCall",
											"src": "516:12:33"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "506:6:33",
												"nodeType": "YulIdentifier",
												"src": "506:6:33"
											}
										]
									},
									{
										"nativeSrc": "537:38:33",
										"nodeType": "YulVariableDeclaration",
										"src": "537:38:33",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "567:4:33",
													"nodeType": "YulIdentifier",
													"src": "567:4:33"
												},
												{
													"kind": "number",
													"nativeSrc": "573:1:33",
													"nodeType": "YulLiteral",
													"src": "573:1:33",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "563:3:33",
												"nodeType": "YulIdentifier",
												"src": "563:3:33"
											},
											"nativeSrc": "563:12:33",
											"nodeType": "YulFunctionCall",
											"src": "563:12:33"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "541:18:33",
												"nodeType": "YulTypedName",
												"src": "541:18:33",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "614:31:33",
											"nodeType": "YulBlock",
											"src": "614:31:33",
											"statements": [
												{
													"nativeSrc": "616:27:33",
													"nodeType": "YulAssignment",
													"src": "616:27:33",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "630:6:33",
																"nodeType": "YulIdentifier",
																"src": "630:6:33"
															},
															{
																"kind": "number",
																"nativeSrc": "638:4:33",
																"nodeType": "YulLiteral",
																"src": "638:4:33",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "626:3:33",
															"nodeType": "YulIdentifier",
															"src": "626:3:33"
														},
														"nativeSrc": "626:17:33",
														"nodeType": "YulFunctionCall",
														"src": "626:17:33"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "616:6:33",
															"nodeType": "YulIdentifier",
															"src": "616:6:33"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "594:18:33",
													"nodeType": "YulIdentifier",
													"src": "594:18:33"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "587:6:33",
												"nodeType": "YulIdentifier",
												"src": "587:6:33"
											},
											"nativeSrc": "587:26:33",
											"nodeType": "YulFunctionCall",
											"src": "587:26:33"
										},
										"nativeSrc": "584:61:33",
										"nodeType": "YulIf",
										"src": "584:61:33"
									},
									{
										"body": {
											"nativeSrc": "704:111:33",
											"nodeType": "YulBlock",
											"src": "704:111:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "725:1:33",
																"nodeType": "YulLiteral",
																"src": "725:1:33",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "732:3:33",
																		"nodeType": "YulLiteral",
																		"src": "732:3:33",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "737:10:33",
																		"nodeType": "YulLiteral",
																		"src": "737:10:33",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "728:3:33",
																	"nodeType": "YulIdentifier",
																	"src": "728:3:33"
																},
																"nativeSrc": "728:20:33",
																"nodeType": "YulFunctionCall",
																"src": "728:20:33"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "718:6:33",
															"nodeType": "YulIdentifier",
															"src": "718:6:33"
														},
														"nativeSrc": "718:31:33",
														"nodeType": "YulFunctionCall",
														"src": "718:31:33"
													},
													"nativeSrc": "718:31:33",
													"nodeType": "YulExpressionStatement",
													"src": "718:31:33"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "769:1:33",
																"nodeType": "YulLiteral",
																"src": "769:1:33",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nativeSrc": "772:4:33",
																"nodeType": "YulLiteral",
																"src": "772:4:33",
																"type": "",
																"value": "0x22"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "762:6:33",
															"nodeType": "YulIdentifier",
															"src": "762:6:33"
														},
														"nativeSrc": "762:15:33",
														"nodeType": "YulFunctionCall",
														"src": "762:15:33"
													},
													"nativeSrc": "762:15:33",
													"nodeType": "YulExpressionStatement",
													"src": "762:15:33"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "797:1:33",
																"nodeType": "YulLiteral",
																"src": "797:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "800:4:33",
																"nodeType": "YulLiteral",
																"src": "800:4:33",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "790:6:33",
															"nodeType": "YulIdentifier",
															"src": "790:6:33"
														},
														"nativeSrc": "790:15:33",
														"nodeType": "YulFunctionCall",
														"src": "790:15:33"
													},
													"nativeSrc": "790:15:33",
													"nodeType": "YulExpressionStatement",
													"src": "790:15:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "660:18:33",
													"nodeType": "YulIdentifier",
													"src": "660:18:33"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "683:6:33",
															"nodeType": "YulIdentifier",
															"src": "683:6:33"
														},
														{
															"kind": "number",
															"nativeSrc": "691:2:33",
															"nodeType": "YulLiteral",
															"src": "691:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "680:2:33",
														"nodeType": "YulIdentifier",
														"src": "680:2:33"
													},
													"nativeSrc": "680:14:33",
													"nodeType": "YulFunctionCall",
													"src": "680:14:33"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "657:2:33",
												"nodeType": "YulIdentifier",
												"src": "657:2:33"
											},
											"nativeSrc": "657:38:33",
											"nodeType": "YulFunctionCall",
											"src": "657:38:33"
										},
										"nativeSrc": "654:161:33",
										"nodeType": "YulIf",
										"src": "654:161:33"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "441:380:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "476:4:33",
									"nodeType": "YulTypedName",
									"src": "476:4:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "485:6:33",
									"nodeType": "YulTypedName",
									"src": "485:6:33",
									"type": ""
								}
							],
							"src": "441:380:33"
						},
						{
							"body": {
								"nativeSrc": "882:65:33",
								"nodeType": "YulBlock",
								"src": "882:65:33",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "899:1:33",
													"nodeType": "YulLiteral",
													"src": "899:1:33",
													"type": "",
													"value": "0"
												},
												{
													"name": "ptr",
													"nativeSrc": "902:3:33",
													"nodeType": "YulIdentifier",
													"src": "902:3:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "892:6:33",
												"nodeType": "YulIdentifier",
												"src": "892:6:33"
											},
											"nativeSrc": "892:14:33",
											"nodeType": "YulFunctionCall",
											"src": "892:14:33"
										},
										"nativeSrc": "892:14:33",
										"nodeType": "YulExpressionStatement",
										"src": "892:14:33"
									},
									{
										"nativeSrc": "915:26:33",
										"nodeType": "YulAssignment",
										"src": "915:26:33",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "933:1:33",
													"nodeType": "YulLiteral",
													"src": "933:1:33",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "936:4:33",
													"nodeType": "YulLiteral",
													"src": "936:4:33",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "keccak256",
												"nativeSrc": "923:9:33",
												"nodeType": "YulIdentifier",
												"src": "923:9:33"
											},
											"nativeSrc": "923:18:33",
											"nodeType": "YulFunctionCall",
											"src": "923:18:33"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "915:4:33",
												"nodeType": "YulIdentifier",
												"src": "915:4:33"
											}
										]
									}
								]
							},
							"name": "array_dataslot_string_storage",
							"nativeSrc": "826:121:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "865:3:33",
									"nodeType": "YulTypedName",
									"src": "865:3:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nativeSrc": "873:4:33",
									"nodeType": "YulTypedName",
									"src": "873:4:33",
									"type": ""
								}
							],
							"src": "826:121:33"
						},
						{
							"body": {
								"nativeSrc": "1033:437:33",
								"nodeType": "YulBlock",
								"src": "1033:437:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "1066:398:33",
											"nodeType": "YulBlock",
											"src": "1066:398:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1087:1:33",
																"nodeType": "YulLiteral",
																"src": "1087:1:33",
																"type": "",
																"value": "0"
															},
															{
																"name": "array",
																"nativeSrc": "1090:5:33",
																"nodeType": "YulIdentifier",
																"src": "1090:5:33"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "1080:6:33",
															"nodeType": "YulIdentifier",
															"src": "1080:6:33"
														},
														"nativeSrc": "1080:16:33",
														"nodeType": "YulFunctionCall",
														"src": "1080:16:33"
													},
													"nativeSrc": "1080:16:33",
													"nodeType": "YulExpressionStatement",
													"src": "1080:16:33"
												},
												{
													"nativeSrc": "1109:30:33",
													"nodeType": "YulVariableDeclaration",
													"src": "1109:30:33",
													"value": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1131:1:33",
																"nodeType": "YulLiteral",
																"src": "1131:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "1134:4:33",
																"nodeType": "YulLiteral",
																"src": "1134:4:33",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "keccak256",
															"nativeSrc": "1121:9:33",
															"nodeType": "YulIdentifier",
															"src": "1121:9:33"
														},
														"nativeSrc": "1121:18:33",
														"nodeType": "YulFunctionCall",
														"src": "1121:18:33"
													},
													"variables": [
														{
															"name": "data",
															"nativeSrc": "1113:4:33",
															"nodeType": "YulTypedName",
															"src": "1113:4:33",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "1152:57:33",
													"nodeType": "YulVariableDeclaration",
													"src": "1152:57:33",
													"value": {
														"arguments": [
															{
																"name": "data",
																"nativeSrc": "1175:4:33",
																"nodeType": "YulIdentifier",
																"src": "1175:4:33"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1185:1:33",
																		"nodeType": "YulLiteral",
																		"src": "1185:1:33",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "startIndex",
																				"nativeSrc": "1192:10:33",
																				"nodeType": "YulIdentifier",
																				"src": "1192:10:33"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1204:2:33",
																				"nodeType": "YulLiteral",
																				"src": "1204:2:33",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1188:3:33",
																			"nodeType": "YulIdentifier",
																			"src": "1188:3:33"
																		},
																		"nativeSrc": "1188:19:33",
																		"nodeType": "YulFunctionCall",
																		"src": "1188:19:33"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "1181:3:33",
																	"nodeType": "YulIdentifier",
																	"src": "1181:3:33"
																},
																"nativeSrc": "1181:27:33",
																"nodeType": "YulFunctionCall",
																"src": "1181:27:33"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "1171:3:33",
															"nodeType": "YulIdentifier",
															"src": "1171:3:33"
														},
														"nativeSrc": "1171:38:33",
														"nodeType": "YulFunctionCall",
														"src": "1171:38:33"
													},
													"variables": [
														{
															"name": "deleteStart",
															"nativeSrc": "1156:11:33",
															"nodeType": "YulTypedName",
															"src": "1156:11:33",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nativeSrc": "1246:23:33",
														"nodeType": "YulBlock",
														"src": "1246:23:33",
														"statements": [
															{
																"nativeSrc": "1248:19:33",
																"nodeType": "YulAssignment",
																"src": "1248:19:33",
																"value": {
																	"name": "data",
																	"nativeSrc": "1263:4:33",
																	"nodeType": "YulIdentifier",
																	"src": "1263:4:33"
																},
																"variableNames": [
																	{
																		"name": "deleteStart",
																		"nativeSrc": "1248:11:33",
																		"nodeType": "YulIdentifier",
																		"src": "1248:11:33"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "startIndex",
																"nativeSrc": "1228:10:33",
																"nodeType": "YulIdentifier",
																"src": "1228:10:33"
															},
															{
																"kind": "number",
																"nativeSrc": "1240:4:33",
																"nodeType": "YulLiteral",
																"src": "1240:4:33",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "lt",
															"nativeSrc": "1225:2:33",
															"nodeType": "YulIdentifier",
															"src": "1225:2:33"
														},
														"nativeSrc": "1225:20:33",
														"nodeType": "YulFunctionCall",
														"src": "1225:20:33"
													},
													"nativeSrc": "1222:47:33",
													"nodeType": "YulIf",
													"src": "1222:47:33"
												},
												{
													"nativeSrc": "1282:41:33",
													"nodeType": "YulVariableDeclaration",
													"src": "1282:41:33",
													"value": {
														"arguments": [
															{
																"name": "data",
																"nativeSrc": "1296:4:33",
																"nodeType": "YulIdentifier",
																"src": "1296:4:33"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1306:1:33",
																		"nodeType": "YulLiteral",
																		"src": "1306:1:33",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "len",
																				"nativeSrc": "1313:3:33",
																				"nodeType": "YulIdentifier",
																				"src": "1313:3:33"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1318:2:33",
																				"nodeType": "YulLiteral",
																				"src": "1318:2:33",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1309:3:33",
																			"nodeType": "YulIdentifier",
																			"src": "1309:3:33"
																		},
																		"nativeSrc": "1309:12:33",
																		"nodeType": "YulFunctionCall",
																		"src": "1309:12:33"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "1302:3:33",
																	"nodeType": "YulIdentifier",
																	"src": "1302:3:33"
																},
																"nativeSrc": "1302:20:33",
																"nodeType": "YulFunctionCall",
																"src": "1302:20:33"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "1292:3:33",
															"nodeType": "YulIdentifier",
															"src": "1292:3:33"
														},
														"nativeSrc": "1292:31:33",
														"nodeType": "YulFunctionCall",
														"src": "1292:31:33"
													},
													"variables": [
														{
															"name": "_1",
															"nativeSrc": "1286:2:33",
															"nodeType": "YulTypedName",
															"src": "1286:2:33",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "1336:24:33",
													"nodeType": "YulVariableDeclaration",
													"src": "1336:24:33",
													"value": {
														"name": "deleteStart",
														"nativeSrc": "1349:11:33",
														"nodeType": "YulIdentifier",
														"src": "1349:11:33"
													},
													"variables": [
														{
															"name": "start",
															"nativeSrc": "1340:5:33",
															"nodeType": "YulTypedName",
															"src": "1340:5:33",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nativeSrc": "1434:20:33",
														"nodeType": "YulBlock",
														"src": "1434:20:33",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"name": "start",
																			"nativeSrc": "1443:5:33",
																			"nodeType": "YulIdentifier",
																			"src": "1443:5:33"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "1450:1:33",
																			"nodeType": "YulLiteral",
																			"src": "1450:1:33",
																			"type": "",
																			"value": "0"
																		}
																	],
																	"functionName": {
																		"name": "sstore",
																		"nativeSrc": "1436:6:33",
																		"nodeType": "YulIdentifier",
																		"src": "1436:6:33"
																	},
																	"nativeSrc": "1436:16:33",
																	"nodeType": "YulFunctionCall",
																	"src": "1436:16:33"
																},
																"nativeSrc": "1436:16:33",
																"nodeType": "YulExpressionStatement",
																"src": "1436:16:33"
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "start",
																"nativeSrc": "1384:5:33",
																"nodeType": "YulIdentifier",
																"src": "1384:5:33"
															},
															{
																"name": "_1",
																"nativeSrc": "1391:2:33",
																"nodeType": "YulIdentifier",
																"src": "1391:2:33"
															}
														],
														"functionName": {
															"name": "lt",
															"nativeSrc": "1381:2:33",
															"nodeType": "YulIdentifier",
															"src": "1381:2:33"
														},
														"nativeSrc": "1381:13:33",
														"nodeType": "YulFunctionCall",
														"src": "1381:13:33"
													},
													"nativeSrc": "1373:81:33",
													"nodeType": "YulForLoop",
													"post": {
														"nativeSrc": "1395:26:33",
														"nodeType": "YulBlock",
														"src": "1395:26:33",
														"statements": [
															{
																"nativeSrc": "1397:22:33",
																"nodeType": "YulAssignment",
																"src": "1397:22:33",
																"value": {
																	"arguments": [
																		{
																			"name": "start",
																			"nativeSrc": "1410:5:33",
																			"nodeType": "YulIdentifier",
																			"src": "1410:5:33"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "1417:1:33",
																			"nodeType": "YulLiteral",
																			"src": "1417:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "1406:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "1406:3:33"
																	},
																	"nativeSrc": "1406:13:33",
																	"nodeType": "YulFunctionCall",
																	"src": "1406:13:33"
																},
																"variableNames": [
																	{
																		"name": "start",
																		"nativeSrc": "1397:5:33",
																		"nodeType": "YulIdentifier",
																		"src": "1397:5:33"
																	}
																]
															}
														]
													},
													"pre": {
														"nativeSrc": "1377:3:33",
														"nodeType": "YulBlock",
														"src": "1377:3:33",
														"statements": []
													},
													"src": "1373:81:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "len",
													"nativeSrc": "1049:3:33",
													"nodeType": "YulIdentifier",
													"src": "1049:3:33"
												},
												{
													"kind": "number",
													"nativeSrc": "1054:2:33",
													"nodeType": "YulLiteral",
													"src": "1054:2:33",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "1046:2:33",
												"nodeType": "YulIdentifier",
												"src": "1046:2:33"
											},
											"nativeSrc": "1046:11:33",
											"nodeType": "YulFunctionCall",
											"src": "1046:11:33"
										},
										"nativeSrc": "1043:421:33",
										"nodeType": "YulIf",
										"src": "1043:421:33"
									}
								]
							},
							"name": "clean_up_bytearray_end_slots_string_storage",
							"nativeSrc": "952:518:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nativeSrc": "1005:5:33",
									"nodeType": "YulTypedName",
									"src": "1005:5:33",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "1012:3:33",
									"nodeType": "YulTypedName",
									"src": "1012:3:33",
									"type": ""
								},
								{
									"name": "startIndex",
									"nativeSrc": "1017:10:33",
									"nodeType": "YulTypedName",
									"src": "1017:10:33",
									"type": ""
								}
							],
							"src": "952:518:33"
						},
						{
							"body": {
								"nativeSrc": "1560:81:33",
								"nodeType": "YulBlock",
								"src": "1560:81:33",
								"statements": [
									{
										"nativeSrc": "1570:65:33",
										"nodeType": "YulAssignment",
										"src": "1570:65:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "data",
															"nativeSrc": "1585:4:33",
															"nodeType": "YulIdentifier",
															"src": "1585:4:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1603:1:33",
																					"nodeType": "YulLiteral",
																					"src": "1603:1:33",
																					"type": "",
																					"value": "3"
																				},
																				{
																					"name": "len",
																					"nativeSrc": "1606:3:33",
																					"nodeType": "YulIdentifier",
																					"src": "1606:3:33"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nativeSrc": "1599:3:33",
																				"nodeType": "YulIdentifier",
																				"src": "1599:3:33"
																			},
																			"nativeSrc": "1599:11:33",
																			"nodeType": "YulFunctionCall",
																			"src": "1599:11:33"
																		},
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1616:1:33",
																					"nodeType": "YulLiteral",
																					"src": "1616:1:33",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "not",
																				"nativeSrc": "1612:3:33",
																				"nodeType": "YulIdentifier",
																				"src": "1612:3:33"
																			},
																			"nativeSrc": "1612:6:33",
																			"nodeType": "YulFunctionCall",
																			"src": "1612:6:33"
																		}
																	],
																	"functionName": {
																		"name": "shr",
																		"nativeSrc": "1595:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "1595:3:33"
																	},
																	"nativeSrc": "1595:24:33",
																	"nodeType": "YulFunctionCall",
																	"src": "1595:24:33"
																}
															],
															"functionName": {
																"name": "not",
																"nativeSrc": "1591:3:33",
																"nodeType": "YulIdentifier",
																"src": "1591:3:33"
															},
															"nativeSrc": "1591:29:33",
															"nodeType": "YulFunctionCall",
															"src": "1591:29:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "1581:3:33",
														"nodeType": "YulIdentifier",
														"src": "1581:3:33"
													},
													"nativeSrc": "1581:40:33",
													"nodeType": "YulFunctionCall",
													"src": "1581:40:33"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "1627:1:33",
															"nodeType": "YulLiteral",
															"src": "1627:1:33",
															"type": "",
															"value": "1"
														},
														{
															"name": "len",
															"nativeSrc": "1630:3:33",
															"nodeType": "YulIdentifier",
															"src": "1630:3:33"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "1623:3:33",
														"nodeType": "YulIdentifier",
														"src": "1623:3:33"
													},
													"nativeSrc": "1623:11:33",
													"nodeType": "YulFunctionCall",
													"src": "1623:11:33"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "1578:2:33",
												"nodeType": "YulIdentifier",
												"src": "1578:2:33"
											},
											"nativeSrc": "1578:57:33",
											"nodeType": "YulFunctionCall",
											"src": "1578:57:33"
										},
										"variableNames": [
											{
												"name": "used",
												"nativeSrc": "1570:4:33",
												"nodeType": "YulIdentifier",
												"src": "1570:4:33"
											}
										]
									}
								]
							},
							"name": "extract_used_part_and_set_length_of_short_byte_array",
							"nativeSrc": "1475:166:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "1537:4:33",
									"nodeType": "YulTypedName",
									"src": "1537:4:33",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "1543:3:33",
									"nodeType": "YulTypedName",
									"src": "1543:3:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "used",
									"nativeSrc": "1551:4:33",
									"nodeType": "YulTypedName",
									"src": "1551:4:33",
									"type": ""
								}
							],
							"src": "1475:166:33"
						},
						{
							"body": {
								"nativeSrc": "1742:1249:33",
								"nodeType": "YulBlock",
								"src": "1742:1249:33",
								"statements": [
									{
										"nativeSrc": "1752:24:33",
										"nodeType": "YulVariableDeclaration",
										"src": "1752:24:33",
										"value": {
											"arguments": [
												{
													"name": "src",
													"nativeSrc": "1772:3:33",
													"nodeType": "YulIdentifier",
													"src": "1772:3:33"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "1766:5:33",
												"nodeType": "YulIdentifier",
												"src": "1766:5:33"
											},
											"nativeSrc": "1766:10:33",
											"nodeType": "YulFunctionCall",
											"src": "1766:10:33"
										},
										"variables": [
											{
												"name": "newLen",
												"nativeSrc": "1756:6:33",
												"nodeType": "YulTypedName",
												"src": "1756:6:33",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "1819:22:33",
											"nodeType": "YulBlock",
											"src": "1819:22:33",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "1821:16:33",
															"nodeType": "YulIdentifier",
															"src": "1821:16:33"
														},
														"nativeSrc": "1821:18:33",
														"nodeType": "YulFunctionCall",
														"src": "1821:18:33"
													},
													"nativeSrc": "1821:18:33",
													"nodeType": "YulExpressionStatement",
													"src": "1821:18:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "1791:6:33",
													"nodeType": "YulIdentifier",
													"src": "1791:6:33"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "1807:2:33",
																	"nodeType": "YulLiteral",
																	"src": "1807:2:33",
																	"type": "",
																	"value": "64"
																},
																{
																	"kind": "number",
																	"nativeSrc": "1811:1:33",
																	"nodeType": "YulLiteral",
																	"src": "1811:1:33",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "shl",
																"nativeSrc": "1803:3:33",
																"nodeType": "YulIdentifier",
																"src": "1803:3:33"
															},
															"nativeSrc": "1803:10:33",
															"nodeType": "YulFunctionCall",
															"src": "1803:10:33"
														},
														{
															"kind": "number",
															"nativeSrc": "1815:1:33",
															"nodeType": "YulLiteral",
															"src": "1815:1:33",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1799:3:33",
														"nodeType": "YulIdentifier",
														"src": "1799:3:33"
													},
													"nativeSrc": "1799:18:33",
													"nodeType": "YulFunctionCall",
													"src": "1799:18:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "1788:2:33",
												"nodeType": "YulIdentifier",
												"src": "1788:2:33"
											},
											"nativeSrc": "1788:30:33",
											"nodeType": "YulFunctionCall",
											"src": "1788:30:33"
										},
										"nativeSrc": "1785:56:33",
										"nodeType": "YulIf",
										"src": "1785:56:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "1894:4:33",
													"nodeType": "YulIdentifier",
													"src": "1894:4:33"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "slot",
																	"nativeSrc": "1932:4:33",
																	"nodeType": "YulIdentifier",
																	"src": "1932:4:33"
																}
															],
															"functionName": {
																"name": "sload",
																"nativeSrc": "1926:5:33",
																"nodeType": "YulIdentifier",
																"src": "1926:5:33"
															},
															"nativeSrc": "1926:11:33",
															"nodeType": "YulFunctionCall",
															"src": "1926:11:33"
														}
													],
													"functionName": {
														"name": "extract_byte_array_length",
														"nativeSrc": "1900:25:33",
														"nodeType": "YulIdentifier",
														"src": "1900:25:33"
													},
													"nativeSrc": "1900:38:33",
													"nodeType": "YulFunctionCall",
													"src": "1900:38:33"
												},
												{
													"name": "newLen",
													"nativeSrc": "1940:6:33",
													"nodeType": "YulIdentifier",
													"src": "1940:6:33"
												}
											],
											"functionName": {
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "1850:43:33",
												"nodeType": "YulIdentifier",
												"src": "1850:43:33"
											},
											"nativeSrc": "1850:97:33",
											"nodeType": "YulFunctionCall",
											"src": "1850:97:33"
										},
										"nativeSrc": "1850:97:33",
										"nodeType": "YulExpressionStatement",
										"src": "1850:97:33"
									},
									{
										"nativeSrc": "1956:18:33",
										"nodeType": "YulVariableDeclaration",
										"src": "1956:18:33",
										"value": {
											"kind": "number",
											"nativeSrc": "1973:1:33",
											"nodeType": "YulLiteral",
											"src": "1973:1:33",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "srcOffset",
												"nativeSrc": "1960:9:33",
												"nodeType": "YulTypedName",
												"src": "1960:9:33",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "1983:23:33",
										"nodeType": "YulVariableDeclaration",
										"src": "1983:23:33",
										"value": {
											"kind": "number",
											"nativeSrc": "2002:4:33",
											"nodeType": "YulLiteral",
											"src": "2002:4:33",
											"type": "",
											"value": "0x20"
										},
										"variables": [
											{
												"name": "srcOffset_1",
												"nativeSrc": "1987:11:33",
												"nodeType": "YulTypedName",
												"src": "1987:11:33",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "2015:17:33",
										"nodeType": "YulAssignment",
										"src": "2015:17:33",
										"value": {
											"kind": "number",
											"nativeSrc": "2028:4:33",
											"nodeType": "YulLiteral",
											"src": "2028:4:33",
											"type": "",
											"value": "0x20"
										},
										"variableNames": [
											{
												"name": "srcOffset",
												"nativeSrc": "2015:9:33",
												"nodeType": "YulIdentifier",
												"src": "2015:9:33"
											}
										]
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "2078:656:33",
													"nodeType": "YulBlock",
													"src": "2078:656:33",
													"statements": [
														{
															"nativeSrc": "2092:35:33",
															"nodeType": "YulVariableDeclaration",
															"src": "2092:35:33",
															"value": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "2111:6:33",
																		"nodeType": "YulIdentifier",
																		"src": "2111:6:33"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "2123:2:33",
																				"nodeType": "YulLiteral",
																				"src": "2123:2:33",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "2119:3:33",
																			"nodeType": "YulIdentifier",
																			"src": "2119:3:33"
																		},
																		"nativeSrc": "2119:7:33",
																		"nodeType": "YulFunctionCall",
																		"src": "2119:7:33"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "2107:3:33",
																	"nodeType": "YulIdentifier",
																	"src": "2107:3:33"
																},
																"nativeSrc": "2107:20:33",
																"nodeType": "YulFunctionCall",
																"src": "2107:20:33"
															},
															"variables": [
																{
																	"name": "loopEnd",
																	"nativeSrc": "2096:7:33",
																	"nodeType": "YulTypedName",
																	"src": "2096:7:33",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2140:49:33",
															"nodeType": "YulVariableDeclaration",
															"src": "2140:49:33",
															"value": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "2184:4:33",
																		"nodeType": "YulIdentifier",
																		"src": "2184:4:33"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_string_storage",
																	"nativeSrc": "2154:29:33",
																	"nodeType": "YulIdentifier",
																	"src": "2154:29:33"
																},
																"nativeSrc": "2154:35:33",
																"nodeType": "YulFunctionCall",
																"src": "2154:35:33"
															},
															"variables": [
																{
																	"name": "dstPtr",
																	"nativeSrc": "2144:6:33",
																	"nodeType": "YulTypedName",
																	"src": "2144:6:33",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2202:10:33",
															"nodeType": "YulVariableDeclaration",
															"src": "2202:10:33",
															"value": {
																"kind": "number",
																"nativeSrc": "2211:1:33",
																"nodeType": "YulLiteral",
																"src": "2211:1:33",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "2206:1:33",
																	"nodeType": "YulTypedName",
																	"src": "2206:1:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2289:172:33",
																"nodeType": "YulBlock",
																"src": "2289:172:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "2314:6:33",
																					"nodeType": "YulIdentifier",
																					"src": "2314:6:33"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nativeSrc": "2332:3:33",
																									"nodeType": "YulIdentifier",
																									"src": "2332:3:33"
																								},
																								{
																									"name": "srcOffset",
																									"nativeSrc": "2337:9:33",
																									"nodeType": "YulIdentifier",
																									"src": "2337:9:33"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2328:3:33",
																								"nodeType": "YulIdentifier",
																								"src": "2328:3:33"
																							},
																							"nativeSrc": "2328:19:33",
																							"nodeType": "YulFunctionCall",
																							"src": "2328:19:33"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "2322:5:33",
																						"nodeType": "YulIdentifier",
																						"src": "2322:5:33"
																					},
																					"nativeSrc": "2322:26:33",
																					"nodeType": "YulFunctionCall",
																					"src": "2322:26:33"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "2307:6:33",
																				"nodeType": "YulIdentifier",
																				"src": "2307:6:33"
																			},
																			"nativeSrc": "2307:42:33",
																			"nodeType": "YulFunctionCall",
																			"src": "2307:42:33"
																		},
																		"nativeSrc": "2307:42:33",
																		"nodeType": "YulExpressionStatement",
																		"src": "2307:42:33"
																	},
																	{
																		"nativeSrc": "2366:24:33",
																		"nodeType": "YulAssignment",
																		"src": "2366:24:33",
																		"value": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "2380:6:33",
																					"nodeType": "YulIdentifier",
																					"src": "2380:6:33"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2388:1:33",
																					"nodeType": "YulLiteral",
																					"src": "2388:1:33",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "2376:3:33",
																				"nodeType": "YulIdentifier",
																				"src": "2376:3:33"
																			},
																			"nativeSrc": "2376:14:33",
																			"nodeType": "YulFunctionCall",
																			"src": "2376:14:33"
																		},
																		"variableNames": [
																			{
																				"name": "dstPtr",
																				"nativeSrc": "2366:6:33",
																				"nodeType": "YulIdentifier",
																				"src": "2366:6:33"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2407:40:33",
																		"nodeType": "YulAssignment",
																		"src": "2407:40:33",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcOffset",
																					"nativeSrc": "2424:9:33",
																					"nodeType": "YulIdentifier",
																					"src": "2424:9:33"
																				},
																				{
																					"name": "srcOffset_1",
																					"nativeSrc": "2435:11:33",
																					"nodeType": "YulIdentifier",
																					"src": "2435:11:33"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "2420:3:33",
																				"nodeType": "YulIdentifier",
																				"src": "2420:3:33"
																			},
																			"nativeSrc": "2420:27:33",
																			"nodeType": "YulFunctionCall",
																			"src": "2420:27:33"
																		},
																		"variableNames": [
																			{
																				"name": "srcOffset",
																				"nativeSrc": "2407:9:33",
																				"nodeType": "YulIdentifier",
																				"src": "2407:9:33"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "2236:1:33",
																		"nodeType": "YulIdentifier",
																		"src": "2236:1:33"
																	},
																	{
																		"name": "loopEnd",
																		"nativeSrc": "2239:7:33",
																		"nodeType": "YulIdentifier",
																		"src": "2239:7:33"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "2233:2:33",
																	"nodeType": "YulIdentifier",
																	"src": "2233:2:33"
																},
																"nativeSrc": "2233:14:33",
																"nodeType": "YulFunctionCall",
																"src": "2233:14:33"
															},
															"nativeSrc": "2225:236:33",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "2248:28:33",
																"nodeType": "YulBlock",
																"src": "2248:28:33",
																"statements": [
																	{
																		"nativeSrc": "2250:24:33",
																		"nodeType": "YulAssignment",
																		"src": "2250:24:33",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "2259:1:33",
																					"nodeType": "YulIdentifier",
																					"src": "2259:1:33"
																				},
																				{
																					"name": "srcOffset_1",
																					"nativeSrc": "2262:11:33",
																					"nodeType": "YulIdentifier",
																					"src": "2262:11:33"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "2255:3:33",
																				"nodeType": "YulIdentifier",
																				"src": "2255:3:33"
																			},
																			"nativeSrc": "2255:19:33",
																			"nodeType": "YulFunctionCall",
																			"src": "2255:19:33"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "2250:1:33",
																				"nodeType": "YulIdentifier",
																				"src": "2250:1:33"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "2229:3:33",
																"nodeType": "YulBlock",
																"src": "2229:3:33",
																"statements": []
															},
															"src": "2225:236:33"
														},
														{
															"body": {
																"nativeSrc": "2509:166:33",
																"nodeType": "YulBlock",
																"src": "2509:166:33",
																"statements": [
																	{
																		"nativeSrc": "2527:43:33",
																		"nodeType": "YulVariableDeclaration",
																		"src": "2527:43:33",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "2554:3:33",
																							"nodeType": "YulIdentifier",
																							"src": "2554:3:33"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "2559:9:33",
																							"nodeType": "YulIdentifier",
																							"src": "2559:9:33"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2550:3:33",
																						"nodeType": "YulIdentifier",
																						"src": "2550:3:33"
																					},
																					"nativeSrc": "2550:19:33",
																					"nodeType": "YulFunctionCall",
																					"src": "2550:19:33"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2544:5:33",
																				"nodeType": "YulIdentifier",
																				"src": "2544:5:33"
																			},
																			"nativeSrc": "2544:26:33",
																			"nodeType": "YulFunctionCall",
																			"src": "2544:26:33"
																		},
																		"variables": [
																			{
																				"name": "lastValue",
																				"nativeSrc": "2531:9:33",
																				"nodeType": "YulTypedName",
																				"src": "2531:9:33",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "2594:6:33",
																					"nodeType": "YulIdentifier",
																					"src": "2594:6:33"
																				},
																				{
																					"arguments": [
																						{
																							"name": "lastValue",
																							"nativeSrc": "2606:9:33",
																							"nodeType": "YulIdentifier",
																							"src": "2606:9:33"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"arguments": [
																												{
																													"arguments": [
																														{
																															"kind": "number",
																															"nativeSrc": "2633:1:33",
																															"nodeType": "YulLiteral",
																															"src": "2633:1:33",
																															"type": "",
																															"value": "3"
																														},
																														{
																															"name": "newLen",
																															"nativeSrc": "2636:6:33",
																															"nodeType": "YulIdentifier",
																															"src": "2636:6:33"
																														}
																													],
																													"functionName": {
																														"name": "shl",
																														"nativeSrc": "2629:3:33",
																														"nodeType": "YulIdentifier",
																														"src": "2629:3:33"
																													},
																													"nativeSrc": "2629:14:33",
																													"nodeType": "YulFunctionCall",
																													"src": "2629:14:33"
																												},
																												{
																													"kind": "number",
																													"nativeSrc": "2645:3:33",
																													"nodeType": "YulLiteral",
																													"src": "2645:3:33",
																													"type": "",
																													"value": "248"
																												}
																											],
																											"functionName": {
																												"name": "and",
																												"nativeSrc": "2625:3:33",
																												"nodeType": "YulIdentifier",
																												"src": "2625:3:33"
																											},
																											"nativeSrc": "2625:24:33",
																											"nodeType": "YulFunctionCall",
																											"src": "2625:24:33"
																										},
																										{
																											"arguments": [
																												{
																													"kind": "number",
																													"nativeSrc": "2655:1:33",
																													"nodeType": "YulLiteral",
																													"src": "2655:1:33",
																													"type": "",
																													"value": "0"
																												}
																											],
																											"functionName": {
																												"name": "not",
																												"nativeSrc": "2651:3:33",
																												"nodeType": "YulIdentifier",
																												"src": "2651:3:33"
																											},
																											"nativeSrc": "2651:6:33",
																											"nodeType": "YulFunctionCall",
																											"src": "2651:6:33"
																										}
																									],
																									"functionName": {
																										"name": "shr",
																										"nativeSrc": "2621:3:33",
																										"nodeType": "YulIdentifier",
																										"src": "2621:3:33"
																									},
																									"nativeSrc": "2621:37:33",
																									"nodeType": "YulFunctionCall",
																									"src": "2621:37:33"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "2617:3:33",
																								"nodeType": "YulIdentifier",
																								"src": "2617:3:33"
																							},
																							"nativeSrc": "2617:42:33",
																							"nodeType": "YulFunctionCall",
																							"src": "2617:42:33"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "2602:3:33",
																						"nodeType": "YulIdentifier",
																						"src": "2602:3:33"
																					},
																					"nativeSrc": "2602:58:33",
																					"nodeType": "YulFunctionCall",
																					"src": "2602:58:33"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "2587:6:33",
																				"nodeType": "YulIdentifier",
																				"src": "2587:6:33"
																			},
																			"nativeSrc": "2587:74:33",
																			"nodeType": "YulFunctionCall",
																			"src": "2587:74:33"
																		},
																		"nativeSrc": "2587:74:33",
																		"nodeType": "YulExpressionStatement",
																		"src": "2587:74:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "loopEnd",
																		"nativeSrc": "2480:7:33",
																		"nodeType": "YulIdentifier",
																		"src": "2480:7:33"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "2489:6:33",
																		"nodeType": "YulIdentifier",
																		"src": "2489:6:33"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "2477:2:33",
																	"nodeType": "YulIdentifier",
																	"src": "2477:2:33"
																},
																"nativeSrc": "2477:19:33",
																"nodeType": "YulFunctionCall",
																"src": "2477:19:33"
															},
															"nativeSrc": "2474:201:33",
															"nodeType": "YulIf",
															"src": "2474:201:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "2695:4:33",
																		"nodeType": "YulIdentifier",
																		"src": "2695:4:33"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2709:1:33",
																						"nodeType": "YulLiteral",
																						"src": "2709:1:33",
																						"type": "",
																						"value": "1"
																					},
																					{
																						"name": "newLen",
																						"nativeSrc": "2712:6:33",
																						"nodeType": "YulIdentifier",
																						"src": "2712:6:33"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "2705:3:33",
																					"nodeType": "YulIdentifier",
																					"src": "2705:3:33"
																				},
																				"nativeSrc": "2705:14:33",
																				"nodeType": "YulFunctionCall",
																				"src": "2705:14:33"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2721:1:33",
																				"nodeType": "YulLiteral",
																				"src": "2721:1:33",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2701:3:33",
																			"nodeType": "YulIdentifier",
																			"src": "2701:3:33"
																		},
																		"nativeSrc": "2701:22:33",
																		"nodeType": "YulFunctionCall",
																		"src": "2701:22:33"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "2688:6:33",
																	"nodeType": "YulIdentifier",
																	"src": "2688:6:33"
																},
																"nativeSrc": "2688:36:33",
																"nodeType": "YulFunctionCall",
																"src": "2688:36:33"
															},
															"nativeSrc": "2688:36:33",
															"nodeType": "YulExpressionStatement",
															"src": "2688:36:33"
														}
													]
												},
												"nativeSrc": "2071:663:33",
												"nodeType": "YulCase",
												"src": "2071:663:33",
												"value": {
													"kind": "number",
													"nativeSrc": "2076:1:33",
													"nodeType": "YulLiteral",
													"src": "2076:1:33",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "2751:234:33",
													"nodeType": "YulBlock",
													"src": "2751:234:33",
													"statements": [
														{
															"nativeSrc": "2765:14:33",
															"nodeType": "YulVariableDeclaration",
															"src": "2765:14:33",
															"value": {
																"kind": "number",
																"nativeSrc": "2778:1:33",
																"nodeType": "YulLiteral",
																"src": "2778:1:33",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "2769:5:33",
																	"nodeType": "YulTypedName",
																	"src": "2769:5:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2814:67:33",
																"nodeType": "YulBlock",
																"src": "2814:67:33",
																"statements": [
																	{
																		"nativeSrc": "2832:35:33",
																		"nodeType": "YulAssignment",
																		"src": "2832:35:33",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "2851:3:33",
																							"nodeType": "YulIdentifier",
																							"src": "2851:3:33"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "2856:9:33",
																							"nodeType": "YulIdentifier",
																							"src": "2856:9:33"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2847:3:33",
																						"nodeType": "YulIdentifier",
																						"src": "2847:3:33"
																					},
																					"nativeSrc": "2847:19:33",
																					"nodeType": "YulFunctionCall",
																					"src": "2847:19:33"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2841:5:33",
																				"nodeType": "YulIdentifier",
																				"src": "2841:5:33"
																			},
																			"nativeSrc": "2841:26:33",
																			"nodeType": "YulFunctionCall",
																			"src": "2841:26:33"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "2832:5:33",
																				"nodeType": "YulIdentifier",
																				"src": "2832:5:33"
																			}
																		]
																	}
																]
															},
															"condition": {
																"name": "newLen",
																"nativeSrc": "2795:6:33",
																"nodeType": "YulIdentifier",
																"src": "2795:6:33"
															},
															"nativeSrc": "2792:89:33",
															"nodeType": "YulIf",
															"src": "2792:89:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "2901:4:33",
																		"nodeType": "YulIdentifier",
																		"src": "2901:4:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2960:5:33",
																				"nodeType": "YulIdentifier",
																				"src": "2960:5:33"
																			},
																			{
																				"name": "newLen",
																				"nativeSrc": "2967:6:33",
																				"nodeType": "YulIdentifier",
																				"src": "2967:6:33"
																			}
																		],
																		"functionName": {
																			"name": "extract_used_part_and_set_length_of_short_byte_array",
																			"nativeSrc": "2907:52:33",
																			"nodeType": "YulIdentifier",
																			"src": "2907:52:33"
																		},
																		"nativeSrc": "2907:67:33",
																		"nodeType": "YulFunctionCall",
																		"src": "2907:67:33"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "2894:6:33",
																	"nodeType": "YulIdentifier",
																	"src": "2894:6:33"
																},
																"nativeSrc": "2894:81:33",
																"nodeType": "YulFunctionCall",
																"src": "2894:81:33"
															},
															"nativeSrc": "2894:81:33",
															"nodeType": "YulExpressionStatement",
															"src": "2894:81:33"
														}
													]
												},
												"nativeSrc": "2743:242:33",
												"nodeType": "YulCase",
												"src": "2743:242:33",
												"value": "default"
											}
										],
										"expression": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "2051:6:33",
													"nodeType": "YulIdentifier",
													"src": "2051:6:33"
												},
												{
													"kind": "number",
													"nativeSrc": "2059:2:33",
													"nodeType": "YulLiteral",
													"src": "2059:2:33",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "2048:2:33",
												"nodeType": "YulIdentifier",
												"src": "2048:2:33"
											},
											"nativeSrc": "2048:14:33",
											"nodeType": "YulFunctionCall",
											"src": "2048:14:33"
										},
										"nativeSrc": "2041:944:33",
										"nodeType": "YulSwitch",
										"src": "2041:944:33"
									}
								]
							},
							"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
							"nativeSrc": "1646:1345:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "1727:4:33",
									"nodeType": "YulTypedName",
									"src": "1727:4:33",
									"type": ""
								},
								{
									"name": "src",
									"nativeSrc": "1733:3:33",
									"nodeType": "YulTypedName",
									"src": "1733:3:33",
									"type": ""
								}
							],
							"src": "1646:1345:33"
						},
						{
							"body": {
								"nativeSrc": "3097:102:33",
								"nodeType": "YulBlock",
								"src": "3097:102:33",
								"statements": [
									{
										"nativeSrc": "3107:26:33",
										"nodeType": "YulAssignment",
										"src": "3107:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3119:9:33",
													"nodeType": "YulIdentifier",
													"src": "3119:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "3130:2:33",
													"nodeType": "YulLiteral",
													"src": "3130:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3115:3:33",
												"nodeType": "YulIdentifier",
												"src": "3115:3:33"
											},
											"nativeSrc": "3115:18:33",
											"nodeType": "YulFunctionCall",
											"src": "3115:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "3107:4:33",
												"nodeType": "YulIdentifier",
												"src": "3107:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3149:9:33",
													"nodeType": "YulIdentifier",
													"src": "3149:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "3164:6:33",
															"nodeType": "YulIdentifier",
															"src": "3164:6:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "3180:3:33",
																			"nodeType": "YulLiteral",
																			"src": "3180:3:33",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "3185:1:33",
																			"nodeType": "YulLiteral",
																			"src": "3185:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "3176:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "3176:3:33"
																	},
																	"nativeSrc": "3176:11:33",
																	"nodeType": "YulFunctionCall",
																	"src": "3176:11:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "3189:1:33",
																	"nodeType": "YulLiteral",
																	"src": "3189:1:33",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "3172:3:33",
																"nodeType": "YulIdentifier",
																"src": "3172:3:33"
															},
															"nativeSrc": "3172:19:33",
															"nodeType": "YulFunctionCall",
															"src": "3172:19:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "3160:3:33",
														"nodeType": "YulIdentifier",
														"src": "3160:3:33"
													},
													"nativeSrc": "3160:32:33",
													"nodeType": "YulFunctionCall",
													"src": "3160:32:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3142:6:33",
												"nodeType": "YulIdentifier",
												"src": "3142:6:33"
											},
											"nativeSrc": "3142:51:33",
											"nodeType": "YulFunctionCall",
											"src": "3142:51:33"
										},
										"nativeSrc": "3142:51:33",
										"nodeType": "YulExpressionStatement",
										"src": "3142:51:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "2996:203:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3066:9:33",
									"nodeType": "YulTypedName",
									"src": "3066:9:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "3077:6:33",
									"nodeType": "YulTypedName",
									"src": "3077:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "3088:4:33",
									"nodeType": "YulTypedName",
									"src": "3088:4:33",
									"type": ""
								}
							],
							"src": "2996:203:33"
						},
						{
							"body": {
								"nativeSrc": "3236:95:33",
								"nodeType": "YulBlock",
								"src": "3236:95:33",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "3253:1:33",
													"nodeType": "YulLiteral",
													"src": "3253:1:33",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "3260:3:33",
															"nodeType": "YulLiteral",
															"src": "3260:3:33",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "3265:10:33",
															"nodeType": "YulLiteral",
															"src": "3265:10:33",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "3256:3:33",
														"nodeType": "YulIdentifier",
														"src": "3256:3:33"
													},
													"nativeSrc": "3256:20:33",
													"nodeType": "YulFunctionCall",
													"src": "3256:20:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3246:6:33",
												"nodeType": "YulIdentifier",
												"src": "3246:6:33"
											},
											"nativeSrc": "3246:31:33",
											"nodeType": "YulFunctionCall",
											"src": "3246:31:33"
										},
										"nativeSrc": "3246:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "3246:31:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "3293:1:33",
													"nodeType": "YulLiteral",
													"src": "3293:1:33",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "3296:4:33",
													"nodeType": "YulLiteral",
													"src": "3296:4:33",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3286:6:33",
												"nodeType": "YulIdentifier",
												"src": "3286:6:33"
											},
											"nativeSrc": "3286:15:33",
											"nodeType": "YulFunctionCall",
											"src": "3286:15:33"
										},
										"nativeSrc": "3286:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "3286:15:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "3317:1:33",
													"nodeType": "YulLiteral",
													"src": "3317:1:33",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "3320:4:33",
													"nodeType": "YulLiteral",
													"src": "3320:4:33",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "3310:6:33",
												"nodeType": "YulIdentifier",
												"src": "3310:6:33"
											},
											"nativeSrc": "3310:15:33",
											"nodeType": "YulFunctionCall",
											"src": "3310:15:33"
										},
										"nativeSrc": "3310:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "3310:15:33"
									}
								]
							},
							"name": "panic_error_0x11",
							"nativeSrc": "3204:127:33",
							"nodeType": "YulFunctionDefinition",
							"src": "3204:127:33"
						},
						{
							"body": {
								"nativeSrc": "3400:352:33",
								"nodeType": "YulBlock",
								"src": "3400:352:33",
								"statements": [
									{
										"nativeSrc": "3410:16:33",
										"nodeType": "YulVariableDeclaration",
										"src": "3410:16:33",
										"value": {
											"kind": "number",
											"nativeSrc": "3425:1:33",
											"nodeType": "YulLiteral",
											"src": "3425:1:33",
											"type": "",
											"value": "1"
										},
										"variables": [
											{
												"name": "power_1",
												"nativeSrc": "3414:7:33",
												"nodeType": "YulTypedName",
												"src": "3414:7:33",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3435:10:33",
										"nodeType": "YulAssignment",
										"src": "3435:10:33",
										"value": {
											"kind": "number",
											"nativeSrc": "3444:1:33",
											"nodeType": "YulLiteral",
											"src": "3444:1:33",
											"type": "",
											"value": "1"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "3435:5:33",
												"nodeType": "YulIdentifier",
												"src": "3435:5:33"
											}
										]
									},
									{
										"nativeSrc": "3454:13:33",
										"nodeType": "YulAssignment",
										"src": "3454:13:33",
										"value": {
											"name": "_base",
											"nativeSrc": "3462:5:33",
											"nodeType": "YulIdentifier",
											"src": "3462:5:33"
										},
										"variableNames": [
											{
												"name": "base",
												"nativeSrc": "3454:4:33",
												"nodeType": "YulIdentifier",
												"src": "3454:4:33"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "3518:228:33",
											"nodeType": "YulBlock",
											"src": "3518:228:33",
											"statements": [
												{
													"body": {
														"nativeSrc": "3563:22:33",
														"nodeType": "YulBlock",
														"src": "3563:22:33",
														"statements": [
															{
																"expression": {
																	"arguments": [],
																	"functionName": {
																		"name": "panic_error_0x11",
																		"nativeSrc": "3565:16:33",
																		"nodeType": "YulIdentifier",
																		"src": "3565:16:33"
																	},
																	"nativeSrc": "3565:18:33",
																	"nodeType": "YulFunctionCall",
																	"src": "3565:18:33"
																},
																"nativeSrc": "3565:18:33",
																"nodeType": "YulExpressionStatement",
																"src": "3565:18:33"
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "3538:4:33",
																"nodeType": "YulIdentifier",
																"src": "3538:4:33"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "3552:1:33",
																				"nodeType": "YulLiteral",
																				"src": "3552:1:33",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "3548:3:33",
																			"nodeType": "YulIdentifier",
																			"src": "3548:3:33"
																		},
																		"nativeSrc": "3548:6:33",
																		"nodeType": "YulFunctionCall",
																		"src": "3548:6:33"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "3556:4:33",
																		"nodeType": "YulIdentifier",
																		"src": "3556:4:33"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "3544:3:33",
																	"nodeType": "YulIdentifier",
																	"src": "3544:3:33"
																},
																"nativeSrc": "3544:17:33",
																"nodeType": "YulFunctionCall",
																"src": "3544:17:33"
															}
														],
														"functionName": {
															"name": "gt",
															"nativeSrc": "3535:2:33",
															"nodeType": "YulIdentifier",
															"src": "3535:2:33"
														},
														"nativeSrc": "3535:27:33",
														"nodeType": "YulFunctionCall",
														"src": "3535:27:33"
													},
													"nativeSrc": "3532:53:33",
													"nodeType": "YulIf",
													"src": "3532:53:33"
												},
												{
													"body": {
														"nativeSrc": "3624:29:33",
														"nodeType": "YulBlock",
														"src": "3624:29:33",
														"statements": [
															{
																"nativeSrc": "3626:25:33",
																"nodeType": "YulAssignment",
																"src": "3626:25:33",
																"value": {
																	"arguments": [
																		{
																			"name": "power",
																			"nativeSrc": "3639:5:33",
																			"nodeType": "YulIdentifier",
																			"src": "3639:5:33"
																		},
																		{
																			"name": "base",
																			"nativeSrc": "3646:4:33",
																			"nodeType": "YulIdentifier",
																			"src": "3646:4:33"
																		}
																	],
																	"functionName": {
																		"name": "mul",
																		"nativeSrc": "3635:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "3635:3:33"
																	},
																	"nativeSrc": "3635:16:33",
																	"nodeType": "YulFunctionCall",
																	"src": "3635:16:33"
																},
																"variableNames": [
																	{
																		"name": "power",
																		"nativeSrc": "3626:5:33",
																		"nodeType": "YulIdentifier",
																		"src": "3626:5:33"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "exponent",
																"nativeSrc": "3605:8:33",
																"nodeType": "YulIdentifier",
																"src": "3605:8:33"
															},
															{
																"name": "power_1",
																"nativeSrc": "3615:7:33",
																"nodeType": "YulIdentifier",
																"src": "3615:7:33"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "3601:3:33",
															"nodeType": "YulIdentifier",
															"src": "3601:3:33"
														},
														"nativeSrc": "3601:22:33",
														"nodeType": "YulFunctionCall",
														"src": "3601:22:33"
													},
													"nativeSrc": "3598:55:33",
													"nodeType": "YulIf",
													"src": "3598:55:33"
												},
												{
													"nativeSrc": "3666:23:33",
													"nodeType": "YulAssignment",
													"src": "3666:23:33",
													"value": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "3678:4:33",
																"nodeType": "YulIdentifier",
																"src": "3678:4:33"
															},
															{
																"name": "base",
																"nativeSrc": "3684:4:33",
																"nodeType": "YulIdentifier",
																"src": "3684:4:33"
															}
														],
														"functionName": {
															"name": "mul",
															"nativeSrc": "3674:3:33",
															"nodeType": "YulIdentifier",
															"src": "3674:3:33"
														},
														"nativeSrc": "3674:15:33",
														"nodeType": "YulFunctionCall",
														"src": "3674:15:33"
													},
													"variableNames": [
														{
															"name": "base",
															"nativeSrc": "3666:4:33",
															"nodeType": "YulIdentifier",
															"src": "3666:4:33"
														}
													]
												},
												{
													"nativeSrc": "3702:34:33",
													"nodeType": "YulAssignment",
													"src": "3702:34:33",
													"value": {
														"arguments": [
															{
																"name": "power_1",
																"nativeSrc": "3718:7:33",
																"nodeType": "YulIdentifier",
																"src": "3718:7:33"
															},
															{
																"name": "exponent",
																"nativeSrc": "3727:8:33",
																"nodeType": "YulIdentifier",
																"src": "3727:8:33"
															}
														],
														"functionName": {
															"name": "shr",
															"nativeSrc": "3714:3:33",
															"nodeType": "YulIdentifier",
															"src": "3714:3:33"
														},
														"nativeSrc": "3714:22:33",
														"nodeType": "YulFunctionCall",
														"src": "3714:22:33"
													},
													"variableNames": [
														{
															"name": "exponent",
															"nativeSrc": "3702:8:33",
															"nodeType": "YulIdentifier",
															"src": "3702:8:33"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "exponent",
													"nativeSrc": "3487:8:33",
													"nodeType": "YulIdentifier",
													"src": "3487:8:33"
												},
												{
													"name": "power_1",
													"nativeSrc": "3497:7:33",
													"nodeType": "YulIdentifier",
													"src": "3497:7:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "3484:2:33",
												"nodeType": "YulIdentifier",
												"src": "3484:2:33"
											},
											"nativeSrc": "3484:21:33",
											"nodeType": "YulFunctionCall",
											"src": "3484:21:33"
										},
										"nativeSrc": "3476:270:33",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "3506:3:33",
											"nodeType": "YulBlock",
											"src": "3506:3:33",
											"statements": []
										},
										"pre": {
											"nativeSrc": "3480:3:33",
											"nodeType": "YulBlock",
											"src": "3480:3:33",
											"statements": []
										},
										"src": "3476:270:33"
									}
								]
							},
							"name": "checked_exp_helper",
							"nativeSrc": "3336:416:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "_base",
									"nativeSrc": "3364:5:33",
									"nodeType": "YulTypedName",
									"src": "3364:5:33",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "3371:8:33",
									"nodeType": "YulTypedName",
									"src": "3371:8:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "3384:5:33",
									"nodeType": "YulTypedName",
									"src": "3384:5:33",
									"type": ""
								},
								{
									"name": "base",
									"nativeSrc": "3391:4:33",
									"nodeType": "YulTypedName",
									"src": "3391:4:33",
									"type": ""
								}
							],
							"src": "3336:416:33"
						},
						{
							"body": {
								"nativeSrc": "3816:747:33",
								"nodeType": "YulBlock",
								"src": "3816:747:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "3854:52:33",
											"nodeType": "YulBlock",
											"src": "3854:52:33",
											"statements": [
												{
													"nativeSrc": "3868:10:33",
													"nodeType": "YulAssignment",
													"src": "3868:10:33",
													"value": {
														"kind": "number",
														"nativeSrc": "3877:1:33",
														"nodeType": "YulLiteral",
														"src": "3877:1:33",
														"type": "",
														"value": "1"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "3868:5:33",
															"nodeType": "YulIdentifier",
															"src": "3868:5:33"
														}
													]
												},
												{
													"nativeSrc": "3891:5:33",
													"nodeType": "YulLeave",
													"src": "3891:5:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "exponent",
													"nativeSrc": "3836:8:33",
													"nodeType": "YulIdentifier",
													"src": "3836:8:33"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "3829:6:33",
												"nodeType": "YulIdentifier",
												"src": "3829:6:33"
											},
											"nativeSrc": "3829:16:33",
											"nodeType": "YulFunctionCall",
											"src": "3829:16:33"
										},
										"nativeSrc": "3826:80:33",
										"nodeType": "YulIf",
										"src": "3826:80:33"
									},
									{
										"body": {
											"nativeSrc": "3939:52:33",
											"nodeType": "YulBlock",
											"src": "3939:52:33",
											"statements": [
												{
													"nativeSrc": "3953:10:33",
													"nodeType": "YulAssignment",
													"src": "3953:10:33",
													"value": {
														"kind": "number",
														"nativeSrc": "3962:1:33",
														"nodeType": "YulLiteral",
														"src": "3962:1:33",
														"type": "",
														"value": "0"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "3953:5:33",
															"nodeType": "YulIdentifier",
															"src": "3953:5:33"
														}
													]
												},
												{
													"nativeSrc": "3976:5:33",
													"nodeType": "YulLeave",
													"src": "3976:5:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "3925:4:33",
													"nodeType": "YulIdentifier",
													"src": "3925:4:33"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "3918:6:33",
												"nodeType": "YulIdentifier",
												"src": "3918:6:33"
											},
											"nativeSrc": "3918:12:33",
											"nodeType": "YulFunctionCall",
											"src": "3918:12:33"
										},
										"nativeSrc": "3915:76:33",
										"nodeType": "YulIf",
										"src": "3915:76:33"
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "4027:52:33",
													"nodeType": "YulBlock",
													"src": "4027:52:33",
													"statements": [
														{
															"nativeSrc": "4041:10:33",
															"nodeType": "YulAssignment",
															"src": "4041:10:33",
															"value": {
																"kind": "number",
																"nativeSrc": "4050:1:33",
																"nodeType": "YulLiteral",
																"src": "4050:1:33",
																"type": "",
																"value": "1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "4041:5:33",
																	"nodeType": "YulIdentifier",
																	"src": "4041:5:33"
																}
															]
														},
														{
															"nativeSrc": "4064:5:33",
															"nodeType": "YulLeave",
															"src": "4064:5:33"
														}
													]
												},
												"nativeSrc": "4020:59:33",
												"nodeType": "YulCase",
												"src": "4020:59:33",
												"value": {
													"kind": "number",
													"nativeSrc": "4025:1:33",
													"nodeType": "YulLiteral",
													"src": "4025:1:33",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "4095:123:33",
													"nodeType": "YulBlock",
													"src": "4095:123:33",
													"statements": [
														{
															"body": {
																"nativeSrc": "4130:22:33",
																"nodeType": "YulBlock",
																"src": "4130:22:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "4132:16:33",
																				"nodeType": "YulIdentifier",
																				"src": "4132:16:33"
																			},
																			"nativeSrc": "4132:18:33",
																			"nodeType": "YulFunctionCall",
																			"src": "4132:18:33"
																		},
																		"nativeSrc": "4132:18:33",
																		"nodeType": "YulExpressionStatement",
																		"src": "4132:18:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "4115:8:33",
																		"nodeType": "YulIdentifier",
																		"src": "4115:8:33"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4125:3:33",
																		"nodeType": "YulLiteral",
																		"src": "4125:3:33",
																		"type": "",
																		"value": "255"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "4112:2:33",
																	"nodeType": "YulIdentifier",
																	"src": "4112:2:33"
																},
																"nativeSrc": "4112:17:33",
																"nodeType": "YulFunctionCall",
																"src": "4112:17:33"
															},
															"nativeSrc": "4109:43:33",
															"nodeType": "YulIf",
															"src": "4109:43:33"
														},
														{
															"nativeSrc": "4165:25:33",
															"nodeType": "YulAssignment",
															"src": "4165:25:33",
															"value": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "4178:8:33",
																		"nodeType": "YulIdentifier",
																		"src": "4178:8:33"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4188:1:33",
																		"nodeType": "YulLiteral",
																		"src": "4188:1:33",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "4174:3:33",
																	"nodeType": "YulIdentifier",
																	"src": "4174:3:33"
																},
																"nativeSrc": "4174:16:33",
																"nodeType": "YulFunctionCall",
																"src": "4174:16:33"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "4165:5:33",
																	"nodeType": "YulIdentifier",
																	"src": "4165:5:33"
																}
															]
														},
														{
															"nativeSrc": "4203:5:33",
															"nodeType": "YulLeave",
															"src": "4203:5:33"
														}
													]
												},
												"nativeSrc": "4088:130:33",
												"nodeType": "YulCase",
												"src": "4088:130:33",
												"value": {
													"kind": "number",
													"nativeSrc": "4093:1:33",
													"nodeType": "YulLiteral",
													"src": "4093:1:33",
													"type": "",
													"value": "2"
												}
											}
										],
										"expression": {
											"name": "base",
											"nativeSrc": "4007:4:33",
											"nodeType": "YulIdentifier",
											"src": "4007:4:33"
										},
										"nativeSrc": "4000:218:33",
										"nodeType": "YulSwitch",
										"src": "4000:218:33"
									},
									{
										"body": {
											"nativeSrc": "4316:70:33",
											"nodeType": "YulBlock",
											"src": "4316:70:33",
											"statements": [
												{
													"nativeSrc": "4330:28:33",
													"nodeType": "YulAssignment",
													"src": "4330:28:33",
													"value": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "4343:4:33",
																"nodeType": "YulIdentifier",
																"src": "4343:4:33"
															},
															{
																"name": "exponent",
																"nativeSrc": "4349:8:33",
																"nodeType": "YulIdentifier",
																"src": "4349:8:33"
															}
														],
														"functionName": {
															"name": "exp",
															"nativeSrc": "4339:3:33",
															"nodeType": "YulIdentifier",
															"src": "4339:3:33"
														},
														"nativeSrc": "4339:19:33",
														"nodeType": "YulFunctionCall",
														"src": "4339:19:33"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "4330:5:33",
															"nodeType": "YulIdentifier",
															"src": "4330:5:33"
														}
													]
												},
												{
													"nativeSrc": "4371:5:33",
													"nodeType": "YulLeave",
													"src": "4371:5:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "base",
																	"nativeSrc": "4240:4:33",
																	"nodeType": "YulIdentifier",
																	"src": "4240:4:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "4246:2:33",
																	"nodeType": "YulLiteral",
																	"src": "4246:2:33",
																	"type": "",
																	"value": "11"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "4237:2:33",
																"nodeType": "YulIdentifier",
																"src": "4237:2:33"
															},
															"nativeSrc": "4237:12:33",
															"nodeType": "YulFunctionCall",
															"src": "4237:12:33"
														},
														{
															"arguments": [
																{
																	"name": "exponent",
																	"nativeSrc": "4254:8:33",
																	"nodeType": "YulIdentifier",
																	"src": "4254:8:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "4264:2:33",
																	"nodeType": "YulLiteral",
																	"src": "4264:2:33",
																	"type": "",
																	"value": "78"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "4251:2:33",
																"nodeType": "YulIdentifier",
																"src": "4251:2:33"
															},
															"nativeSrc": "4251:16:33",
															"nodeType": "YulFunctionCall",
															"src": "4251:16:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "4233:3:33",
														"nodeType": "YulIdentifier",
														"src": "4233:3:33"
													},
													"nativeSrc": "4233:35:33",
													"nodeType": "YulFunctionCall",
													"src": "4233:35:33"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "base",
																	"nativeSrc": "4277:4:33",
																	"nodeType": "YulIdentifier",
																	"src": "4277:4:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "4283:3:33",
																	"nodeType": "YulLiteral",
																	"src": "4283:3:33",
																	"type": "",
																	"value": "307"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "4274:2:33",
																"nodeType": "YulIdentifier",
																"src": "4274:2:33"
															},
															"nativeSrc": "4274:13:33",
															"nodeType": "YulFunctionCall",
															"src": "4274:13:33"
														},
														{
															"arguments": [
																{
																	"name": "exponent",
																	"nativeSrc": "4292:8:33",
																	"nodeType": "YulIdentifier",
																	"src": "4292:8:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "4302:2:33",
																	"nodeType": "YulLiteral",
																	"src": "4302:2:33",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "4289:2:33",
																"nodeType": "YulIdentifier",
																"src": "4289:2:33"
															},
															"nativeSrc": "4289:16:33",
															"nodeType": "YulFunctionCall",
															"src": "4289:16:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "4270:3:33",
														"nodeType": "YulIdentifier",
														"src": "4270:3:33"
													},
													"nativeSrc": "4270:36:33",
													"nodeType": "YulFunctionCall",
													"src": "4270:36:33"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "4230:2:33",
												"nodeType": "YulIdentifier",
												"src": "4230:2:33"
											},
											"nativeSrc": "4230:77:33",
											"nodeType": "YulFunctionCall",
											"src": "4230:77:33"
										},
										"nativeSrc": "4227:159:33",
										"nodeType": "YulIf",
										"src": "4227:159:33"
									},
									{
										"nativeSrc": "4395:57:33",
										"nodeType": "YulVariableDeclaration",
										"src": "4395:57:33",
										"value": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "4437:4:33",
													"nodeType": "YulIdentifier",
													"src": "4437:4:33"
												},
												{
													"name": "exponent",
													"nativeSrc": "4443:8:33",
													"nodeType": "YulIdentifier",
													"src": "4443:8:33"
												}
											],
											"functionName": {
												"name": "checked_exp_helper",
												"nativeSrc": "4418:18:33",
												"nodeType": "YulIdentifier",
												"src": "4418:18:33"
											},
											"nativeSrc": "4418:34:33",
											"nodeType": "YulFunctionCall",
											"src": "4418:34:33"
										},
										"variables": [
											{
												"name": "power_1",
												"nativeSrc": "4399:7:33",
												"nodeType": "YulTypedName",
												"src": "4399:7:33",
												"type": ""
											},
											{
												"name": "base_1",
												"nativeSrc": "4408:6:33",
												"nodeType": "YulTypedName",
												"src": "4408:6:33",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "4497:22:33",
											"nodeType": "YulBlock",
											"src": "4497:22:33",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "4499:16:33",
															"nodeType": "YulIdentifier",
															"src": "4499:16:33"
														},
														"nativeSrc": "4499:18:33",
														"nodeType": "YulFunctionCall",
														"src": "4499:18:33"
													},
													"nativeSrc": "4499:18:33",
													"nodeType": "YulExpressionStatement",
													"src": "4499:18:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "power_1",
													"nativeSrc": "4467:7:33",
													"nodeType": "YulIdentifier",
													"src": "4467:7:33"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "4484:1:33",
																	"nodeType": "YulLiteral",
																	"src": "4484:1:33",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "not",
																"nativeSrc": "4480:3:33",
																"nodeType": "YulIdentifier",
																"src": "4480:3:33"
															},
															"nativeSrc": "4480:6:33",
															"nodeType": "YulFunctionCall",
															"src": "4480:6:33"
														},
														{
															"name": "base_1",
															"nativeSrc": "4488:6:33",
															"nodeType": "YulIdentifier",
															"src": "4488:6:33"
														}
													],
													"functionName": {
														"name": "div",
														"nativeSrc": "4476:3:33",
														"nodeType": "YulIdentifier",
														"src": "4476:3:33"
													},
													"nativeSrc": "4476:19:33",
													"nodeType": "YulFunctionCall",
													"src": "4476:19:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "4464:2:33",
												"nodeType": "YulIdentifier",
												"src": "4464:2:33"
											},
											"nativeSrc": "4464:32:33",
											"nodeType": "YulFunctionCall",
											"src": "4464:32:33"
										},
										"nativeSrc": "4461:58:33",
										"nodeType": "YulIf",
										"src": "4461:58:33"
									},
									{
										"nativeSrc": "4528:29:33",
										"nodeType": "YulAssignment",
										"src": "4528:29:33",
										"value": {
											"arguments": [
												{
													"name": "power_1",
													"nativeSrc": "4541:7:33",
													"nodeType": "YulIdentifier",
													"src": "4541:7:33"
												},
												{
													"name": "base_1",
													"nativeSrc": "4550:6:33",
													"nodeType": "YulIdentifier",
													"src": "4550:6:33"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "4537:3:33",
												"nodeType": "YulIdentifier",
												"src": "4537:3:33"
											},
											"nativeSrc": "4537:20:33",
											"nodeType": "YulFunctionCall",
											"src": "4537:20:33"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "4528:5:33",
												"nodeType": "YulIdentifier",
												"src": "4528:5:33"
											}
										]
									}
								]
							},
							"name": "checked_exp_unsigned",
							"nativeSrc": "3757:806:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "base",
									"nativeSrc": "3787:4:33",
									"nodeType": "YulTypedName",
									"src": "3787:4:33",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "3793:8:33",
									"nodeType": "YulTypedName",
									"src": "3793:8:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "3806:5:33",
									"nodeType": "YulTypedName",
									"src": "3806:5:33",
									"type": ""
								}
							],
							"src": "3757:806:33"
						},
						{
							"body": {
								"nativeSrc": "4636:72:33",
								"nodeType": "YulBlock",
								"src": "4636:72:33",
								"statements": [
									{
										"nativeSrc": "4646:56:33",
										"nodeType": "YulAssignment",
										"src": "4646:56:33",
										"value": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "4676:4:33",
													"nodeType": "YulIdentifier",
													"src": "4676:4:33"
												},
												{
													"arguments": [
														{
															"name": "exponent",
															"nativeSrc": "4686:8:33",
															"nodeType": "YulIdentifier",
															"src": "4686:8:33"
														},
														{
															"kind": "number",
															"nativeSrc": "4696:4:33",
															"nodeType": "YulLiteral",
															"src": "4696:4:33",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "4682:3:33",
														"nodeType": "YulIdentifier",
														"src": "4682:3:33"
													},
													"nativeSrc": "4682:19:33",
													"nodeType": "YulFunctionCall",
													"src": "4682:19:33"
												}
											],
											"functionName": {
												"name": "checked_exp_unsigned",
												"nativeSrc": "4655:20:33",
												"nodeType": "YulIdentifier",
												"src": "4655:20:33"
											},
											"nativeSrc": "4655:47:33",
											"nodeType": "YulFunctionCall",
											"src": "4655:47:33"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "4646:5:33",
												"nodeType": "YulIdentifier",
												"src": "4646:5:33"
											}
										]
									}
								]
							},
							"name": "checked_exp_t_uint256_t_uint8",
							"nativeSrc": "4568:140:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "base",
									"nativeSrc": "4607:4:33",
									"nodeType": "YulTypedName",
									"src": "4607:4:33",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "4613:8:33",
									"nodeType": "YulTypedName",
									"src": "4613:8:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "4626:5:33",
									"nodeType": "YulTypedName",
									"src": "4626:5:33",
									"type": ""
								}
							],
							"src": "4568:140:33"
						},
						{
							"body": {
								"nativeSrc": "4765:116:33",
								"nodeType": "YulBlock",
								"src": "4765:116:33",
								"statements": [
									{
										"nativeSrc": "4775:20:33",
										"nodeType": "YulAssignment",
										"src": "4775:20:33",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "4790:1:33",
													"nodeType": "YulIdentifier",
													"src": "4790:1:33"
												},
												{
													"name": "y",
													"nativeSrc": "4793:1:33",
													"nodeType": "YulIdentifier",
													"src": "4793:1:33"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "4786:3:33",
												"nodeType": "YulIdentifier",
												"src": "4786:3:33"
											},
											"nativeSrc": "4786:9:33",
											"nodeType": "YulFunctionCall",
											"src": "4786:9:33"
										},
										"variableNames": [
											{
												"name": "product",
												"nativeSrc": "4775:7:33",
												"nodeType": "YulIdentifier",
												"src": "4775:7:33"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "4853:22:33",
											"nodeType": "YulBlock",
											"src": "4853:22:33",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "4855:16:33",
															"nodeType": "YulIdentifier",
															"src": "4855:16:33"
														},
														"nativeSrc": "4855:18:33",
														"nodeType": "YulFunctionCall",
														"src": "4855:18:33"
													},
													"nativeSrc": "4855:18:33",
													"nodeType": "YulExpressionStatement",
													"src": "4855:18:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "x",
																	"nativeSrc": "4824:1:33",
																	"nodeType": "YulIdentifier",
																	"src": "4824:1:33"
																}
															],
															"functionName": {
																"name": "iszero",
																"nativeSrc": "4817:6:33",
																"nodeType": "YulIdentifier",
																"src": "4817:6:33"
															},
															"nativeSrc": "4817:9:33",
															"nodeType": "YulFunctionCall",
															"src": "4817:9:33"
														},
														{
															"arguments": [
																{
																	"name": "y",
																	"nativeSrc": "4831:1:33",
																	"nodeType": "YulIdentifier",
																	"src": "4831:1:33"
																},
																{
																	"arguments": [
																		{
																			"name": "product",
																			"nativeSrc": "4838:7:33",
																			"nodeType": "YulIdentifier",
																			"src": "4838:7:33"
																		},
																		{
																			"name": "x",
																			"nativeSrc": "4847:1:33",
																			"nodeType": "YulIdentifier",
																			"src": "4847:1:33"
																		}
																	],
																	"functionName": {
																		"name": "div",
																		"nativeSrc": "4834:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "4834:3:33"
																	},
																	"nativeSrc": "4834:15:33",
																	"nodeType": "YulFunctionCall",
																	"src": "4834:15:33"
																}
															],
															"functionName": {
																"name": "eq",
																"nativeSrc": "4828:2:33",
																"nodeType": "YulIdentifier",
																"src": "4828:2:33"
															},
															"nativeSrc": "4828:22:33",
															"nodeType": "YulFunctionCall",
															"src": "4828:22:33"
														}
													],
													"functionName": {
														"name": "or",
														"nativeSrc": "4814:2:33",
														"nodeType": "YulIdentifier",
														"src": "4814:2:33"
													},
													"nativeSrc": "4814:37:33",
													"nodeType": "YulFunctionCall",
													"src": "4814:37:33"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "4807:6:33",
												"nodeType": "YulIdentifier",
												"src": "4807:6:33"
											},
											"nativeSrc": "4807:45:33",
											"nodeType": "YulFunctionCall",
											"src": "4807:45:33"
										},
										"nativeSrc": "4804:71:33",
										"nodeType": "YulIf",
										"src": "4804:71:33"
									}
								]
							},
							"name": "checked_mul_t_uint256",
							"nativeSrc": "4713:168:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "4744:1:33",
									"nodeType": "YulTypedName",
									"src": "4744:1:33",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "4747:1:33",
									"nodeType": "YulTypedName",
									"src": "4747:1:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "product",
									"nativeSrc": "4753:7:33",
									"nodeType": "YulTypedName",
									"src": "4753:7:33",
									"type": ""
								}
							],
							"src": "4713:168:33"
						},
						{
							"body": {
								"nativeSrc": "5099:276:33",
								"nodeType": "YulBlock",
								"src": "5099:276:33",
								"statements": [
									{
										"nativeSrc": "5109:27:33",
										"nodeType": "YulAssignment",
										"src": "5109:27:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5121:9:33",
													"nodeType": "YulIdentifier",
													"src": "5121:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "5132:3:33",
													"nodeType": "YulLiteral",
													"src": "5132:3:33",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5117:3:33",
												"nodeType": "YulIdentifier",
												"src": "5117:3:33"
											},
											"nativeSrc": "5117:19:33",
											"nodeType": "YulFunctionCall",
											"src": "5117:19:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5109:4:33",
												"nodeType": "YulIdentifier",
												"src": "5109:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5152:9:33",
													"nodeType": "YulIdentifier",
													"src": "5152:9:33"
												},
												{
													"name": "value0",
													"nativeSrc": "5163:6:33",
													"nodeType": "YulIdentifier",
													"src": "5163:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5145:6:33",
												"nodeType": "YulIdentifier",
												"src": "5145:6:33"
											},
											"nativeSrc": "5145:25:33",
											"nodeType": "YulFunctionCall",
											"src": "5145:25:33"
										},
										"nativeSrc": "5145:25:33",
										"nodeType": "YulExpressionStatement",
										"src": "5145:25:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5190:9:33",
															"nodeType": "YulIdentifier",
															"src": "5190:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "5201:2:33",
															"nodeType": "YulLiteral",
															"src": "5201:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5186:3:33",
														"nodeType": "YulIdentifier",
														"src": "5186:3:33"
													},
													"nativeSrc": "5186:18:33",
													"nodeType": "YulFunctionCall",
													"src": "5186:18:33"
												},
												{
													"name": "value1",
													"nativeSrc": "5206:6:33",
													"nodeType": "YulIdentifier",
													"src": "5206:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5179:6:33",
												"nodeType": "YulIdentifier",
												"src": "5179:6:33"
											},
											"nativeSrc": "5179:34:33",
											"nodeType": "YulFunctionCall",
											"src": "5179:34:33"
										},
										"nativeSrc": "5179:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "5179:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5233:9:33",
															"nodeType": "YulIdentifier",
															"src": "5233:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "5244:2:33",
															"nodeType": "YulLiteral",
															"src": "5244:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5229:3:33",
														"nodeType": "YulIdentifier",
														"src": "5229:3:33"
													},
													"nativeSrc": "5229:18:33",
													"nodeType": "YulFunctionCall",
													"src": "5229:18:33"
												},
												{
													"name": "value2",
													"nativeSrc": "5249:6:33",
													"nodeType": "YulIdentifier",
													"src": "5249:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5222:6:33",
												"nodeType": "YulIdentifier",
												"src": "5222:6:33"
											},
											"nativeSrc": "5222:34:33",
											"nodeType": "YulFunctionCall",
											"src": "5222:34:33"
										},
										"nativeSrc": "5222:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "5222:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5276:9:33",
															"nodeType": "YulIdentifier",
															"src": "5276:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "5287:2:33",
															"nodeType": "YulLiteral",
															"src": "5287:2:33",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5272:3:33",
														"nodeType": "YulIdentifier",
														"src": "5272:3:33"
													},
													"nativeSrc": "5272:18:33",
													"nodeType": "YulFunctionCall",
													"src": "5272:18:33"
												},
												{
													"name": "value3",
													"nativeSrc": "5292:6:33",
													"nodeType": "YulIdentifier",
													"src": "5292:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5265:6:33",
												"nodeType": "YulIdentifier",
												"src": "5265:6:33"
											},
											"nativeSrc": "5265:34:33",
											"nodeType": "YulFunctionCall",
											"src": "5265:34:33"
										},
										"nativeSrc": "5265:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "5265:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5319:9:33",
															"nodeType": "YulIdentifier",
															"src": "5319:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "5330:3:33",
															"nodeType": "YulLiteral",
															"src": "5330:3:33",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5315:3:33",
														"nodeType": "YulIdentifier",
														"src": "5315:3:33"
													},
													"nativeSrc": "5315:19:33",
													"nodeType": "YulFunctionCall",
													"src": "5315:19:33"
												},
												{
													"arguments": [
														{
															"name": "value4",
															"nativeSrc": "5340:6:33",
															"nodeType": "YulIdentifier",
															"src": "5340:6:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "5356:3:33",
																			"nodeType": "YulLiteral",
																			"src": "5356:3:33",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "5361:1:33",
																			"nodeType": "YulLiteral",
																			"src": "5361:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "5352:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "5352:3:33"
																	},
																	"nativeSrc": "5352:11:33",
																	"nodeType": "YulFunctionCall",
																	"src": "5352:11:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "5365:1:33",
																	"nodeType": "YulLiteral",
																	"src": "5365:1:33",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "5348:3:33",
																"nodeType": "YulIdentifier",
																"src": "5348:3:33"
															},
															"nativeSrc": "5348:19:33",
															"nodeType": "YulFunctionCall",
															"src": "5348:19:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "5336:3:33",
														"nodeType": "YulIdentifier",
														"src": "5336:3:33"
													},
													"nativeSrc": "5336:32:33",
													"nodeType": "YulFunctionCall",
													"src": "5336:32:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5308:6:33",
												"nodeType": "YulIdentifier",
												"src": "5308:6:33"
											},
											"nativeSrc": "5308:61:33",
											"nodeType": "YulFunctionCall",
											"src": "5308:61:33"
										},
										"nativeSrc": "5308:61:33",
										"nodeType": "YulExpressionStatement",
										"src": "5308:61:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
							"nativeSrc": "4886:489:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5036:9:33",
									"nodeType": "YulTypedName",
									"src": "5036:9:33",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "5047:6:33",
									"nodeType": "YulTypedName",
									"src": "5047:6:33",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "5055:6:33",
									"nodeType": "YulTypedName",
									"src": "5055:6:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "5063:6:33",
									"nodeType": "YulTypedName",
									"src": "5063:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "5071:6:33",
									"nodeType": "YulTypedName",
									"src": "5071:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5079:6:33",
									"nodeType": "YulTypedName",
									"src": "5079:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5090:4:33",
									"nodeType": "YulTypedName",
									"src": "5090:4:33",
									"type": ""
								}
							],
							"src": "4886:489:33"
						},
						{
							"body": {
								"nativeSrc": "5501:427:33",
								"nodeType": "YulBlock",
								"src": "5501:427:33",
								"statements": [
									{
										"nativeSrc": "5511:12:33",
										"nodeType": "YulVariableDeclaration",
										"src": "5511:12:33",
										"value": {
											"kind": "number",
											"nativeSrc": "5521:2:33",
											"nodeType": "YulLiteral",
											"src": "5521:2:33",
											"type": "",
											"value": "32"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "5515:2:33",
												"nodeType": "YulTypedName",
												"src": "5515:2:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5539:9:33",
													"nodeType": "YulIdentifier",
													"src": "5539:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "5550:2:33",
													"nodeType": "YulLiteral",
													"src": "5550:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5532:6:33",
												"nodeType": "YulIdentifier",
												"src": "5532:6:33"
											},
											"nativeSrc": "5532:21:33",
											"nodeType": "YulFunctionCall",
											"src": "5532:21:33"
										},
										"nativeSrc": "5532:21:33",
										"nodeType": "YulExpressionStatement",
										"src": "5532:21:33"
									},
									{
										"nativeSrc": "5562:27:33",
										"nodeType": "YulVariableDeclaration",
										"src": "5562:27:33",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "5582:6:33",
													"nodeType": "YulIdentifier",
													"src": "5582:6:33"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "5576:5:33",
												"nodeType": "YulIdentifier",
												"src": "5576:5:33"
											},
											"nativeSrc": "5576:13:33",
											"nodeType": "YulFunctionCall",
											"src": "5576:13:33"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "5566:6:33",
												"nodeType": "YulTypedName",
												"src": "5566:6:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5609:9:33",
															"nodeType": "YulIdentifier",
															"src": "5609:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "5620:2:33",
															"nodeType": "YulLiteral",
															"src": "5620:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5605:3:33",
														"nodeType": "YulIdentifier",
														"src": "5605:3:33"
													},
													"nativeSrc": "5605:18:33",
													"nodeType": "YulFunctionCall",
													"src": "5605:18:33"
												},
												{
													"name": "length",
													"nativeSrc": "5625:6:33",
													"nodeType": "YulIdentifier",
													"src": "5625:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5598:6:33",
												"nodeType": "YulIdentifier",
												"src": "5598:6:33"
											},
											"nativeSrc": "5598:34:33",
											"nodeType": "YulFunctionCall",
											"src": "5598:34:33"
										},
										"nativeSrc": "5598:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "5598:34:33"
									},
									{
										"nativeSrc": "5641:10:33",
										"nodeType": "YulVariableDeclaration",
										"src": "5641:10:33",
										"value": {
											"kind": "number",
											"nativeSrc": "5650:1:33",
											"nodeType": "YulLiteral",
											"src": "5650:1:33",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nativeSrc": "5645:1:33",
												"nodeType": "YulTypedName",
												"src": "5645:1:33",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "5710:90:33",
											"nodeType": "YulBlock",
											"src": "5710:90:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5739:9:33",
																				"nodeType": "YulIdentifier",
																				"src": "5739:9:33"
																			},
																			{
																				"name": "i",
																				"nativeSrc": "5750:1:33",
																				"nodeType": "YulIdentifier",
																				"src": "5750:1:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5735:3:33",
																			"nodeType": "YulIdentifier",
																			"src": "5735:3:33"
																		},
																		"nativeSrc": "5735:17:33",
																		"nodeType": "YulFunctionCall",
																		"src": "5735:17:33"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5754:2:33",
																		"nodeType": "YulLiteral",
																		"src": "5754:2:33",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5731:3:33",
																	"nodeType": "YulIdentifier",
																	"src": "5731:3:33"
																},
																"nativeSrc": "5731:26:33",
																"nodeType": "YulFunctionCall",
																"src": "5731:26:33"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "5773:6:33",
																						"nodeType": "YulIdentifier",
																						"src": "5773:6:33"
																					},
																					{
																						"name": "i",
																						"nativeSrc": "5781:1:33",
																						"nodeType": "YulIdentifier",
																						"src": "5781:1:33"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5769:3:33",
																					"nodeType": "YulIdentifier",
																					"src": "5769:3:33"
																				},
																				"nativeSrc": "5769:14:33",
																				"nodeType": "YulFunctionCall",
																				"src": "5769:14:33"
																			},
																			{
																				"name": "_1",
																				"nativeSrc": "5785:2:33",
																				"nodeType": "YulIdentifier",
																				"src": "5785:2:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5765:3:33",
																			"nodeType": "YulIdentifier",
																			"src": "5765:3:33"
																		},
																		"nativeSrc": "5765:23:33",
																		"nodeType": "YulFunctionCall",
																		"src": "5765:23:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5759:5:33",
																	"nodeType": "YulIdentifier",
																	"src": "5759:5:33"
																},
																"nativeSrc": "5759:30:33",
																"nodeType": "YulFunctionCall",
																"src": "5759:30:33"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "5724:6:33",
															"nodeType": "YulIdentifier",
															"src": "5724:6:33"
														},
														"nativeSrc": "5724:66:33",
														"nodeType": "YulFunctionCall",
														"src": "5724:66:33"
													},
													"nativeSrc": "5724:66:33",
													"nodeType": "YulExpressionStatement",
													"src": "5724:66:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nativeSrc": "5671:1:33",
													"nodeType": "YulIdentifier",
													"src": "5671:1:33"
												},
												{
													"name": "length",
													"nativeSrc": "5674:6:33",
													"nodeType": "YulIdentifier",
													"src": "5674:6:33"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "5668:2:33",
												"nodeType": "YulIdentifier",
												"src": "5668:2:33"
											},
											"nativeSrc": "5668:13:33",
											"nodeType": "YulFunctionCall",
											"src": "5668:13:33"
										},
										"nativeSrc": "5660:140:33",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "5682:19:33",
											"nodeType": "YulBlock",
											"src": "5682:19:33",
											"statements": [
												{
													"nativeSrc": "5684:15:33",
													"nodeType": "YulAssignment",
													"src": "5684:15:33",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nativeSrc": "5693:1:33",
																"nodeType": "YulIdentifier",
																"src": "5693:1:33"
															},
															{
																"name": "_1",
																"nativeSrc": "5696:2:33",
																"nodeType": "YulIdentifier",
																"src": "5696:2:33"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "5689:3:33",
															"nodeType": "YulIdentifier",
															"src": "5689:3:33"
														},
														"nativeSrc": "5689:10:33",
														"nodeType": "YulFunctionCall",
														"src": "5689:10:33"
													},
													"variableNames": [
														{
															"name": "i",
															"nativeSrc": "5684:1:33",
															"nodeType": "YulIdentifier",
															"src": "5684:1:33"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "5664:3:33",
											"nodeType": "YulBlock",
											"src": "5664:3:33",
											"statements": []
										},
										"src": "5660:140:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5824:9:33",
																	"nodeType": "YulIdentifier",
																	"src": "5824:9:33"
																},
																{
																	"name": "length",
																	"nativeSrc": "5835:6:33",
																	"nodeType": "YulIdentifier",
																	"src": "5835:6:33"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5820:3:33",
																"nodeType": "YulIdentifier",
																"src": "5820:3:33"
															},
															"nativeSrc": "5820:22:33",
															"nodeType": "YulFunctionCall",
															"src": "5820:22:33"
														},
														{
															"kind": "number",
															"nativeSrc": "5844:2:33",
															"nodeType": "YulLiteral",
															"src": "5844:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5816:3:33",
														"nodeType": "YulIdentifier",
														"src": "5816:3:33"
													},
													"nativeSrc": "5816:31:33",
													"nodeType": "YulFunctionCall",
													"src": "5816:31:33"
												},
												{
													"kind": "number",
													"nativeSrc": "5849:1:33",
													"nodeType": "YulLiteral",
													"src": "5849:1:33",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5809:6:33",
												"nodeType": "YulIdentifier",
												"src": "5809:6:33"
											},
											"nativeSrc": "5809:42:33",
											"nodeType": "YulFunctionCall",
											"src": "5809:42:33"
										},
										"nativeSrc": "5809:42:33",
										"nodeType": "YulExpressionStatement",
										"src": "5809:42:33"
									},
									{
										"nativeSrc": "5860:62:33",
										"nodeType": "YulAssignment",
										"src": "5860:62:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5876:9:33",
															"nodeType": "YulIdentifier",
															"src": "5876:9:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "length",
																			"nativeSrc": "5895:6:33",
																			"nodeType": "YulIdentifier",
																			"src": "5895:6:33"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "5903:2:33",
																			"nodeType": "YulLiteral",
																			"src": "5903:2:33",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "5891:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "5891:3:33"
																	},
																	"nativeSrc": "5891:15:33",
																	"nodeType": "YulFunctionCall",
																	"src": "5891:15:33"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "5912:2:33",
																			"nodeType": "YulLiteral",
																			"src": "5912:2:33",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "not",
																		"nativeSrc": "5908:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "5908:3:33"
																	},
																	"nativeSrc": "5908:7:33",
																	"nodeType": "YulFunctionCall",
																	"src": "5908:7:33"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "5887:3:33",
																"nodeType": "YulIdentifier",
																"src": "5887:3:33"
															},
															"nativeSrc": "5887:29:33",
															"nodeType": "YulFunctionCall",
															"src": "5887:29:33"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5872:3:33",
														"nodeType": "YulIdentifier",
														"src": "5872:3:33"
													},
													"nativeSrc": "5872:45:33",
													"nodeType": "YulFunctionCall",
													"src": "5872:45:33"
												},
												{
													"kind": "number",
													"nativeSrc": "5919:2:33",
													"nodeType": "YulLiteral",
													"src": "5919:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5868:3:33",
												"nodeType": "YulIdentifier",
												"src": "5868:3:33"
											},
											"nativeSrc": "5868:54:33",
											"nodeType": "YulFunctionCall",
											"src": "5868:54:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5860:4:33",
												"nodeType": "YulIdentifier",
												"src": "5860:4:33"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "5380:548:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5470:9:33",
									"nodeType": "YulTypedName",
									"src": "5470:9:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5481:6:33",
									"nodeType": "YulTypedName",
									"src": "5481:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5492:4:33",
									"nodeType": "YulTypedName",
									"src": "5492:4:33",
									"type": ""
								}
							],
							"src": "5380:548:33"
						},
						{
							"body": {
								"nativeSrc": "6027:203:33",
								"nodeType": "YulBlock",
								"src": "6027:203:33",
								"statements": [
									{
										"nativeSrc": "6037:26:33",
										"nodeType": "YulVariableDeclaration",
										"src": "6037:26:33",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nativeSrc": "6057:5:33",
													"nodeType": "YulIdentifier",
													"src": "6057:5:33"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "6051:5:33",
												"nodeType": "YulIdentifier",
												"src": "6051:5:33"
											},
											"nativeSrc": "6051:12:33",
											"nodeType": "YulFunctionCall",
											"src": "6051:12:33"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "6041:6:33",
												"nodeType": "YulTypedName",
												"src": "6041:6:33",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "6072:32:33",
										"nodeType": "YulAssignment",
										"src": "6072:32:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "array",
															"nativeSrc": "6091:5:33",
															"nodeType": "YulIdentifier",
															"src": "6091:5:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6098:4:33",
															"nodeType": "YulLiteral",
															"src": "6098:4:33",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6087:3:33",
														"nodeType": "YulIdentifier",
														"src": "6087:3:33"
													},
													"nativeSrc": "6087:16:33",
													"nodeType": "YulFunctionCall",
													"src": "6087:16:33"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "6081:5:33",
												"nodeType": "YulIdentifier",
												"src": "6081:5:33"
											},
											"nativeSrc": "6081:23:33",
											"nodeType": "YulFunctionCall",
											"src": "6081:23:33"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "6072:5:33",
												"nodeType": "YulIdentifier",
												"src": "6072:5:33"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "6141:83:33",
											"nodeType": "YulBlock",
											"src": "6141:83:33",
											"statements": [
												{
													"nativeSrc": "6155:59:33",
													"nodeType": "YulAssignment",
													"src": "6155:59:33",
													"value": {
														"arguments": [
															{
																"name": "value",
																"nativeSrc": "6168:5:33",
																"nodeType": "YulIdentifier",
																"src": "6168:5:33"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "6183:1:33",
																				"nodeType": "YulLiteral",
																				"src": "6183:1:33",
																				"type": "",
																				"value": "3"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "6190:4:33",
																						"nodeType": "YulLiteral",
																						"src": "6190:4:33",
																						"type": "",
																						"value": "0x20"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "6196:6:33",
																						"nodeType": "YulIdentifier",
																						"src": "6196:6:33"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6186:3:33",
																					"nodeType": "YulIdentifier",
																					"src": "6186:3:33"
																				},
																				"nativeSrc": "6186:17:33",
																				"nodeType": "YulFunctionCall",
																				"src": "6186:17:33"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "6179:3:33",
																			"nodeType": "YulIdentifier",
																			"src": "6179:3:33"
																		},
																		"nativeSrc": "6179:25:33",
																		"nodeType": "YulFunctionCall",
																		"src": "6179:25:33"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "6210:1:33",
																				"nodeType": "YulLiteral",
																				"src": "6210:1:33",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "6206:3:33",
																			"nodeType": "YulIdentifier",
																			"src": "6206:3:33"
																		},
																		"nativeSrc": "6206:6:33",
																		"nodeType": "YulFunctionCall",
																		"src": "6206:6:33"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "6175:3:33",
																	"nodeType": "YulIdentifier",
																	"src": "6175:3:33"
																},
																"nativeSrc": "6175:38:33",
																"nodeType": "YulFunctionCall",
																"src": "6175:38:33"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "6164:3:33",
															"nodeType": "YulIdentifier",
															"src": "6164:3:33"
														},
														"nativeSrc": "6164:50:33",
														"nodeType": "YulFunctionCall",
														"src": "6164:50:33"
													},
													"variableNames": [
														{
															"name": "value",
															"nativeSrc": "6155:5:33",
															"nodeType": "YulIdentifier",
															"src": "6155:5:33"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "length",
													"nativeSrc": "6119:6:33",
													"nodeType": "YulIdentifier",
													"src": "6119:6:33"
												},
												{
													"kind": "number",
													"nativeSrc": "6127:4:33",
													"nodeType": "YulLiteral",
													"src": "6127:4:33",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "6116:2:33",
												"nodeType": "YulIdentifier",
												"src": "6116:2:33"
											},
											"nativeSrc": "6116:16:33",
											"nodeType": "YulFunctionCall",
											"src": "6116:16:33"
										},
										"nativeSrc": "6113:111:33",
										"nodeType": "YulIf",
										"src": "6113:111:33"
									}
								]
							},
							"name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
							"nativeSrc": "5933:297:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nativeSrc": "6007:5:33",
									"nodeType": "YulTypedName",
									"src": "6007:5:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "6017:5:33",
									"nodeType": "YulTypedName",
									"src": "6017:5:33",
									"type": ""
								}
							],
							"src": "5933:297:33"
						},
						{
							"body": {
								"nativeSrc": "6364:119:33",
								"nodeType": "YulBlock",
								"src": "6364:119:33",
								"statements": [
									{
										"nativeSrc": "6374:26:33",
										"nodeType": "YulAssignment",
										"src": "6374:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6386:9:33",
													"nodeType": "YulIdentifier",
													"src": "6386:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "6397:2:33",
													"nodeType": "YulLiteral",
													"src": "6397:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6382:3:33",
												"nodeType": "YulIdentifier",
												"src": "6382:3:33"
											},
											"nativeSrc": "6382:18:33",
											"nodeType": "YulFunctionCall",
											"src": "6382:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "6374:4:33",
												"nodeType": "YulIdentifier",
												"src": "6374:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6416:9:33",
													"nodeType": "YulIdentifier",
													"src": "6416:9:33"
												},
												{
													"name": "value0",
													"nativeSrc": "6427:6:33",
													"nodeType": "YulIdentifier",
													"src": "6427:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6409:6:33",
												"nodeType": "YulIdentifier",
												"src": "6409:6:33"
											},
											"nativeSrc": "6409:25:33",
											"nodeType": "YulFunctionCall",
											"src": "6409:25:33"
										},
										"nativeSrc": "6409:25:33",
										"nodeType": "YulExpressionStatement",
										"src": "6409:25:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6454:9:33",
															"nodeType": "YulIdentifier",
															"src": "6454:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6465:2:33",
															"nodeType": "YulLiteral",
															"src": "6465:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6450:3:33",
														"nodeType": "YulIdentifier",
														"src": "6450:3:33"
													},
													"nativeSrc": "6450:18:33",
													"nodeType": "YulFunctionCall",
													"src": "6450:18:33"
												},
												{
													"name": "value1",
													"nativeSrc": "6470:6:33",
													"nodeType": "YulIdentifier",
													"src": "6470:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6443:6:33",
												"nodeType": "YulIdentifier",
												"src": "6443:6:33"
											},
											"nativeSrc": "6443:34:33",
											"nodeType": "YulFunctionCall",
											"src": "6443:34:33"
										},
										"nativeSrc": "6443:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "6443:34:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "6235:248:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6325:9:33",
									"nodeType": "YulTypedName",
									"src": "6325:9:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "6336:6:33",
									"nodeType": "YulTypedName",
									"src": "6336:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "6344:6:33",
									"nodeType": "YulTypedName",
									"src": "6344:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "6355:4:33",
									"nodeType": "YulTypedName",
									"src": "6355:4:33",
									"type": ""
								}
							],
							"src": "6235:248:33"
						},
						{
							"body": {
								"nativeSrc": "6536:77:33",
								"nodeType": "YulBlock",
								"src": "6536:77:33",
								"statements": [
									{
										"nativeSrc": "6546:16:33",
										"nodeType": "YulAssignment",
										"src": "6546:16:33",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "6557:1:33",
													"nodeType": "YulIdentifier",
													"src": "6557:1:33"
												},
												{
													"name": "y",
													"nativeSrc": "6560:1:33",
													"nodeType": "YulIdentifier",
													"src": "6560:1:33"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6553:3:33",
												"nodeType": "YulIdentifier",
												"src": "6553:3:33"
											},
											"nativeSrc": "6553:9:33",
											"nodeType": "YulFunctionCall",
											"src": "6553:9:33"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "6546:3:33",
												"nodeType": "YulIdentifier",
												"src": "6546:3:33"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "6585:22:33",
											"nodeType": "YulBlock",
											"src": "6585:22:33",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "6587:16:33",
															"nodeType": "YulIdentifier",
															"src": "6587:16:33"
														},
														"nativeSrc": "6587:18:33",
														"nodeType": "YulFunctionCall",
														"src": "6587:18:33"
													},
													"nativeSrc": "6587:18:33",
													"nodeType": "YulExpressionStatement",
													"src": "6587:18:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "6577:1:33",
													"nodeType": "YulIdentifier",
													"src": "6577:1:33"
												},
												{
													"name": "sum",
													"nativeSrc": "6580:3:33",
													"nodeType": "YulIdentifier",
													"src": "6580:3:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "6574:2:33",
												"nodeType": "YulIdentifier",
												"src": "6574:2:33"
											},
											"nativeSrc": "6574:10:33",
											"nodeType": "YulFunctionCall",
											"src": "6574:10:33"
										},
										"nativeSrc": "6571:36:33",
										"nodeType": "YulIf",
										"src": "6571:36:33"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nativeSrc": "6488:125:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "6519:1:33",
									"nodeType": "YulTypedName",
									"src": "6519:1:33",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "6522:1:33",
									"nodeType": "YulTypedName",
									"src": "6522:1:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "6528:3:33",
									"nodeType": "YulTypedName",
									"src": "6528:3:33",
									"type": ""
								}
							],
							"src": "6488:125:33"
						},
						{
							"body": {
								"nativeSrc": "6775:188:33",
								"nodeType": "YulBlock",
								"src": "6775:188:33",
								"statements": [
									{
										"nativeSrc": "6785:26:33",
										"nodeType": "YulAssignment",
										"src": "6785:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6797:9:33",
													"nodeType": "YulIdentifier",
													"src": "6797:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "6808:2:33",
													"nodeType": "YulLiteral",
													"src": "6808:2:33",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6793:3:33",
												"nodeType": "YulIdentifier",
												"src": "6793:3:33"
											},
											"nativeSrc": "6793:18:33",
											"nodeType": "YulFunctionCall",
											"src": "6793:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "6785:4:33",
												"nodeType": "YulIdentifier",
												"src": "6785:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6827:9:33",
													"nodeType": "YulIdentifier",
													"src": "6827:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "6842:6:33",
															"nodeType": "YulIdentifier",
															"src": "6842:6:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "6858:3:33",
																			"nodeType": "YulLiteral",
																			"src": "6858:3:33",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "6863:1:33",
																			"nodeType": "YulLiteral",
																			"src": "6863:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "6854:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "6854:3:33"
																	},
																	"nativeSrc": "6854:11:33",
																	"nodeType": "YulFunctionCall",
																	"src": "6854:11:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "6867:1:33",
																	"nodeType": "YulLiteral",
																	"src": "6867:1:33",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "6850:3:33",
																"nodeType": "YulIdentifier",
																"src": "6850:3:33"
															},
															"nativeSrc": "6850:19:33",
															"nodeType": "YulFunctionCall",
															"src": "6850:19:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "6838:3:33",
														"nodeType": "YulIdentifier",
														"src": "6838:3:33"
													},
													"nativeSrc": "6838:32:33",
													"nodeType": "YulFunctionCall",
													"src": "6838:32:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6820:6:33",
												"nodeType": "YulIdentifier",
												"src": "6820:6:33"
											},
											"nativeSrc": "6820:51:33",
											"nodeType": "YulFunctionCall",
											"src": "6820:51:33"
										},
										"nativeSrc": "6820:51:33",
										"nodeType": "YulExpressionStatement",
										"src": "6820:51:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6891:9:33",
															"nodeType": "YulIdentifier",
															"src": "6891:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6902:2:33",
															"nodeType": "YulLiteral",
															"src": "6902:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6887:3:33",
														"nodeType": "YulIdentifier",
														"src": "6887:3:33"
													},
													"nativeSrc": "6887:18:33",
													"nodeType": "YulFunctionCall",
													"src": "6887:18:33"
												},
												{
													"name": "value1",
													"nativeSrc": "6907:6:33",
													"nodeType": "YulIdentifier",
													"src": "6907:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6880:6:33",
												"nodeType": "YulIdentifier",
												"src": "6880:6:33"
											},
											"nativeSrc": "6880:34:33",
											"nodeType": "YulFunctionCall",
											"src": "6880:34:33"
										},
										"nativeSrc": "6880:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "6880:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6934:9:33",
															"nodeType": "YulIdentifier",
															"src": "6934:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6945:2:33",
															"nodeType": "YulLiteral",
															"src": "6945:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6930:3:33",
														"nodeType": "YulIdentifier",
														"src": "6930:3:33"
													},
													"nativeSrc": "6930:18:33",
													"nodeType": "YulFunctionCall",
													"src": "6930:18:33"
												},
												{
													"name": "value2",
													"nativeSrc": "6950:6:33",
													"nodeType": "YulIdentifier",
													"src": "6950:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6923:6:33",
												"nodeType": "YulIdentifier",
												"src": "6923:6:33"
											},
											"nativeSrc": "6923:34:33",
											"nodeType": "YulFunctionCall",
											"src": "6923:34:33"
										},
										"nativeSrc": "6923:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "6923:34:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "6618:345:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6728:9:33",
									"nodeType": "YulTypedName",
									"src": "6728:9:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "6739:6:33",
									"nodeType": "YulTypedName",
									"src": "6739:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "6747:6:33",
									"nodeType": "YulTypedName",
									"src": "6747:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "6755:6:33",
									"nodeType": "YulTypedName",
									"src": "6755:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "6766:4:33",
									"nodeType": "YulTypedName",
									"src": "6766:4:33",
									"type": ""
								}
							],
							"src": "6618:345:33"
						},
						{
							"body": {
								"nativeSrc": "7069:76:33",
								"nodeType": "YulBlock",
								"src": "7069:76:33",
								"statements": [
									{
										"nativeSrc": "7079:26:33",
										"nodeType": "YulAssignment",
										"src": "7079:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7091:9:33",
													"nodeType": "YulIdentifier",
													"src": "7091:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "7102:2:33",
													"nodeType": "YulLiteral",
													"src": "7102:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7087:3:33",
												"nodeType": "YulIdentifier",
												"src": "7087:3:33"
											},
											"nativeSrc": "7087:18:33",
											"nodeType": "YulFunctionCall",
											"src": "7087:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "7079:4:33",
												"nodeType": "YulIdentifier",
												"src": "7079:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7121:9:33",
													"nodeType": "YulIdentifier",
													"src": "7121:9:33"
												},
												{
													"name": "value0",
													"nativeSrc": "7132:6:33",
													"nodeType": "YulIdentifier",
													"src": "7132:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7114:6:33",
												"nodeType": "YulIdentifier",
												"src": "7114:6:33"
											},
											"nativeSrc": "7114:25:33",
											"nodeType": "YulFunctionCall",
											"src": "7114:25:33"
										},
										"nativeSrc": "7114:25:33",
										"nodeType": "YulExpressionStatement",
										"src": "7114:25:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nativeSrc": "6968:177:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "7038:9:33",
									"nodeType": "YulTypedName",
									"src": "7038:9:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "7049:6:33",
									"nodeType": "YulTypedName",
									"src": "7049:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "7060:4:33",
									"nodeType": "YulTypedName",
									"src": "7060:4:33",
									"type": ""
								}
							],
							"src": "6968:177:33"
						},
						{
							"body": {
								"nativeSrc": "7198:134:33",
								"nodeType": "YulBlock",
								"src": "7198:134:33",
								"statements": [
									{
										"nativeSrc": "7208:29:33",
										"nodeType": "YulVariableDeclaration",
										"src": "7208:29:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "7226:3:33",
															"nodeType": "YulLiteral",
															"src": "7226:3:33",
															"type": "",
															"value": "208"
														},
														{
															"kind": "number",
															"nativeSrc": "7231:1:33",
															"nodeType": "YulLiteral",
															"src": "7231:1:33",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "7222:3:33",
														"nodeType": "YulIdentifier",
														"src": "7222:3:33"
													},
													"nativeSrc": "7222:11:33",
													"nodeType": "YulFunctionCall",
													"src": "7222:11:33"
												},
												{
													"kind": "number",
													"nativeSrc": "7235:1:33",
													"nodeType": "YulLiteral",
													"src": "7235:1:33",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "7218:3:33",
												"nodeType": "YulIdentifier",
												"src": "7218:3:33"
											},
											"nativeSrc": "7218:19:33",
											"nodeType": "YulFunctionCall",
											"src": "7218:19:33"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "7212:2:33",
												"nodeType": "YulTypedName",
												"src": "7212:2:33",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "7246:34:33",
										"nodeType": "YulAssignment",
										"src": "7246:34:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "x",
															"nativeSrc": "7261:1:33",
															"nodeType": "YulIdentifier",
															"src": "7261:1:33"
														},
														{
															"name": "_1",
															"nativeSrc": "7264:2:33",
															"nodeType": "YulIdentifier",
															"src": "7264:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "7257:3:33",
														"nodeType": "YulIdentifier",
														"src": "7257:3:33"
													},
													"nativeSrc": "7257:10:33",
													"nodeType": "YulFunctionCall",
													"src": "7257:10:33"
												},
												{
													"arguments": [
														{
															"name": "y",
															"nativeSrc": "7273:1:33",
															"nodeType": "YulIdentifier",
															"src": "7273:1:33"
														},
														{
															"name": "_1",
															"nativeSrc": "7276:2:33",
															"nodeType": "YulIdentifier",
															"src": "7276:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "7269:3:33",
														"nodeType": "YulIdentifier",
														"src": "7269:3:33"
													},
													"nativeSrc": "7269:10:33",
													"nodeType": "YulFunctionCall",
													"src": "7269:10:33"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7253:3:33",
												"nodeType": "YulIdentifier",
												"src": "7253:3:33"
											},
											"nativeSrc": "7253:27:33",
											"nodeType": "YulFunctionCall",
											"src": "7253:27:33"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "7246:3:33",
												"nodeType": "YulIdentifier",
												"src": "7246:3:33"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "7304:22:33",
											"nodeType": "YulBlock",
											"src": "7304:22:33",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "7306:16:33",
															"nodeType": "YulIdentifier",
															"src": "7306:16:33"
														},
														"nativeSrc": "7306:18:33",
														"nodeType": "YulFunctionCall",
														"src": "7306:18:33"
													},
													"nativeSrc": "7306:18:33",
													"nodeType": "YulExpressionStatement",
													"src": "7306:18:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "sum",
													"nativeSrc": "7295:3:33",
													"nodeType": "YulIdentifier",
													"src": "7295:3:33"
												},
												{
													"name": "_1",
													"nativeSrc": "7300:2:33",
													"nodeType": "YulIdentifier",
													"src": "7300:2:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "7292:2:33",
												"nodeType": "YulIdentifier",
												"src": "7292:2:33"
											},
											"nativeSrc": "7292:11:33",
											"nodeType": "YulFunctionCall",
											"src": "7292:11:33"
										},
										"nativeSrc": "7289:37:33",
										"nodeType": "YulIf",
										"src": "7289:37:33"
									}
								]
							},
							"name": "checked_add_t_uint208",
							"nativeSrc": "7150:182:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "7181:1:33",
									"nodeType": "YulTypedName",
									"src": "7181:1:33",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "7184:1:33",
									"nodeType": "YulTypedName",
									"src": "7184:1:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "7190:3:33",
									"nodeType": "YulTypedName",
									"src": "7190:3:33",
									"type": ""
								}
							],
							"src": "7150:182:33"
						},
						{
							"body": {
								"nativeSrc": "7474:130:33",
								"nodeType": "YulBlock",
								"src": "7474:130:33",
								"statements": [
									{
										"nativeSrc": "7484:26:33",
										"nodeType": "YulAssignment",
										"src": "7484:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7496:9:33",
													"nodeType": "YulIdentifier",
													"src": "7496:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "7507:2:33",
													"nodeType": "YulLiteral",
													"src": "7507:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7492:3:33",
												"nodeType": "YulIdentifier",
												"src": "7492:3:33"
											},
											"nativeSrc": "7492:18:33",
											"nodeType": "YulFunctionCall",
											"src": "7492:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "7484:4:33",
												"nodeType": "YulIdentifier",
												"src": "7484:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7526:9:33",
													"nodeType": "YulIdentifier",
													"src": "7526:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "7541:6:33",
															"nodeType": "YulIdentifier",
															"src": "7541:6:33"
														},
														{
															"kind": "number",
															"nativeSrc": "7549:4:33",
															"nodeType": "YulLiteral",
															"src": "7549:4:33",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "7537:3:33",
														"nodeType": "YulIdentifier",
														"src": "7537:3:33"
													},
													"nativeSrc": "7537:17:33",
													"nodeType": "YulFunctionCall",
													"src": "7537:17:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7519:6:33",
												"nodeType": "YulIdentifier",
												"src": "7519:6:33"
											},
											"nativeSrc": "7519:36:33",
											"nodeType": "YulFunctionCall",
											"src": "7519:36:33"
										},
										"nativeSrc": "7519:36:33",
										"nodeType": "YulExpressionStatement",
										"src": "7519:36:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7575:9:33",
															"nodeType": "YulIdentifier",
															"src": "7575:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "7586:2:33",
															"nodeType": "YulLiteral",
															"src": "7586:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7571:3:33",
														"nodeType": "YulIdentifier",
														"src": "7571:3:33"
													},
													"nativeSrc": "7571:18:33",
													"nodeType": "YulFunctionCall",
													"src": "7571:18:33"
												},
												{
													"name": "value1",
													"nativeSrc": "7591:6:33",
													"nodeType": "YulIdentifier",
													"src": "7591:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7564:6:33",
												"nodeType": "YulIdentifier",
												"src": "7564:6:33"
											},
											"nativeSrc": "7564:34:33",
											"nodeType": "YulFunctionCall",
											"src": "7564:34:33"
										},
										"nativeSrc": "7564:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "7564:34:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_rational_208_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed",
							"nativeSrc": "7337:267:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "7435:9:33",
									"nodeType": "YulTypedName",
									"src": "7435:9:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "7446:6:33",
									"nodeType": "YulTypedName",
									"src": "7446:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "7454:6:33",
									"nodeType": "YulTypedName",
									"src": "7454:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "7465:4:33",
									"nodeType": "YulTypedName",
									"src": "7465:4:33",
									"type": ""
								}
							],
							"src": "7337:267:33"
						},
						{
							"body": {
								"nativeSrc": "7658:136:33",
								"nodeType": "YulBlock",
								"src": "7658:136:33",
								"statements": [
									{
										"nativeSrc": "7668:29:33",
										"nodeType": "YulVariableDeclaration",
										"src": "7668:29:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "7686:3:33",
															"nodeType": "YulLiteral",
															"src": "7686:3:33",
															"type": "",
															"value": "208"
														},
														{
															"kind": "number",
															"nativeSrc": "7691:1:33",
															"nodeType": "YulLiteral",
															"src": "7691:1:33",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "7682:3:33",
														"nodeType": "YulIdentifier",
														"src": "7682:3:33"
													},
													"nativeSrc": "7682:11:33",
													"nodeType": "YulFunctionCall",
													"src": "7682:11:33"
												},
												{
													"kind": "number",
													"nativeSrc": "7695:1:33",
													"nodeType": "YulLiteral",
													"src": "7695:1:33",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "7678:3:33",
												"nodeType": "YulIdentifier",
												"src": "7678:3:33"
											},
											"nativeSrc": "7678:19:33",
											"nodeType": "YulFunctionCall",
											"src": "7678:19:33"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "7672:2:33",
												"nodeType": "YulTypedName",
												"src": "7672:2:33",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "7706:35:33",
										"nodeType": "YulAssignment",
										"src": "7706:35:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "x",
															"nativeSrc": "7722:1:33",
															"nodeType": "YulIdentifier",
															"src": "7722:1:33"
														},
														{
															"name": "_1",
															"nativeSrc": "7725:2:33",
															"nodeType": "YulIdentifier",
															"src": "7725:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "7718:3:33",
														"nodeType": "YulIdentifier",
														"src": "7718:3:33"
													},
													"nativeSrc": "7718:10:33",
													"nodeType": "YulFunctionCall",
													"src": "7718:10:33"
												},
												{
													"arguments": [
														{
															"name": "y",
															"nativeSrc": "7734:1:33",
															"nodeType": "YulIdentifier",
															"src": "7734:1:33"
														},
														{
															"name": "_1",
															"nativeSrc": "7737:2:33",
															"nodeType": "YulIdentifier",
															"src": "7737:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "7730:3:33",
														"nodeType": "YulIdentifier",
														"src": "7730:3:33"
													},
													"nativeSrc": "7730:10:33",
													"nodeType": "YulFunctionCall",
													"src": "7730:10:33"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "7714:3:33",
												"nodeType": "YulIdentifier",
												"src": "7714:3:33"
											},
											"nativeSrc": "7714:27:33",
											"nodeType": "YulFunctionCall",
											"src": "7714:27:33"
										},
										"variableNames": [
											{
												"name": "diff",
												"nativeSrc": "7706:4:33",
												"nodeType": "YulIdentifier",
												"src": "7706:4:33"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "7766:22:33",
											"nodeType": "YulBlock",
											"src": "7766:22:33",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "7768:16:33",
															"nodeType": "YulIdentifier",
															"src": "7768:16:33"
														},
														"nativeSrc": "7768:18:33",
														"nodeType": "YulFunctionCall",
														"src": "7768:18:33"
													},
													"nativeSrc": "7768:18:33",
													"nodeType": "YulExpressionStatement",
													"src": "7768:18:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "diff",
													"nativeSrc": "7756:4:33",
													"nodeType": "YulIdentifier",
													"src": "7756:4:33"
												},
												{
													"name": "_1",
													"nativeSrc": "7762:2:33",
													"nodeType": "YulIdentifier",
													"src": "7762:2:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "7753:2:33",
												"nodeType": "YulIdentifier",
												"src": "7753:2:33"
											},
											"nativeSrc": "7753:12:33",
											"nodeType": "YulFunctionCall",
											"src": "7753:12:33"
										},
										"nativeSrc": "7750:38:33",
										"nodeType": "YulIf",
										"src": "7750:38:33"
									}
								]
							},
							"name": "checked_sub_t_uint208",
							"nativeSrc": "7609:185:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "7640:1:33",
									"nodeType": "YulTypedName",
									"src": "7640:1:33",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "7643:1:33",
									"nodeType": "YulTypedName",
									"src": "7643:1:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "diff",
									"nativeSrc": "7649:4:33",
									"nodeType": "YulTypedName",
									"src": "7649:4:33",
									"type": ""
								}
							],
							"src": "7609:185:33"
						},
						{
							"body": {
								"nativeSrc": "7848:79:33",
								"nodeType": "YulBlock",
								"src": "7848:79:33",
								"statements": [
									{
										"nativeSrc": "7858:17:33",
										"nodeType": "YulAssignment",
										"src": "7858:17:33",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "7870:1:33",
													"nodeType": "YulIdentifier",
													"src": "7870:1:33"
												},
												{
													"name": "y",
													"nativeSrc": "7873:1:33",
													"nodeType": "YulIdentifier",
													"src": "7873:1:33"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "7866:3:33",
												"nodeType": "YulIdentifier",
												"src": "7866:3:33"
											},
											"nativeSrc": "7866:9:33",
											"nodeType": "YulFunctionCall",
											"src": "7866:9:33"
										},
										"variableNames": [
											{
												"name": "diff",
												"nativeSrc": "7858:4:33",
												"nodeType": "YulIdentifier",
												"src": "7858:4:33"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "7899:22:33",
											"nodeType": "YulBlock",
											"src": "7899:22:33",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "7901:16:33",
															"nodeType": "YulIdentifier",
															"src": "7901:16:33"
														},
														"nativeSrc": "7901:18:33",
														"nodeType": "YulFunctionCall",
														"src": "7901:18:33"
													},
													"nativeSrc": "7901:18:33",
													"nodeType": "YulExpressionStatement",
													"src": "7901:18:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "diff",
													"nativeSrc": "7890:4:33",
													"nodeType": "YulIdentifier",
													"src": "7890:4:33"
												},
												{
													"name": "x",
													"nativeSrc": "7896:1:33",
													"nodeType": "YulIdentifier",
													"src": "7896:1:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "7887:2:33",
												"nodeType": "YulIdentifier",
												"src": "7887:2:33"
											},
											"nativeSrc": "7887:11:33",
											"nodeType": "YulFunctionCall",
											"src": "7887:11:33"
										},
										"nativeSrc": "7884:37:33",
										"nodeType": "YulIf",
										"src": "7884:37:33"
									}
								]
							},
							"name": "checked_sub_t_uint256",
							"nativeSrc": "7799:128:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "7830:1:33",
									"nodeType": "YulTypedName",
									"src": "7830:1:33",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "7833:1:33",
									"nodeType": "YulTypedName",
									"src": "7833:1:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "diff",
									"nativeSrc": "7839:4:33",
									"nodeType": "YulTypedName",
									"src": "7839:4:33",
									"type": ""
								}
							],
							"src": "7799:128:33"
						},
						{
							"body": {
								"nativeSrc": "8068:130:33",
								"nodeType": "YulBlock",
								"src": "8068:130:33",
								"statements": [
									{
										"nativeSrc": "8078:26:33",
										"nodeType": "YulAssignment",
										"src": "8078:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "8090:9:33",
													"nodeType": "YulIdentifier",
													"src": "8090:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "8101:2:33",
													"nodeType": "YulLiteral",
													"src": "8101:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "8086:3:33",
												"nodeType": "YulIdentifier",
												"src": "8086:3:33"
											},
											"nativeSrc": "8086:18:33",
											"nodeType": "YulFunctionCall",
											"src": "8086:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "8078:4:33",
												"nodeType": "YulIdentifier",
												"src": "8078:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "8120:9:33",
													"nodeType": "YulIdentifier",
													"src": "8120:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "8135:6:33",
															"nodeType": "YulIdentifier",
															"src": "8135:6:33"
														},
														{
															"kind": "number",
															"nativeSrc": "8143:4:33",
															"nodeType": "YulLiteral",
															"src": "8143:4:33",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "8131:3:33",
														"nodeType": "YulIdentifier",
														"src": "8131:3:33"
													},
													"nativeSrc": "8131:17:33",
													"nodeType": "YulFunctionCall",
													"src": "8131:17:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8113:6:33",
												"nodeType": "YulIdentifier",
												"src": "8113:6:33"
											},
											"nativeSrc": "8113:36:33",
											"nodeType": "YulFunctionCall",
											"src": "8113:36:33"
										},
										"nativeSrc": "8113:36:33",
										"nodeType": "YulExpressionStatement",
										"src": "8113:36:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8169:9:33",
															"nodeType": "YulIdentifier",
															"src": "8169:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "8180:2:33",
															"nodeType": "YulLiteral",
															"src": "8180:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8165:3:33",
														"nodeType": "YulIdentifier",
														"src": "8165:3:33"
													},
													"nativeSrc": "8165:18:33",
													"nodeType": "YulFunctionCall",
													"src": "8165:18:33"
												},
												{
													"name": "value1",
													"nativeSrc": "8185:6:33",
													"nodeType": "YulIdentifier",
													"src": "8185:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8158:6:33",
												"nodeType": "YulIdentifier",
												"src": "8158:6:33"
											},
											"nativeSrc": "8158:34:33",
											"nodeType": "YulFunctionCall",
											"src": "8158:34:33"
										},
										"nativeSrc": "8158:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "8158:34:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed",
							"nativeSrc": "7932:266:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "8029:9:33",
									"nodeType": "YulTypedName",
									"src": "8029:9:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "8040:6:33",
									"nodeType": "YulTypedName",
									"src": "8040:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "8048:6:33",
									"nodeType": "YulTypedName",
									"src": "8048:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "8059:4:33",
									"nodeType": "YulTypedName",
									"src": "8059:4:33",
									"type": ""
								}
							],
							"src": "7932:266:33"
						}
					]
				},
				"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := 1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_add_t_uint208(x, y) -> sum\n    {\n        let _1 := sub(shl(208, 1), 1)\n        sum := add(and(x, _1), and(y, _1))\n        if gt(sum, _1) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_rational_208_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_sub_t_uint208(x, y) -> diff\n    {\n        let _1 := sub(shl(208, 1), 1)\n        diff := sub(and(x, _1), and(y, _1))\n        if gt(diff, _1) { panic_error_0x11() }\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n}",
				"id": 33,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {},
		"object": "61016060405234801562000011575f80fd5b506040516200324e3803806200324e8339810160408190526200003491620009bf565b6040518060400160405280600981526020016853756d6153616d6d7360b81b81525080604051806040016040528060018152602001603160f81b815250836040518060400160405280600981526020016853756d6153616d6d7360b81b815250604051806040016040528060048152602001635353415360e01b8152508160039081620000c2919062000a84565b506004620000d1828262000a84565b50506005805460ff19169055506001600160a01b0381166200010d57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6200011881620001fb565b506200012682600662000254565b610120526200013781600762000254565b61014052815160208084019190912060e052815190820120610100524660a052620001c460e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c05250620001f433620001e16012600a62000c5d565b620001ee90600162000c6d565b6200028c565b5062000d72565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f60208351101562000273576200026b83620002c8565b905062000286565b8162000280848262000a84565b5060ff90505b92915050565b6001600160a01b038216620002b75760405163ec442f0560e01b81525f600482015260240162000104565b620002c45f83836200030a565b5050565b5f80829050601f81511115620002f5578260405163305a27a960e01b815260040162000104919062000c87565b8051620003028262000cd5565b179392505050565b620003178383836200031c565b505050565b620003298383836200038a565b6001600160a01b0383166200037d575f6200034360025490565b90506001600160d01b03808211156200037a57604051630e58ae9360e11b8152600481018390526024810182905260440162000104565b50505b62000317838383620003a1565b6200039462000438565b620003178383836200045f565b6001600160a01b038316620003d657620003d3600b62000cb26200058e60201b17620003cd84620005a2565b620005db565b50505b6001600160a01b038216620004055762000402600b62000cbd6200061760201b17620003cd84620005a2565b50505b6001600160a01b038381165f90815260096020526040808220548584168352912054620003179291821691168362000624565b60055460ff16156200045d5760405163d93c066560e01b815260040160405180910390fd5b565b6001600160a01b0383166200048d578060025f82825462000481919062000cf9565b90915550620004ff9050565b6001600160a01b0383165f9081526020819052604090205481811015620004e15760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640162000104565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166200051d576002805482900390556200053b565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200058191815260200190565b60405180910390a3505050565b5f6200059b828462000d0f565b9392505050565b5f6001600160d01b03821115620005d7576040516306dfcc6560e41b815260d060048201526024810183905260440162000104565b5090565b5f806200060a620005eb62000786565b62000601620005fa8862000796565b868860201c565b879190620007e2565b915091505b935093915050565b5f6200059b828462000d39565b816001600160a01b0316836001600160a01b0316141580156200064657505f81115b1562000317576001600160a01b03831615620006e7576001600160a01b0383165f908152600a602090815260408220829162000693919062000617901b62000cbd17620003cd86620005a2565b6001600160d01b031691506001600160d01b03169150846001600160a01b03165f805160206200322e8339815191528383604051620006dc929190918252602082015260400190565b60405180910390a250505b6001600160a01b0382161562000317576001600160a01b0382165f908152600a60209081526040822082916200072e91906200058e901b62000cb217620003cd86620005a2565b6001600160d01b031691506001600160d01b03169150836001600160a01b03165f805160206200322e833981519152838360405162000777929190918252602082015260400190565b60405180910390a25050505050565b5f62000791620007f1565b905090565b80545f908015620007da57620007c083620007b360018462000d5c565b5f91825260209091200190565b54660100000000000090046001600160d01b03166200059b565b5f9392505050565b5f806200060a858585620007fd565b5f62000791436200098b565b82545f90819080156200092d575f6200081d87620007b360018562000d5c565b60408051808201909152905465ffffffffffff80821680845266010000000000009092046001600160d01b0316602084015291925090871610156200087557604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff808816911603620008c957846200089c88620007b360018662000d5c565b80546001600160d01b039290921666010000000000000265ffffffffffff9092169190911790556200091c565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d555f8d815291909120945191519092166601000000000000029216919091179101555b6020015192508391506200060f9050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a81529182209551925190931666010000000000000291909316179201919091559050816200060f565b5f65ffffffffffff821115620005d7576040516306dfcc6560e41b8152603060048201526024810183905260440162000104565b5f60208284031215620009d0575f80fd5b81516001600160a01b03811681146200059b575f80fd5b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168062000a1057607f821691505b60208210810362000a2f57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200031757805f5260205f20601f840160051c8101602085101562000a5c5750805b601f840160051c820191505b8181101562000a7d575f815560010162000a68565b5050505050565b81516001600160401b0381111562000aa05762000aa0620009e7565b62000ab88162000ab18454620009fb565b8462000a35565b602080601f83116001811462000aee575f841562000ad65750858301515b5f19600386901b1c1916600185901b17855562000b48565b5f85815260208120601f198616915b8281101562000b1e5788860151825594840194600190910190840162000afd565b508582101562000b3c57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111562000ba457815f190482111562000b885762000b8862000b50565b8085161562000b9657918102915b93841c939080029062000b69565b509250929050565b5f8262000bbc5750600162000286565b8162000bca57505f62000286565b816001811462000be3576002811462000bee5762000c0e565b600191505062000286565b60ff84111562000c025762000c0262000b50565b50506001821b62000286565b5060208310610133831016604e8410600b841016171562000c33575081810a62000286565b62000c3f838362000b64565b805f190482111562000c555762000c5562000b50565b029392505050565b5f6200059b60ff84168362000bac565b808202811582820484141762000286576200028662000b50565b5f602080835283518060208501525f5b8181101562000cb55785810183015185820160400152820162000c97565b505f604082860101526040601f19601f8301168501019250505092915050565b8051602080830151919081101562000a2f575f1960209190910360031b1b16919050565b8082018082111562000286576200028662000b50565b6001600160d01b0381811683821601908082111562000d325762000d3262000b50565b5092915050565b6001600160d01b0382811682821603908082111562000d325762000d3262000b50565b8181038181111562000286576200028662000b50565b60805160a05160c05160e05161010051610120516101405161246a62000dc45f395f61123101525f61120401525f610e8b01525f610e6301525f610dbe01525f610de801525f610e12015261246a5ff3fe608060405234801561000f575f80fd5b5060043610610208575f3560e01c806370a082311161011f57806395d89b41116100a9578063d505accf11610079578063d505accf14610485578063d9d98ce414610498578063dd62ed3e146104ab578063f1127ed8146104e3578063f2fde38b14610522575f80fd5b806395d89b41146104445780639ab24eb01461044c578063a9059cbb1461045f578063c3cda52014610472575f80fd5b80638456cb59116100ef5780638456cb59146103d957806384b0196e146103e15780638da5cb5b146103fc5780638e539e8c1461041257806391ddadf414610425575f80fd5b806370a0823114610383578063715018a6146103ab57806379cc6790146103b35780637ecebe00146103c6575f80fd5b806340c10f19116101a05780635c19a95c116101705780635c19a95c146103175780635c975abb1461032a5780635cffe9de14610335578063613255ab146103485780636fcfff451461035b575f80fd5b806340c10f19146102a657806342966c68146102b95780634bf5d7e9146102cc578063587cde1e146102d4575f80fd5b8063313ce567116101db578063313ce567146102725780633644e515146102815780633a46b1a8146102895780633f4ba83a1461029c575f80fd5b806306fdde031461020c578063095ea7b31461022a57806318160ddd1461024d57806323b872dd1461025f575b5f80fd5b610214610535565b6040516102219190611f82565b60405180910390f35b61023d610238366004611fa8565b6105c5565b6040519015158152602001610221565b6002545b604051908152602001610221565b61023d61026d366004611fd2565b6105de565b60405160128152602001610221565b610251610601565b610251610297366004611fa8565b61060f565b6102a4610693565b005b6102a46102b4366004611fa8565b6106a5565b6102a46102c7366004612010565b6106bb565b6102146106c8565b6102ff6102e2366004612027565b6001600160a01b039081165f908152600960205260409020541690565b6040516001600160a01b039091168152602001610221565b6102a4610325366004612027565b610740565b60055460ff1661023d565b61023d610343366004612042565b61074b565b610251610356366004612027565b6108bd565b61036e610369366004612027565b6108e2565b60405163ffffffff9091168152602001610221565b610251610391366004612027565b6001600160a01b03165f9081526020819052604090205490565b6102a46108ec565b6102a46103c1366004611fa8565b6108fd565b6102516103d4366004612027565b610912565b6102a461091c565b6103e961092c565b60405161022197969594939291906120d9565b60055461010090046001600160a01b03166102ff565b610251610420366004612010565b61096e565b61042d6109d7565b60405165ffffffffffff9091168152602001610221565b6102146109e0565b61025161045a366004612027565b6109ef565b61023d61046d366004611fa8565b610a1e565b6102a4610480366004612185565b610a2b565b6102a46104933660046121db565b610ae7565b6102516104a6366004611fa8565b610c1d565b6102516104b9366004612244565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6104f66104f136600461227b565b610c5b565b60408051825165ffffffffffff1681526020928301516001600160d01b03169281019290925201610221565b6102a4610530366004612027565b610c78565b606060038054610544906122af565b80601f0160208091040260200160405190810160405280929190818152602001828054610570906122af565b80156105bb5780601f10610592576101008083540402835291602001916105bb565b820191905f5260205f20905b81548152906001019060200180831161059e57829003601f168201915b5050505050905090565b5f336105d2818585610cc8565b60019150505b92915050565b5f336105eb858285610cda565b6105f6858585610d55565b506001949350505050565b5f61060a610db2565b905090565b5f806106196109d7565b90508065ffffffffffff16831061065957604051637669fc0f60e11b81526004810184905265ffffffffffff821660248201526044015b60405180910390fd5b61068261066584610edb565b6001600160a01b0386165f908152600a6020526040902090610f11565b6001600160d01b0316949350505050565b61069b610fc1565b6106a3610ff4565b565b6106ad610fc1565b6106b78282611046565b5050565b6106c5338261107a565b50565b60606106d26110ae565b65ffffffffffff166106e26109d7565b65ffffffffffff1614610708576040516301bfc1c560e61b815260040160405180910390fd5b5060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b336106b781836110b8565b5f80610756866108bd565b90508085111561077c5760405163fd9a760960e01b815260048101829052602401610650565b5f6107878787610c1d565b90506107938887611046565b6040516323e30c8b60e01b81527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038a16906323e30c8b906107eb9033908c908c9088908d908d906004016122e7565b6020604051808303815f875af1158015610807573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061082b9190612341565b146108535760405162678c5b60e81b81526001600160a01b0389166004820152602401610650565b5f6108688930610863858b61236c565b610cda565b81158061087c57506001600160a01b038116155b15610899576108948961088f848a61236c565b61107a565b6108ae565b6108a3898861107a565b6108ae898284610d55565b50600198975050505050505050565b5f6001600160a01b03821630146108d4575f6105d8565b6002546105d8905f1961237f565b5f6105d882611129565b6108f4610fc1565b6106a35f61114a565b610908823383610cda565b6106b7828261107a565b5f6105d8826111a3565b610924610fc1565b6106a36111c0565b5f6060805f805f606061093d6111fd565b61094561122a565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b5f806109786109d7565b90508065ffffffffffff1683106109b357604051637669fc0f60e11b81526004810184905265ffffffffffff82166024820152604401610650565b6109c76109bf84610edb565b600b90610f11565b6001600160d01b03169392505050565b5f61060a6110ae565b606060048054610544906122af565b6001600160a01b0381165f908152600a60205260408120610a0f90611257565b6001600160d01b031692915050565b5f336105d2818585610d55565b83421115610a4f57604051632341d78760e11b815260048101859052602401610650565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590525f90610ac890610ac09060a00160405160208183030381529060405280519060200120611286565b8585856112b2565b9050610ad481876112de565b610ade81886110b8565b50505050505050565b83421115610b0b5760405163313c898160e11b815260048101859052602401610650565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b568c6001600160a01b03165f90815260086020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f610bb082611286565b90505f610bbf828787876112b2565b9050896001600160a01b0316816001600160a01b031614610c06576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610650565b610c118a8a8a610cc8565b50505050505050505050565b5f6001600160a01b0383163014610c5257604051635ad3edc960e11b81526001600160a01b0384166004820152602401610650565b5f5b9392505050565b604080518082019091525f8082526020820152610c548383611330565b610c80610fc1565b6001600160a01b038116610ca957604051631e4fbdf760e01b81525f6004820152602401610650565b6106c58161114a565b5f610c548284612392565b5f610c5482846123b9565b610cd58383836001611364565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198114610d4f5781811015610d4157604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610650565b610d4f84848484035f611364565b50505050565b6001600160a01b038316610d7e57604051634b637e8f60e11b81525f6004820152602401610650565b6001600160a01b038216610da75760405163ec442f0560e01b81525f6004820152602401610650565b610cd5838383611436565b5f306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610e0a57507f000000000000000000000000000000000000000000000000000000000000000046145b15610e3457507f000000000000000000000000000000000000000000000000000000000000000090565b61060a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b5f65ffffffffffff821115610f0d576040516306dfcc6560e41b81526030600482015260248101839052604401610650565b5090565b81545f9081816005811115610f6d575f610f2a84611441565b610f34908561237f565b5f8881526020902090915081015465ffffffffffff9081169087161015610f5d57809150610f6b565b610f6881600161236c565b92505b505b5f610f7a87878585611525565b90508015610fb457610f9e87610f9160018461237f565b5f91825260209091200190565b54600160301b90046001600160d01b0316610fb6565b5f5b979650505050505050565b6005546001600160a01b036101009091041633146106a35760405163118cdaa760e01b8152336004820152602401610650565b610ffc611584565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03821661106f5760405163ec442f0560e01b81525f6004820152602401610650565b6106b75f8383611436565b6001600160a01b0382166110a357604051634b637e8f60e11b81525f6004820152602401610650565b6106b7825f83611436565b5f61060a43610edb565b6001600160a01b038281165f8181526009602052604080822080548686166001600160a01b0319821681179092559151919094169392849290917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610cd58183611124866115a7565b6115c4565b6001600160a01b0381165f908152600a60205260408120546105d89061172d565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0381165f908152600860205260408120546105d8565b6111c861175d565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110293390565b606061060a7f00000000000000000000000000000000000000000000000000000000000000006006611781565b606061060a7f00000000000000000000000000000000000000000000000000000000000000006007611781565b80545f908015610c525761127083610f9160018461237f565b54600160301b90046001600160d01b0316610c54565b5f6105d8611292610db2565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f806112c28888888861182a565b9250925092506112d282826118f2565b50909695505050505050565b6001600160a01b0382165f908152600860205260409020805460018101909155818114610cd5576040516301d4b62360e61b81526001600160a01b038416600482015260248101829052604401610650565b604080518082019091525f80825260208201526001600160a01b0383165f908152600a60205260409020610c5490836119aa565b6001600160a01b03841661138d5760405163e602df0560e01b81525f6004820152602401610650565b6001600160a01b0383166113b657604051634a1406b160e11b81525f6004820152602401610650565b6001600160a01b038085165f9081526001602090815260408083209387168352929052208290558015610d4f57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161142891815260200190565b60405180910390a350505050565b610cd5838383611a17565b5f815f0361145057505f919050565b5f600161145c84611a7d565b901c6001901b90506001818481611475576114756123d9565b048201901c9050600181848161148d5761148d6123d9565b048201901c905060018184816114a5576114a56123d9565b048201901c905060018184816114bd576114bd6123d9565b048201901c905060018184816114d5576114d56123d9565b048201901c905060018184816114ed576114ed6123d9565b048201901c90506001818481611505576115056123d9565b048201901c9050610c548182858161151f5761151f6123d9565b04611b10565b5f5b8183101561157c575f61153a8484611b25565b5f8781526020902090915065ffffffffffff86169082015465ffffffffffff16111561156857809250611576565b61157381600161236c565b93505b50611527565b509392505050565b60055460ff166106a357604051638dfc202b60e01b815260040160405180910390fd5b6001600160a01b0381165f908152602081905260408120546105d8565b816001600160a01b0316836001600160a01b0316141580156115e557505f81115b15610cd5576001600160a01b0383161561168c576001600160a01b0383165f908152600a60205260408120819061162790610cbd61162286611b3f565b611b72565b6001600160d01b031691506001600160d01b03169150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611681929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610cd5576001600160a01b0382165f908152600a6020526040812081906116c490610cb261162286611b3f565b6001600160d01b031691506001600160d01b03169150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405161171e929190918252602082015260400190565b60405180910390a25050505050565b5f63ffffffff821115610f0d576040516306dfcc6560e41b81526020600482015260248101839052604401610650565b60055460ff16156106a35760405163d93c066560e01b815260040160405180910390fd5b606060ff831461179b5761179483611baa565b90506105d8565b8180546117a7906122af565b80601f01602080910402602001604051908101604052809291908181526020018280546117d3906122af565b801561181e5780601f106117f55761010080835404028352916020019161181e565b820191905f5260205f20905b81548152906001019060200180831161180157829003601f168201915b505050505090506105d8565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561186357505f915060039050826118e8565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156118b4573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b0381166118df57505f9250600191508290506118e8565b92505f91508190505b9450945094915050565b5f826003811115611905576119056123ed565b0361190e575050565b6001826003811115611922576119226123ed565b036119405760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611954576119546123ed565b036119755760405163fce698f760e01b815260048101829052602401610650565b6003826003811115611989576119896123ed565b036106b7576040516335e2f38360e21b815260048101829052602401610650565b604080518082019091525f8082526020820152825f018263ffffffff16815481106119d7576119d7612401565b5f9182526020918290206040805180820190915291015465ffffffffffff81168252600160301b90046001600160d01b0316918101919091529392505050565b611a22838383611be7565b6001600160a01b038316611a72575f611a3a60025490565b90506001600160d01b0380821115611a6f57604051630e58ae9360e11b81526004810183905260248101829052604401610650565b50505b610cd5838383611bfa565b5f80608083901c15611a9157608092831c92015b604083901c15611aa357604092831c92015b602083901c15611ab557602092831c92015b601083901c15611ac757601092831c92015b600883901c15611ad957600892831c92015b600483901c15611aeb57600492831c92015b600283901c15611afd57600292831c92015b600183901c156105d85760010192915050565b5f818310611b1e5781610c54565b5090919050565b5f611b336002848418612415565b610c549084841661236c565b5f6001600160d01b03821115610f0d576040516306dfcc6560e41b815260d0600482015260248101839052604401610650565b5f80611b9d611b7f6109d7565b611b95611b8b88611257565b868863ffffffff16565b879190611c6f565b915091505b935093915050565b60605f611bb683611c7c565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b611bef61175d565b610cd5838383611ca3565b6001600160a01b038316611c1c57611c19600b610cb261162284611b3f565b50505b6001600160a01b038216611c3e57611c3b600b610cbd61162284611b3f565b50505b6001600160a01b038381165f90815260096020526040808220548584168352912054610cd5929182169116836115c4565b5f80611b9d858585611dc9565b5f60ff8216601f8111156105d857604051632cd44ac360e21b815260040160405180910390fd5b6001600160a01b038316611ccd578060025f828254611cc2919061236c565b90915550611d3d9050565b6001600160a01b0383165f9081526020819052604090205481811015611d1f5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610650565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216611d5957600280548290039055611d77565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611dbc91815260200190565b60405180910390a3505050565b82545f9081908015611ee5575f611de587610f9160018561237f565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b031660208401529192509087161015611e3957604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff808816911603611e855784611e5c88610f9160018661237f565b80546001600160d01b0392909216600160301b0265ffffffffffff909216919091179055611ed5565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d555f8d81529190912094519151909216600160301b029216919091179101555b602001519250839150611ba29050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a815291822095519251909316600160301b029190931617920191909155905081611ba2565b5f81518084525f5b81811015611f6357602081850181015186830182015201611f47565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610c546020830184611f3f565b6001600160a01b03811681146106c5575f80fd5b5f8060408385031215611fb9575f80fd5b8235611fc481611f94565b946020939093013593505050565b5f805f60608486031215611fe4575f80fd5b8335611fef81611f94565b92506020840135611fff81611f94565b929592945050506040919091013590565b5f60208284031215612020575f80fd5b5035919050565b5f60208284031215612037575f80fd5b8135610c5481611f94565b5f805f805f60808688031215612056575f80fd5b853561206181611f94565b9450602086013561207181611f94565b935060408601359250606086013567ffffffffffffffff80821115612094575f80fd5b818801915088601f8301126120a7575f80fd5b8135818111156120b5575f80fd5b8960208285010111156120c6575f80fd5b9699959850939650602001949392505050565b60ff60f81b881681525f602060e060208401526120f960e084018a611f3f565b838103604085015261210b818a611f3f565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825260208088019350909101905f5b8181101561215e57835183529284019291840191600101612142565b50909c9b505050505050505050505050565b803560ff81168114612180575f80fd5b919050565b5f805f805f8060c0878903121561219a575f80fd5b86356121a581611f94565b955060208701359450604087013593506121c160608801612170565b92506080870135915060a087013590509295509295509295565b5f805f805f805f60e0888a0312156121f1575f80fd5b87356121fc81611f94565b9650602088013561220c81611f94565b9550604088013594506060880135935061222860808901612170565b925060a0880135915060c0880135905092959891949750929550565b5f8060408385031215612255575f80fd5b823561226081611f94565b9150602083013561227081611f94565b809150509250929050565b5f806040838503121561228c575f80fd5b823561229781611f94565b9150602083013563ffffffff81168114612270575f80fd5b600181811c908216806122c357607f821691505b6020821081036122e157634e487b7160e01b5f52602260045260245ffd5b50919050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290525f828460c08401375f60c0848401015260c0601f19601f8501168301019050979650505050505050565b5f60208284031215612351575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156105d8576105d8612358565b818103818111156105d8576105d8612358565b6001600160d01b038181168382160190808211156123b2576123b2612358565b5092915050565b6001600160d01b038281168282160390808211156123b2576123b2612358565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f8261242f57634e487b7160e01b5f52601260045260245ffd5b50049056fea2646970667358221220d0fd295cce8691226fd804a3f9c21cf8904112a09c97bc80f3d89c67f522e07b64736f6c63430008160033dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724",
		"opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x324E CODESIZE SUB DUP1 PUSH3 0x324E DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x9BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x53756D6153616D6D73 PUSH1 0xB8 SHL DUP2 MSTORE POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x53756D6153616D6D73 PUSH1 0xB8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x53534153 PUSH1 0xE0 SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0xC2 SWAP2 SWAP1 PUSH3 0xA84 JUMP JUMPDEST POP PUSH1 0x4 PUSH3 0xD1 DUP3 DUP3 PUSH3 0xA84 JUMP JUMPDEST POP POP PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x10D JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x118 DUP2 PUSH3 0x1FB JUMP JUMPDEST POP PUSH3 0x126 DUP3 PUSH1 0x6 PUSH3 0x254 JUMP JUMPDEST PUSH2 0x120 MSTORE PUSH3 0x137 DUP2 PUSH1 0x7 PUSH3 0x254 JUMP JUMPDEST PUSH2 0x140 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xE0 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x100 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH3 0x1C4 PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE POP PUSH3 0x1F4 CALLER PUSH3 0x1E1 PUSH1 0x12 PUSH1 0xA PUSH3 0xC5D JUMP JUMPDEST PUSH3 0x1EE SWAP1 PUSH1 0x1 PUSH3 0xC6D JUMP JUMPDEST PUSH3 0x28C JUMP JUMPDEST POP PUSH3 0xD72 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH2 0x100 DUP2 DUP2 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT DUP6 AND OR SWAP1 SWAP5 SSTORE PUSH1 0x40 MLOAD SWAP4 SWAP1 SWAP3 DIV AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH3 0x273 JUMPI PUSH3 0x26B DUP4 PUSH3 0x2C8 JUMP JUMPDEST SWAP1 POP PUSH3 0x286 JUMP JUMPDEST DUP2 PUSH3 0x280 DUP5 DUP3 PUSH3 0xA84 JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x2B7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH3 0x104 JUMP JUMPDEST PUSH3 0x2C4 PUSH0 DUP4 DUP4 PUSH3 0x30A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH3 0x2F5 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x104 SWAP2 SWAP1 PUSH3 0xC87 JUMP JUMPDEST DUP1 MLOAD PUSH3 0x302 DUP3 PUSH3 0xCD5 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH3 0x317 DUP4 DUP4 DUP4 PUSH3 0x31C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH3 0x329 DUP4 DUP4 DUP4 PUSH3 0x38A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH3 0x37D JUMPI PUSH0 PUSH3 0x343 PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x37A JUMPI PUSH1 0x40 MLOAD PUSH4 0xE58AE93 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH3 0x104 JUMP JUMPDEST POP POP JUMPDEST PUSH3 0x317 DUP4 DUP4 DUP4 PUSH3 0x3A1 JUMP JUMPDEST PUSH3 0x394 PUSH3 0x438 JUMP JUMPDEST PUSH3 0x317 DUP4 DUP4 DUP4 PUSH3 0x45F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH3 0x3D6 JUMPI PUSH3 0x3D3 PUSH1 0xB PUSH3 0xCB2 PUSH3 0x58E PUSH1 0x20 SHL OR PUSH3 0x3CD DUP5 PUSH3 0x5A2 JUMP JUMPDEST PUSH3 0x5DB JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x405 JUMPI PUSH3 0x402 PUSH1 0xB PUSH3 0xCBD PUSH3 0x617 PUSH1 0x20 SHL OR PUSH3 0x3CD DUP5 PUSH3 0x5A2 JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP6 DUP5 AND DUP4 MSTORE SWAP2 KECCAK256 SLOAD PUSH3 0x317 SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP4 PUSH3 0x624 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x45D JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH3 0x48D JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH3 0x481 SWAP2 SWAP1 PUSH3 0xCF9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH3 0x4FF SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH3 0x4E1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH3 0x104 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x51D JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH3 0x53B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH3 0x581 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH3 0x59B DUP3 DUP5 PUSH3 0xD0F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP3 GT ISZERO PUSH3 0x5D7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0xD0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH3 0x104 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH3 0x60A PUSH3 0x5EB PUSH3 0x786 JUMP JUMPDEST PUSH3 0x601 PUSH3 0x5FA DUP9 PUSH3 0x796 JUMP JUMPDEST DUP7 DUP9 PUSH1 0x20 SHR JUMP JUMPDEST DUP8 SWAP2 SWAP1 PUSH3 0x7E2 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH3 0x59B DUP3 DUP5 PUSH3 0xD39 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH3 0x646 JUMPI POP PUSH0 DUP2 GT JUMPDEST ISZERO PUSH3 0x317 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH3 0x6E7 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP3 SWAP2 PUSH3 0x693 SWAP2 SWAP1 PUSH3 0x617 SWAP1 SHL PUSH3 0xCBD OR PUSH3 0x3CD DUP7 PUSH3 0x5A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x322E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP4 PUSH1 0x40 MLOAD PUSH3 0x6DC SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH3 0x317 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP3 SWAP2 PUSH3 0x72E SWAP2 SWAP1 PUSH3 0x58E SWAP1 SHL PUSH3 0xCB2 OR PUSH3 0x3CD DUP7 PUSH3 0x5A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x322E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP4 PUSH1 0x40 MLOAD PUSH3 0x777 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH3 0x791 PUSH3 0x7F1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH0 SWAP1 DUP1 ISZERO PUSH3 0x7DA JUMPI PUSH3 0x7C0 DUP4 PUSH3 0x7B3 PUSH1 0x1 DUP5 PUSH3 0xD5C JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD PUSH7 0x1000000000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH3 0x59B JUMP JUMPDEST PUSH0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH3 0x60A DUP6 DUP6 DUP6 PUSH3 0x7FD JUMP JUMPDEST PUSH0 PUSH3 0x791 NUMBER PUSH3 0x98B JUMP JUMPDEST DUP3 SLOAD PUSH0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH3 0x92D JUMPI PUSH0 PUSH3 0x81D DUP8 PUSH3 0x7B3 PUSH1 0x1 DUP6 PUSH3 0xD5C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP1 DUP3 AND DUP1 DUP5 MSTORE PUSH7 0x1000000000000 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH1 0x20 DUP5 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP8 AND LT ISZERO PUSH3 0x875 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2520601D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH6 0xFFFFFFFFFFFF DUP1 DUP9 AND SWAP2 AND SUB PUSH3 0x8C9 JUMPI DUP5 PUSH3 0x89C DUP9 PUSH3 0x7B3 PUSH1 0x1 DUP7 PUSH3 0xD5C JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH7 0x1000000000000 MUL PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x91C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP1 DUP9 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP9 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP12 SLOAD PUSH1 0x1 DUP2 ADD DUP14 SSTORE PUSH0 DUP14 DUP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 AND PUSH7 0x1000000000000 MUL SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 ADD SSTORE JUMPDEST PUSH1 0x20 ADD MLOAD SWAP3 POP DUP4 SWAP2 POP PUSH3 0x60F SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 ADD DUP11 SSTORE PUSH0 DUP11 DUP2 MSTORE SWAP2 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH7 0x1000000000000 MUL SWAP2 SWAP1 SWAP4 AND OR SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP DUP2 PUSH3 0x60F JUMP JUMPDEST PUSH0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x5D7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH3 0x104 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x9D0 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x59B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0xA10 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0xA2F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x317 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0xA5C JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0xA7D JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xA68 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0xAA0 JUMPI PUSH3 0xAA0 PUSH3 0x9E7 JUMP JUMPDEST PUSH3 0xAB8 DUP2 PUSH3 0xAB1 DUP5 SLOAD PUSH3 0x9FB JUMP JUMPDEST DUP5 PUSH3 0xA35 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0xAEE JUMPI PUSH0 DUP5 ISZERO PUSH3 0xAD6 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0xB48 JUMP JUMPDEST PUSH0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0xB1E JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0xAFD JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0xB3C JUMPI DUP8 DUP6 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP5 PUSH1 0x1 SHL ADD DUP6 SSTORE JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 0xBA4 JUMPI DUP2 PUSH0 NOT DIV DUP3 GT ISZERO PUSH3 0xB88 JUMPI PUSH3 0xB88 PUSH3 0xB50 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 0xB96 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 0xB69 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 PUSH3 0xBBC JUMPI POP PUSH1 0x1 PUSH3 0x286 JUMP JUMPDEST DUP2 PUSH3 0xBCA JUMPI POP PUSH0 PUSH3 0x286 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0xBE3 JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0xBEE JUMPI PUSH3 0xC0E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x286 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0xC02 JUMPI PUSH3 0xC02 PUSH3 0xB50 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH3 0x286 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0xC33 JUMPI POP DUP2 DUP2 EXP PUSH3 0x286 JUMP JUMPDEST PUSH3 0xC3F DUP4 DUP4 PUSH3 0xB64 JUMP JUMPDEST DUP1 PUSH0 NOT DIV DUP3 GT ISZERO PUSH3 0xC55 JUMPI PUSH3 0xC55 PUSH3 0xB50 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH3 0x59B PUSH1 0xFF DUP5 AND DUP4 PUSH3 0xBAC JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH3 0x286 JUMPI PUSH3 0x286 PUSH3 0xB50 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0xCB5 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH3 0xC97 JUMP JUMPDEST POP PUSH0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH3 0xA2F JUMPI PUSH0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x286 JUMPI PUSH3 0x286 PUSH3 0xB50 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH3 0xD32 JUMPI PUSH3 0xD32 PUSH3 0xB50 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH3 0xD32 JUMPI PUSH3 0xD32 PUSH3 0xB50 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x286 JUMPI PUSH3 0x286 PUSH3 0xB50 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x246A PUSH3 0xDC4 PUSH0 CODECOPY PUSH0 PUSH2 0x1231 ADD MSTORE PUSH0 PUSH2 0x1204 ADD MSTORE PUSH0 PUSH2 0xE8B ADD MSTORE PUSH0 PUSH2 0xE63 ADD MSTORE PUSH0 PUSH2 0xDBE ADD MSTORE PUSH0 PUSH2 0xDE8 ADD MSTORE PUSH0 PUSH2 0xE12 ADD MSTORE PUSH2 0x246A PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x208 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0xA9 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x79 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x485 JUMPI DUP1 PUSH4 0xD9D98CE4 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x4AB JUMPI DUP1 PUSH4 0xF1127ED8 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x522 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x444 JUMPI DUP1 PUSH4 0x9AB24EB0 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x45F JUMPI DUP1 PUSH4 0xC3CDA520 EQ PUSH2 0x472 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 GT PUSH2 0xEF JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x3D9 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x3E1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3FC JUMPI DUP1 PUSH4 0x8E539E8C EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0x91DDADF4 EQ PUSH2 0x425 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x383 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3AB JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x3C6 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40C10F19 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x5C19A95C GT PUSH2 0x170 JUMPI DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x317 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x32A JUMPI DUP1 PUSH4 0x5CFFE9DE EQ PUSH2 0x335 JUMPI DUP1 PUSH4 0x613255AB EQ PUSH2 0x348 JUMPI DUP1 PUSH4 0x6FCFFF45 EQ PUSH2 0x35B JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2A6 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0x4BF5D7E9 EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0x587CDE1E EQ PUSH2 0x2D4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x1DB JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0x3A46B1A8 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x29C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x25F JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x214 PUSH2 0x535 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221 SWAP2 SWAP1 PUSH2 0x1F82 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23D PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0x5C5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x221 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x221 JUMP JUMPDEST PUSH2 0x23D PUSH2 0x26D CALLDATASIZE PUSH1 0x4 PUSH2 0x1FD2 JUMP JUMPDEST PUSH2 0x5DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x221 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x601 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0x60F JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x693 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2A4 PUSH2 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0x6A5 JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2010 JUMP JUMPDEST PUSH2 0x6BB JUMP JUMPDEST PUSH2 0x214 PUSH2 0x6C8 JUMP JUMPDEST PUSH2 0x2FF PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x221 JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x325 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x740 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND PUSH2 0x23D JUMP JUMPDEST PUSH2 0x23D PUSH2 0x343 CALLDATASIZE PUSH1 0x4 PUSH2 0x2042 JUMP JUMPDEST PUSH2 0x74B JUMP JUMPDEST PUSH2 0x251 PUSH2 0x356 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x8BD JUMP JUMPDEST PUSH2 0x36E PUSH2 0x369 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x8E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x221 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x391 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x8EC JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0x8FD JUMP JUMPDEST PUSH2 0x251 PUSH2 0x3D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x912 JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x91C JUMP JUMPDEST PUSH2 0x3E9 PUSH2 0x92C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x20D9 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2FF JUMP JUMPDEST PUSH2 0x251 PUSH2 0x420 CALLDATASIZE PUSH1 0x4 PUSH2 0x2010 JUMP JUMPDEST PUSH2 0x96E JUMP JUMPDEST PUSH2 0x42D PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x221 JUMP JUMPDEST PUSH2 0x214 PUSH2 0x9E0 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x45A CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x9EF JUMP JUMPDEST PUSH2 0x23D PUSH2 0x46D CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0xA1E JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x480 CALLDATASIZE PUSH1 0x4 PUSH2 0x2185 JUMP JUMPDEST PUSH2 0xA2B JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x493 CALLDATASIZE PUSH1 0x4 PUSH2 0x21DB JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x4A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0xC1D JUMP JUMPDEST PUSH2 0x251 PUSH2 0x4B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2244 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x4F6 PUSH2 0x4F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x227B JUMP JUMPDEST PUSH2 0xC5B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x221 JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x530 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0xC78 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x544 SWAP1 PUSH2 0x22AF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x570 SWAP1 PUSH2 0x22AF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5BB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x592 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5BB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x59E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x5D2 DUP2 DUP6 DUP6 PUSH2 0xCC8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x5EB DUP6 DUP3 DUP6 PUSH2 0xCDA JUMP JUMPDEST PUSH2 0x5F6 DUP6 DUP6 DUP6 PUSH2 0xD55 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x60A PUSH2 0xDB2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x619 PUSH2 0x9D7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH6 0xFFFFFFFFFFFF AND DUP4 LT PUSH2 0x659 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7669FC0F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH6 0xFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x682 PUSH2 0x665 DUP5 PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 PUSH2 0xF11 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x69B PUSH2 0xFC1 JUMP JUMPDEST PUSH2 0x6A3 PUSH2 0xFF4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6AD PUSH2 0xFC1 JUMP JUMPDEST PUSH2 0x6B7 DUP3 DUP3 PUSH2 0x1046 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6C5 CALLER DUP3 PUSH2 0x107A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6D2 PUSH2 0x10AE JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x6E2 PUSH2 0x9D7 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND EQ PUSH2 0x708 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1BFC1C5 PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x6D6F64653D626C6F636B6E756D6265722666726F6D3D64656661756C74000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST CALLER PUSH2 0x6B7 DUP2 DUP4 PUSH2 0x10B8 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x756 DUP7 PUSH2 0x8BD JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0x77C JUMPI PUSH1 0x40 MLOAD PUSH4 0xFD9A7609 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH0 PUSH2 0x787 DUP8 DUP8 PUSH2 0xC1D JUMP JUMPDEST SWAP1 POP PUSH2 0x793 DUP9 DUP8 PUSH2 0x1046 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23E30C8B PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x23E30C8B SWAP1 PUSH2 0x7EB SWAP1 CALLER SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x22E7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x807 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x82B SWAP2 SWAP1 PUSH2 0x2341 JUMP JUMPDEST EQ PUSH2 0x853 JUMPI PUSH1 0x40 MLOAD PUSH3 0x678C5B PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH0 PUSH2 0x868 DUP10 ADDRESS PUSH2 0x863 DUP6 DUP12 PUSH2 0x236C JUMP JUMPDEST PUSH2 0xCDA JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x87C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0x899 JUMPI PUSH2 0x894 DUP10 PUSH2 0x88F DUP5 DUP11 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x107A JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST PUSH2 0x8A3 DUP10 DUP9 PUSH2 0x107A JUMP JUMPDEST PUSH2 0x8AE DUP10 DUP3 DUP5 PUSH2 0xD55 JUMP JUMPDEST POP PUSH1 0x1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ PUSH2 0x8D4 JUMPI PUSH0 PUSH2 0x5D8 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x5D8 SWAP1 PUSH0 NOT PUSH2 0x237F JUMP JUMPDEST PUSH0 PUSH2 0x5D8 DUP3 PUSH2 0x1129 JUMP JUMPDEST PUSH2 0x8F4 PUSH2 0xFC1 JUMP JUMPDEST PUSH2 0x6A3 PUSH0 PUSH2 0x114A JUMP JUMPDEST PUSH2 0x908 DUP3 CALLER DUP4 PUSH2 0xCDA JUMP JUMPDEST PUSH2 0x6B7 DUP3 DUP3 PUSH2 0x107A JUMP JUMPDEST PUSH0 PUSH2 0x5D8 DUP3 PUSH2 0x11A3 JUMP JUMPDEST PUSH2 0x924 PUSH2 0xFC1 JUMP JUMPDEST PUSH2 0x6A3 PUSH2 0x11C0 JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x93D PUSH2 0x11FD JUMP JUMPDEST PUSH2 0x945 PUSH2 0x122A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x978 PUSH2 0x9D7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH6 0xFFFFFFFFFFFF AND DUP4 LT PUSH2 0x9B3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7669FC0F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH6 0xFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0x9C7 PUSH2 0x9BF DUP5 PUSH2 0xEDB JUMP JUMPDEST PUSH1 0xB SWAP1 PUSH2 0xF11 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x60A PUSH2 0x10AE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x544 SWAP1 PUSH2 0x22AF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xA0F SWAP1 PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x5D2 DUP2 DUP6 DUP6 PUSH2 0xD55 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xA4F JUMPI PUSH1 0x40 MLOAD PUSH4 0x2341D787 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xE48329057BFD03D55E49B547132E39CFFD9C1820AD7B9D4C5307691425D15ADF PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH0 SWAP1 PUSH2 0xAC8 SWAP1 PUSH2 0xAC0 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x1286 JUMP JUMPDEST DUP6 DUP6 DUP6 PUSH2 0x12B2 JUMP JUMPDEST SWAP1 POP PUSH2 0xAD4 DUP2 DUP8 PUSH2 0x12DE JUMP JUMPDEST PUSH2 0xADE DUP2 DUP9 PUSH2 0x10B8 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xB0B JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xB56 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0xBB0 DUP3 PUSH2 0x1286 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xBBF DUP3 DUP8 DUP8 DUP8 PUSH2 0x12B2 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC06 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0xC11 DUP11 DUP11 DUP11 PUSH2 0xCC8 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ PUSH2 0xC52 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5AD3EDC9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xC54 DUP4 DUP4 PUSH2 0x1330 JUMP JUMPDEST PUSH2 0xC80 PUSH2 0xFC1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xCA9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0x6C5 DUP2 PUSH2 0x114A JUMP JUMPDEST PUSH0 PUSH2 0xC54 DUP3 DUP5 PUSH2 0x2392 JUMP JUMPDEST PUSH0 PUSH2 0xC54 DUP3 DUP5 PUSH2 0x23B9 JUMP JUMPDEST PUSH2 0xCD5 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1364 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0xD4F JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xD41 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0xD4F DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x1364 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xD7E JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xDA7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0xCD5 DUP4 DUP4 DUP4 PUSH2 0x1436 JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0xE0A JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0xE34 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x60A PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP2 SLOAD PUSH0 SWAP1 DUP2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0xF6D JUMPI PUSH0 PUSH2 0xF2A DUP5 PUSH2 0x1441 JUMP JUMPDEST PUSH2 0xF34 SWAP1 DUP6 PUSH2 0x237F JUMP JUMPDEST PUSH0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP2 ADD SLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP8 AND LT ISZERO PUSH2 0xF5D JUMPI DUP1 SWAP2 POP PUSH2 0xF6B JUMP JUMPDEST PUSH2 0xF68 DUP2 PUSH1 0x1 PUSH2 0x236C JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST PUSH0 PUSH2 0xF7A DUP8 DUP8 DUP6 DUP6 PUSH2 0x1525 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xFB4 JUMPI PUSH2 0xF9E DUP8 PUSH2 0xF91 PUSH1 0x1 DUP5 PUSH2 0x237F JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH2 0xFB6 JUMP JUMPDEST PUSH0 JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0xFFC PUSH2 0x1584 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x106F JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0x6B7 PUSH0 DUP4 DUP4 PUSH2 0x1436 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x10A3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0x6B7 DUP3 PUSH0 DUP4 PUSH2 0x1436 JUMP JUMPDEST PUSH0 PUSH2 0x60A NUMBER PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD DUP7 DUP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP5 AND SWAP4 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 PUSH32 0x3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F SWAP2 SWAP1 LOG4 PUSH2 0xCD5 DUP2 DUP4 PUSH2 0x1124 DUP7 PUSH2 0x15A7 JUMP JUMPDEST PUSH2 0x15C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x5D8 SWAP1 PUSH2 0x172D JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH2 0x100 DUP2 DUP2 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT DUP6 AND OR SWAP1 SWAP5 SSTORE PUSH1 0x40 MLOAD SWAP4 SWAP1 SWAP3 DIV AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x5D8 JUMP JUMPDEST PUSH2 0x11C8 PUSH2 0x175D JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1029 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x60A PUSH32 0x0 PUSH1 0x6 PUSH2 0x1781 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x60A PUSH32 0x0 PUSH1 0x7 PUSH2 0x1781 JUMP JUMPDEST DUP1 SLOAD PUSH0 SWAP1 DUP1 ISZERO PUSH2 0xC52 JUMPI PUSH2 0x1270 DUP4 PUSH2 0xF91 PUSH1 0x1 DUP5 PUSH2 0x237F JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH2 0xC54 JUMP JUMPDEST PUSH0 PUSH2 0x5D8 PUSH2 0x1292 PUSH2 0xDB2 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x12C2 DUP9 DUP9 DUP9 DUP9 PUSH2 0x182A JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x12D2 DUP3 DUP3 PUSH2 0x18F2 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE DUP2 DUP2 EQ PUSH2 0xCD5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1D4B623 PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xC54 SWAP1 DUP4 PUSH2 0x19AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x138D JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x13B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0xD4F JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1428 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0xCD5 DUP4 DUP4 DUP4 PUSH2 0x1A17 JUMP JUMPDEST PUSH0 DUP2 PUSH0 SUB PUSH2 0x1450 JUMPI POP PUSH0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH2 0x145C DUP5 PUSH2 0x1A7D JUMP JUMPDEST SWAP1 SHR PUSH1 0x1 SWAP1 SHL SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x1475 JUMPI PUSH2 0x1475 PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x148D JUMPI PUSH2 0x148D PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x14A5 JUMPI PUSH2 0x14A5 PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x14BD JUMPI PUSH2 0x14BD PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x14D5 JUMPI PUSH2 0x14D5 PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x14ED JUMPI PUSH2 0x14ED PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x1505 JUMPI PUSH2 0x1505 PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH2 0xC54 DUP2 DUP3 DUP6 DUP2 PUSH2 0x151F JUMPI PUSH2 0x151F PUSH2 0x23D9 JUMP JUMPDEST DIV PUSH2 0x1B10 JUMP JUMPDEST PUSH0 JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x157C JUMPI PUSH0 PUSH2 0x153A DUP5 DUP5 PUSH2 0x1B25 JUMP JUMPDEST PUSH0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH6 0xFFFFFFFFFFFF DUP7 AND SWAP1 DUP3 ADD SLOAD PUSH6 0xFFFFFFFFFFFF AND GT ISZERO PUSH2 0x1568 JUMPI DUP1 SWAP3 POP PUSH2 0x1576 JUMP JUMPDEST PUSH2 0x1573 DUP2 PUSH1 0x1 PUSH2 0x236C JUMP JUMPDEST SWAP4 POP JUMPDEST POP PUSH2 0x1527 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x5D8 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x15E5 JUMPI POP PUSH0 DUP2 GT JUMPDEST ISZERO PUSH2 0xCD5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x168C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x1627 SWAP1 PUSH2 0xCBD PUSH2 0x1622 DUP7 PUSH2 0x1B3F JUMP JUMPDEST PUSH2 0x1B72 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1681 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xCD5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x16C4 SWAP1 PUSH2 0xCB2 PUSH2 0x1622 DUP7 PUSH2 0x1B3F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x171E SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0x179B JUMPI PUSH2 0x1794 DUP4 PUSH2 0x1BAA JUMP JUMPDEST SWAP1 POP PUSH2 0x5D8 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x17A7 SWAP1 PUSH2 0x22AF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x17D3 SWAP1 PUSH2 0x22AF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x181E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x17F5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x181E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1801 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x5D8 JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0x1863 JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0x18E8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18B4 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x18DF JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0x18E8 JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1905 JUMPI PUSH2 0x1905 PUSH2 0x23ED JUMP JUMPDEST SUB PUSH2 0x190E JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1922 JUMPI PUSH2 0x1922 PUSH2 0x23ED JUMP JUMPDEST SUB PUSH2 0x1940 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1954 JUMPI PUSH2 0x1954 PUSH2 0x23ED JUMP JUMPDEST SUB PUSH2 0x1975 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1989 JUMPI PUSH2 0x1989 PUSH2 0x23ED JUMP JUMPDEST SUB PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH0 ADD DUP3 PUSH4 0xFFFFFFFF AND DUP2 SLOAD DUP2 LT PUSH2 0x19D7 JUMPI PUSH2 0x19D7 PUSH2 0x2401 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1A22 DUP4 DUP4 DUP4 PUSH2 0x1BE7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1A72 JUMPI PUSH0 PUSH2 0x1A3A PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1A6F JUMPI PUSH1 0x40 MLOAD PUSH4 0xE58AE93 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST POP POP JUMPDEST PUSH2 0xCD5 DUP4 DUP4 DUP4 PUSH2 0x1BFA JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x80 DUP4 SWAP1 SHR ISZERO PUSH2 0x1A91 JUMPI PUSH1 0x80 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x40 DUP4 SWAP1 SHR ISZERO PUSH2 0x1AA3 JUMPI PUSH1 0x40 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x20 DUP4 SWAP1 SHR ISZERO PUSH2 0x1AB5 JUMPI PUSH1 0x20 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x10 DUP4 SWAP1 SHR ISZERO PUSH2 0x1AC7 JUMPI PUSH1 0x10 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x8 DUP4 SWAP1 SHR ISZERO PUSH2 0x1AD9 JUMPI PUSH1 0x8 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x4 DUP4 SWAP1 SHR ISZERO PUSH2 0x1AEB JUMPI PUSH1 0x4 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x2 DUP4 SWAP1 SHR ISZERO PUSH2 0x1AFD JUMPI PUSH1 0x2 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x1 DUP4 SWAP1 SHR ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 DUP4 LT PUSH2 0x1B1E JUMPI DUP2 PUSH2 0xC54 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1B33 PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x2415 JUMP JUMPDEST PUSH2 0xC54 SWAP1 DUP5 DUP5 AND PUSH2 0x236C JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP3 GT ISZERO PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0xD0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1B9D PUSH2 0x1B7F PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0x1B95 PUSH2 0x1B8B DUP9 PUSH2 0x1257 JUMP JUMPDEST DUP7 DUP9 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 SWAP2 SWAP1 PUSH2 0x1C6F JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x1BB6 DUP4 PUSH2 0x1C7C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x1BEF PUSH2 0x175D JUMP JUMPDEST PUSH2 0xCD5 DUP4 DUP4 DUP4 PUSH2 0x1CA3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1C1C JUMPI PUSH2 0x1C19 PUSH1 0xB PUSH2 0xCB2 PUSH2 0x1622 DUP5 PUSH2 0x1B3F JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1C3E JUMPI PUSH2 0x1C3B PUSH1 0xB PUSH2 0xCBD PUSH2 0x1622 DUP5 PUSH2 0x1B3F JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP6 DUP5 AND DUP4 MSTORE SWAP2 KECCAK256 SLOAD PUSH2 0xCD5 SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP4 PUSH2 0x15C4 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1B9D DUP6 DUP6 DUP6 PUSH2 0x1DC9 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1CCD JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1CC2 SWAP2 SWAP1 PUSH2 0x236C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x1D3D SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1D1F JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1D59 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x1D77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1DBC SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH2 0x1EE5 JUMPI PUSH0 PUSH2 0x1DE5 DUP8 PUSH2 0xF91 PUSH1 0x1 DUP6 PUSH2 0x237F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP1 DUP3 AND DUP1 DUP5 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH1 0x20 DUP5 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP8 AND LT ISZERO PUSH2 0x1E39 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2520601D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH6 0xFFFFFFFFFFFF DUP1 DUP9 AND SWAP2 AND SUB PUSH2 0x1E85 JUMPI DUP5 PUSH2 0x1E5C DUP9 PUSH2 0xF91 PUSH1 0x1 DUP7 PUSH2 0x237F JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1ED5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP1 DUP9 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP9 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP12 SLOAD PUSH1 0x1 DUP2 ADD DUP14 SSTORE PUSH0 DUP14 DUP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x30 SHL MUL SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 ADD SSTORE JUMPDEST PUSH1 0x20 ADD MLOAD SWAP3 POP DUP4 SWAP2 POP PUSH2 0x1BA2 SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 ADD DUP11 SSTORE PUSH0 DUP11 DUP2 MSTORE SWAP2 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x30 SHL MUL SWAP2 SWAP1 SWAP4 AND OR SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP DUP2 PUSH2 0x1BA2 JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1F63 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1F47 JUMP JUMPDEST POP PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xC54 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1F3F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6C5 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FB9 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1FC4 DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1FE4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1FEF DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1FFF DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2020 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2037 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xC54 DUP2 PUSH2 0x1F94 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2056 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2061 DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x2071 DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2094 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x20A7 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x20B5 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x20C6 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH0 PUSH1 0x20 PUSH1 0xE0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x20F9 PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0x1F3F JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x210B DUP2 DUP11 PUSH2 0x1F3F JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP9 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x215E JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2142 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2180 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x219A JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x21A5 DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x21C1 PUSH1 0x60 DUP9 ADD PUSH2 0x2170 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x21F1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x21FC DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x220C DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2228 PUSH1 0x80 DUP10 ADD PUSH2 0x2170 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2255 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2260 DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2270 DUP2 PUSH2 0x1F94 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x228C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2297 DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2270 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x22C3 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x22E1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP3 MSTORE DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH0 DUP3 DUP5 PUSH1 0xC0 DUP5 ADD CALLDATACOPY PUSH0 PUSH1 0xC0 DUP5 DUP5 ADD ADD MSTORE PUSH1 0xC0 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP4 ADD ADD SWAP1 POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2351 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x5D8 JUMPI PUSH2 0x5D8 PUSH2 0x2358 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x5D8 JUMPI PUSH2 0x5D8 PUSH2 0x2358 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x23B2 JUMPI PUSH2 0x23B2 PUSH2 0x2358 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x23B2 JUMPI PUSH2 0x23B2 PUSH2 0x2358 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0x242F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD0 REVERT 0x29 0x5C 0xCE DUP7 SWAP2 0x22 PUSH16 0xD804A3F9C21CF8904112A09C97BC80F3 0xD8 SWAP13 PUSH8 0xF522E07B64736F6C PUSH4 0x43000816 STOP CALLER 0xDE 0xC2 0xBA 0xCD 0xD2 CREATE JUMPDEST MSIZE 0xDE CALLVALUE 0xDA SWAP12 MSTORE RETURNDATASIZE SELFDESTRUCT DUP12 0xE4 0x2E 0x5E CODESIZE 0xE8 XOR 0xC8 0x2F 0xDB SIGNEXTEND 0xAE PUSH24 0x4387A7240000000000000000000000000000000000000000 ",
		"sourceMap": "581:968:32:-:0;;;695:192;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1574:52:14;;;;;;;;;;;;;-1:-1:-1;;;1574:52:14;;;1613:4;3328:431:25;;;;;;;;;;;;;-1:-1:-1;;;3328:431:25;;;780:12:32;1896:113:9;;;;;;;;;;;;;-1:-1:-1;;;1896:113:9;;;;;;;;;;;;;;;;-1:-1:-1;;;1896:113:9;;;1970:5;1962;:13;;;;;;:::i;:::-;-1:-1:-1;1985:7:9;:17;1995:7;1985;:17;:::i;:::-;-1:-1:-1;;1231:7:20;:15;;-1:-1:-1;;1231:15:20;;;-1:-1:-1;;;;;;1273:26:0;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;3142:51:33;3115:18;;1322:31:0;;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;3401:45:25;:4;3432:13;3401:30;:45::i;:::-;3393:53;;3467:51;:7;3501:16;3467:33;:51::i;:::-;3456:62;;3542:22;;;;;;;;;;3528:36;;3591:25;;;;;;3574:42;;3644:13;3627:30;;3692:23;4226:11;;4239:14;;4204:80;;;2079:95;4204:80;;;5145:25:33;5186:18;;;5179:34;;;;5229:18;;;5222:34;4255:13:25;5272:18:33;;;5265:34;4278:4:25;5315:19:33;;;5308:61;4168:7:25;;5117:19:33;;4204:80:25;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;3692:23;3667:48;;-1:-1:-1;;3747:4:25;3725:27;;-1:-1:-1;841:39:32::3;847:10;863:16;3075:2:9::0;863::32::3;:16;:::i;:::-;859:20;::::0;:1:::3;:20;:::i;:::-;841:5;:39::i;:::-;695:192:::0;581:968;;2912:187:0;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;3004:6;3020:17;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;2914:340:21:-;3010:11;3059:2;3043:5;3037:19;:24;3033:215;;;3084:20;3098:5;3084:13;:20::i;:::-;3077:27;;;;3033:215;3161:5;3135:46;3176:5;3161;3135:46;:::i;:::-;-1:-1:-1;1390:66:21;;-1:-1:-1;3033:215:21;2914:340;;;;:::o;7721:208:9:-;-1:-1:-1;;;;;7791:21:9;;7787:91;;7835:32;;-1:-1:-1;;;7835:32:9;;7864:1;7835:32;;;3142:51:33;3115:18;;7835:32:9;2996:203:33;7787:91:9;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;:::-;7721:208;;:::o;1708:286:21:-;1773:11;1796:17;1822:3;1796:30;;1854:2;1840:4;:11;:16;1836:72;;;1893:3;1879:18;;-1:-1:-1;;;1879:18:21;;;;;;;;:::i;1836:72::-;1974:11;;1957:13;1974:4;1957:13;:::i;:::-;1949:36;;1708:286;-1:-1:-1;;;1708:286:21:o;1194:177:32:-;1334:30;1348:4;1354:2;1358:5;1334:13;:30::i;:::-;1194:177;;;:::o;2327:413:15:-;2421:30;2435:4;2441:2;2445:5;2421:13;:30::i;:::-;-1:-1:-1;;;;;2465:18:15;;2461:226;;2499:14;2516:13;3222:12:9;;;3144:97;2516:13:15;2499:30;-1:-1:-1;;;;;;2587:12:15;;;2583:94;;;2626:36;;-1:-1:-1;;;2626:36:15;;;;;6409:25:33;;;6450:18;;;6443:34;;;6382:18;;2626:36:15;6235:248:33;2583:94:15;2485:202;;2461:226;2696:37;2717:4;2723:2;2727:5;2696:20;:37::i;1112:145:13:-;1474:19:20;:17;:19::i;:::-;1220:30:13::1;1234:4:::0;1240:2;1244:5;1220:13:::1;:30::i;7232:399:2:-:0;-1:-1:-1;;;;;7335:18:2;;7331:107;;7369:58;7375:17;7394:4;;;;;7400:26;7419:6;7400:18;:26::i;:::-;7369:5;:58::i;:::-;;;7331:107;-1:-1:-1;;;;;7451:16:2;;7447:110;;7483:63;7489:17;7508:9;;;;;7519:26;7538:6;7519:18;:26::i;7483:63::-;;;7447:110;-1:-1:-1;;;;;5630:19:2;;;5604:7;5630:19;;;:10;:19;;;;;;;;;;;;;;;7566:58;;5630:19;;;;;7617:6;7566:18;:58::i;2002:128:20:-;1920:7;;;;2063:61;;;2098:15;;-1:-1:-1;;;2098:15:20;;;;;;;;;;;2063:61;2002:128::o;6271:1107:9:-;-1:-1:-1;;;;;6360:18:9;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:9;;-1:-1:-1;6356:540:9;;-1:-1:-1;;;;;6570:15:9;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:9;;-1:-1:-1;;;;;6838:32:33;;6649:50:9;;;6820:51:33;6887:18;;;6880:34;;;6930:18;;;6923:34;;;6793:18;;6649:50:9;6618:345:33;6599:115:9;-1:-1:-1;;;;;6834:15:9;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:9;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:9;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:9;7355:4;-1:-1:-1;;;;;7346:25:9;;7365:5;7346:25;;;;7114::33;;7102:2;7087:18;;6968:177;7346:25:9;;;;;;;;6271:1107;;;:::o;9277:96:2:-;9335:7;9361:5;9365:1;9361;:5;:::i;:::-;9354:12;9277:96;-1:-1:-1;;;9277:96:2:o;4169:218:28:-;4226:7;-1:-1:-1;;;;;4249:25:28;;4245:105;;;4297:42;;-1:-1:-1;;;4297:42:28;;4328:3;4297:42;;;7519:36:33;7571:18;;;7564:34;;;7492:18;;4297:42:28;7337:267:33;4245:105:28;-1:-1:-1;4374:5:28;4169:218::o;9016:255:2:-;9183:7;;9218:46;9229:7;:5;:7::i;:::-;9238:25;9241:14;:5;:12;:14::i;:::-;9257:5;9238:2;:25;;:::i;:::-;9218:5;;:46;:10;:46::i;:::-;9211:53;;;;9016:255;;;;;;;:::o;9379:101::-;9442:7;9468:5;9472:1;9468;:5;:::i;7717:780::-;7817:2;-1:-1:-1;;;;;7809:10:2;:4;-1:-1:-1;;;;;7809:10:2;;;:24;;;;;7832:1;7823:6;:10;7809:24;7805:686;;;-1:-1:-1;;;;;7853:18:2;;;7849:315;;-1:-1:-1;;;;;7957:26:2;;7892:16;7957:26;;;:20;:26;;;;;;;7892:16;;7930:150;;7957:26;8005:9;;;;;8036:26;8055:6;8036:18;:26::i;7930:150::-;-1:-1:-1;;;;;7891:189:2;;;-1:-1:-1;;;;;7891:189:2;;;8124:4;-1:-1:-1;;;;;8103:46:2;-1:-1:-1;;;;;;;;;;;8130:8:2;8140;8103:46;;;;;;6409:25:33;;;6465:2;6450:18;;6443:34;6397:2;6382:18;;6235:248;8103:46:2;;;;;;;;7873:291;;7849:315;-1:-1:-1;;;;;8181:16:2;;;8177:304;;-1:-1:-1;;;;;8283:24:2;;8218:16;8283:24;;;:20;:24;;;;;;;8218:16;;8256:143;;8283:24;8329:4;;;;;8355:26;8374:6;8355:18;:26::i;8256:143::-;-1:-1:-1;;;;;8217:182:2;;;-1:-1:-1;;;;;8217:182:2;;;8443:2;-1:-1:-1;;;;;8422:44:2;-1:-1:-1;;;;;;;;;;;8447:8:2;8457;8422:44;;;;;;6409:25:33;;;6465:2;6450:18;;6443:34;6397:2;6382:18;;6235:248;8422:44:2;;;;;;;;8199:282;;7717:780;;;:::o;2789:96::-;2835:6;2860:18;:16;:18::i;:::-;2853:25;;2789:96;:::o;10167:206:30:-;10262:24;;10229:7;;10303:8;;:63;;10318:41;10332:4;10351:7;10357:1;10351:3;:7;:::i;:::-;14209:28;14272:20;;;14337:4;14324:18;;;14320:28;;14099:265;10318:41;:48;;;;-1:-1:-1;;;;;10318:48:30;10303:63;;;10314:1;10296:70;10167:206;-1:-1:-1;;;10167:206:30:o;8050:162::-;8132:7;;8167:38;8175:4;8194:3;8199:5;8167:7;:38::i;931:109:31:-;977:6;1002:31;1020:12;1002:17;:31::i;11513:870:30:-;11646:11;;11604:7;;;;11672;;11668:709;;11747:25;11775:28;11789:4;11795:7;11801:1;11795:3;:7;:::i;11775:28::-;11747:56;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11747:56:30;;;;;;;-1:-1:-1;11877:15:30;;;-1:-1:-1;11873:91:30;;;11919:30;;-1:-1:-1;;;11919:30:30;;;;;;;;;;;11873:91;12027:9;;:16;;;;;;;12023:189;;12101:5;12063:28;12077:4;12083:7;12089:1;12083:3;:7;:::i;12063:28::-;:43;;-1:-1:-1;;;;;12063:43:30;;;;;;;;;;;;;;;;12023:189;;;12155:41;;;;;;;;;;;;;;;-1:-1:-1;;;;;12155:41:30;;;;;;;;;;12145:52;;;;;;;-1:-1:-1;12145:52:30;;;;;;;;;;;;;;;;;;;;;;;;;12023:189;12233:11;;;;-1:-1:-1;12246:5:30;;-1:-1:-1;12225:27:30;;-1:-1:-1;12225:27:30;11668:709;-1:-1:-1;;12293:41:30;;;;;;;;;;;;;;;-1:-1:-1;;;;;12293:41:30;;;;;;;;;;12283:52;;;;;;;-1:-1:-1;12283:52:30;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12327:5:30;12349:17;;14291:213:28;14347:6;14377:16;14369:24;;14365:103;;;14416:41;;-1:-1:-1;;;14416:41:28;;14447:2;14416:41;;;7519:36:33;7571:18;;;7564:34;;;7492:18;;14416:41:28;7337:267:33;14:290;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:33;;214:42;;204:70;;270:1;267;260:12;309:127;370:10;365:3;361:20;358:1;351:31;401:4;398:1;391:15;425:4;422:1;415:15;441:380;520:1;516:12;;;;563;;;584:61;;638:4;630:6;626:17;616:27;;584:61;691:2;683:6;680:14;660:18;657:38;654:161;;737:10;732:3;728:20;725:1;718:31;772:4;769:1;762:15;800:4;797:1;790:15;654:161;;441:380;;;:::o;952:518::-;1054:2;1049:3;1046:11;1043:421;;;1090:5;1087:1;1080:16;1134:4;1131:1;1121:18;1204:2;1192:10;1188:19;1185:1;1181:27;1175:4;1171:38;1240:4;1228:10;1225:20;1222:47;;;-1:-1:-1;1263:4:33;1222:47;1318:2;1313:3;1309:12;1306:1;1302:20;1296:4;1292:31;1282:41;;1373:81;1391:2;1384:5;1381:13;1373:81;;;1450:1;1436:16;;1417:1;1406:13;1373:81;;;1377:3;;952:518;;;:::o;1646:1345::-;1766:10;;-1:-1:-1;;;;;1788:30:33;;1785:56;;;1821:18;;:::i;:::-;1850:97;1940:6;1900:38;1932:4;1926:11;1900:38;:::i;:::-;1894:4;1850:97;:::i;:::-;2002:4;;2059:2;2048:14;;2076:1;2071:663;;;;2778:1;2795:6;2792:89;;;-1:-1:-1;2847:19:33;;;2841:26;2792:89;-1:-1:-1;;1603:1:33;1599:11;;;1595:24;1591:29;1581:40;1627:1;1623:11;;;1578:57;2894:81;;2041:944;;2071:663;899:1;892:14;;;936:4;923:18;;-1:-1:-1;;2107:20:33;;;2225:236;2239:7;2236:1;2233:14;2225:236;;;2328:19;;;2322:26;2307:42;;2420:27;;;;2388:1;2376:14;;;;2255:19;;2225:236;;;2229:3;2489:6;2480:7;2477:19;2474:201;;;2550:19;;;2544:26;-1:-1:-1;;2633:1:33;2629:14;;;2645:3;2625:24;2621:37;2617:42;2602:58;2587:74;;2474:201;;;2721:1;2712:6;2709:1;2705:14;2701:22;2695:4;2688:36;2041:944;;;;;1646:1345;;:::o;3204:127::-;3265:10;3260:3;3256:20;3253:1;3246:31;3296:4;3293:1;3286:15;3320:4;3317:1;3310:15;3336:416;3425:1;3462:5;3425:1;3476:270;3497:7;3487:8;3484:21;3476:270;;;3556:4;3552:1;3548:6;3544:17;3538:4;3535:27;3532:53;;;3565:18;;:::i;:::-;3615:7;3605:8;3601:22;3598:55;;;3635:16;;;;3598:55;3714:22;;;;3674:15;;;;3476:270;;;3480:3;3336:416;;;;;:::o;3757:806::-;3806:5;3836:8;3826:80;;-1:-1:-1;3877:1:33;3891:5;;3826:80;3925:4;3915:76;;-1:-1:-1;3962:1:33;3976:5;;3915:76;4007:4;4025:1;4020:59;;;;4093:1;4088:130;;;;4000:218;;4020:59;4050:1;4041:10;;4064:5;;;4088:130;4125:3;4115:8;4112:17;4109:43;;;4132:18;;:::i;:::-;-1:-1:-1;;4188:1:33;4174:16;;4203:5;;4000:218;;4302:2;4292:8;4289:16;4283:3;4277:4;4274:13;4270:36;4264:2;4254:8;4251:16;4246:2;4240:4;4237:12;4233:35;4230:77;4227:159;;;-1:-1:-1;4339:19:33;;;4371:5;;4227:159;4418:34;4443:8;4437:4;4418:34;:::i;:::-;4488:6;4484:1;4480:6;4476:19;4467:7;4464:32;4461:58;;;4499:18;;:::i;:::-;4537:20;;3757:806;-1:-1:-1;;;3757:806:33:o;4568:140::-;4626:5;4655:47;4696:4;4686:8;4682:19;4676:4;4655:47;:::i;4713:168::-;4786:9;;;4817;;4834:15;;;4828:22;;4814:37;4804:71;;4855:18;;:::i;5380:548::-;5492:4;5521:2;5550;5539:9;5532:21;5582:6;5576:13;5625:6;5620:2;5609:9;5605:18;5598:34;5650:1;5660:140;5674:6;5671:1;5668:13;5660:140;;;5769:14;;;5765:23;;5759:30;5735:17;;;5754:2;5731:26;5724:66;5689:10;;5660:140;;;5664:3;5849:1;5844:2;5835:6;5824:9;5820:22;5816:31;5809:42;5919:2;5912;5908:7;5903:2;5895:6;5891:15;5887:29;5876:9;5872:45;5868:54;5860:62;;;;5380:548;;;;:::o;5933:297::-;6051:12;;6098:4;6087:16;;;6081:23;;6051:12;6116:16;;6113:111;;;-1:-1:-1;;6190:4:33;6186:17;;;;6183:1;6179:25;6175:38;6164:50;;5933:297;-1:-1:-1;5933:297:33:o;6488:125::-;6553:9;;;6574:10;;;6571:36;;;6587:18;;:::i;7150:182::-;-1:-1:-1;;;;;7257:10:33;;;7269;;;7253:27;;7292:11;;;7289:37;;;7306:18;;:::i;:::-;7289:37;7150:182;;;;:::o;7609:185::-;-1:-1:-1;;;;;7730:10:33;;;7718;;;7714:27;;7753:12;;;7750:38;;;7768:18;;:::i;7799:128::-;7866:9;;;7887:11;;;7884:37;;;7901:18;;:::i;7932:266::-;581:968:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
	},
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "initialOwner",
					"type": "address"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [],
			"name": "CheckpointUnorderedInsertion",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ECDSAInvalidSignature",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "length",
					"type": "uint256"
				}
			],
			"name": "ECDSAInvalidSignatureLength",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "s",
					"type": "bytes32"
				}
			],
			"name": "ECDSAInvalidSignatureS",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "increasedSupply",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "cap",
					"type": "uint256"
				}
			],
			"name": "ERC20ExceededSafeSupply",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "allowance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientAllowance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "balance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientBalance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "approver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidApprover",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "receiver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidReceiver",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSpender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "deadline",
					"type": "uint256"
				}
			],
			"name": "ERC2612ExpiredSignature",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "signer",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "ERC2612InvalidSigner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "maxLoan",
					"type": "uint256"
				}
			],
			"name": "ERC3156ExceededMaxLoan",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "receiver",
					"type": "address"
				}
			],
			"name": "ERC3156InvalidReceiver",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "token",
					"type": "address"
				}
			],
			"name": "ERC3156UnsupportedToken",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "timepoint",
					"type": "uint256"
				},
				{
					"internalType": "uint48",
					"name": "clock",
					"type": "uint48"
				}
			],
			"name": "ERC5805FutureLookup",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ERC6372InconsistentClock",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "EnforcedPause",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ExpectedPause",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "currentNonce",
					"type": "uint256"
				}
			],
			"name": "InvalidAccountNonce",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "InvalidShortString",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "OwnableInvalidOwner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "OwnableUnauthorizedAccount",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint8",
					"name": "bits",
					"type": "uint8"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "SafeCastOverflowedUintDowncast",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "str",
					"type": "string"
				}
			],
			"name": "StringTooLong",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "expiry",
					"type": "uint256"
				}
			],
			"name": "VotesExpiredSignature",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "delegator",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "fromDelegate",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "toDelegate",
					"type": "address"
				}
			],
			"name": "DelegateChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "delegate",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "previousVotes",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "newVotes",
					"type": "uint256"
				}
			],
			"name": "DelegateVotesChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [],
			"name": "EIP712DomainChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "Paused",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "Unpaused",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "CLOCK_MODE",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "DOMAIN_SEPARATOR",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "allowance",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "burn",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "burnFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "uint32",
					"name": "pos",
					"type": "uint32"
				}
			],
			"name": "checkpoints",
			"outputs": [
				{
					"components": [
						{
							"internalType": "uint48",
							"name": "_key",
							"type": "uint48"
						},
						{
							"internalType": "uint208",
							"name": "_value",
							"type": "uint208"
						}
					],
					"internalType": "struct Checkpoints.Checkpoint208",
					"name": "",
					"type": "tuple"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "clock",
			"outputs": [
				{
					"internalType": "uint48",
					"name": "",
					"type": "uint48"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "decimals",
			"outputs": [
				{
					"internalType": "uint8",
					"name": "",
					"type": "uint8"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "delegatee",
					"type": "address"
				}
			],
			"name": "delegate",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "delegatee",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "nonce",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "expiry",
					"type": "uint256"
				},
				{
					"internalType": "uint8",
					"name": "v",
					"type": "uint8"
				},
				{
					"internalType": "bytes32",
					"name": "r",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "s",
					"type": "bytes32"
				}
			],
			"name": "delegateBySig",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "delegates",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "eip712Domain",
			"outputs": [
				{
					"internalType": "bytes1",
					"name": "fields",
					"type": "bytes1"
				},
				{
					"internalType": "string",
					"name": "name",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "version",
					"type": "string"
				},
				{
					"internalType": "uint256",
					"name": "chainId",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "verifyingContract",
					"type": "address"
				},
				{
					"internalType": "bytes32",
					"name": "salt",
					"type": "bytes32"
				},
				{
					"internalType": "uint256[]",
					"name": "extensions",
					"type": "uint256[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "token",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "flashFee",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "contract IERC3156FlashBorrower",
					"name": "receiver",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "token",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				},
				{
					"internalType": "bytes",
					"name": "data",
					"type": "bytes"
				}
			],
			"name": "flashLoan",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "timepoint",
					"type": "uint256"
				}
			],
			"name": "getPastTotalSupply",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "timepoint",
					"type": "uint256"
				}
			],
			"name": "getPastVotes",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "getVotes",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "token",
					"type": "address"
				}
			],
			"name": "maxFlashLoan",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "mint",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "nonces",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "numCheckpoints",
			"outputs": [
				{
					"internalType": "uint32",
					"name": "",
					"type": "uint32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "pause",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "paused",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "deadline",
					"type": "uint256"
				},
				{
					"internalType": "uint8",
					"name": "v",
					"type": "uint8"
				},
				{
					"internalType": "bytes32",
					"name": "r",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "s",
					"type": "bytes32"
				}
			],
			"name": "permit",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "renounceOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "totalSupply",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transfer",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "unpause",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 1047,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_balances",
				"offset": 0,
				"slot": "0",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 1053,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_allowances",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
			},
			{
				"astId": 1055,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_totalSupply",
				"offset": 0,
				"slot": "2",
				"type": "t_uint256"
			},
			{
				"astId": 1057,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_name",
				"offset": 0,
				"slot": "3",
				"type": "t_string_storage"
			},
			{
				"astId": 1059,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_symbol",
				"offset": 0,
				"slot": "4",
				"type": "t_string_storage"
			},
			{
				"astId": 2388,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_paused",
				"offset": 0,
				"slot": "5",
				"type": "t_bool"
			},
			{
				"astId": 8,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_owner",
				"offset": 1,
				"slot": "5",
				"type": "t_address"
			},
			{
				"astId": 3463,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_nameFallback",
				"offset": 0,
				"slot": "6",
				"type": "t_string_storage"
			},
			{
				"astId": 3465,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_versionFallback",
				"offset": 0,
				"slot": "7",
				"type": "t_string_storage"
			},
			{
				"astId": 2325,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_nonces",
				"offset": 0,
				"slot": "8",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 270,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_delegatee",
				"offset": 0,
				"slot": "9",
				"type": "t_mapping(t_address,t_address)"
			},
			{
				"astId": 275,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_delegateCheckpoints",
				"offset": 0,
				"slot": "10",
				"type": "t_mapping(t_address,t_struct(Trace208)7175_storage)"
			},
			{
				"astId": 278,
				"contract": "contract-6262427532.sol:SumaSamms",
				"label": "_totalCheckpoints",
				"offset": 0,
				"slot": "11",
				"type": "t_struct(Trace208)7175_storage"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_array(t_struct(Checkpoint208)7180_storage)dyn_storage": {
				"base": "t_struct(Checkpoint208)7180_storage",
				"encoding": "dynamic_array",
				"label": "struct Checkpoints.Checkpoint208[]",
				"numberOfBytes": "32"
			},
			"t_bool": {
				"encoding": "inplace",
				"label": "bool",
				"numberOfBytes": "1"
			},
			"t_mapping(t_address,t_address)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => address)",
				"numberOfBytes": "32",
				"value": "t_address"
			},
			"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => mapping(address => uint256))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_uint256)"
			},
			"t_mapping(t_address,t_struct(Trace208)7175_storage)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => struct Checkpoints.Trace208)",
				"numberOfBytes": "32",
				"value": "t_struct(Trace208)7175_storage"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_struct(Checkpoint208)7180_storage": {
				"encoding": "inplace",
				"label": "struct Checkpoints.Checkpoint208",
				"members": [
					{
						"astId": 7177,
						"contract": "contract-6262427532.sol:SumaSamms",
						"label": "_key",
						"offset": 0,
						"slot": "0",
						"type": "t_uint48"
					},
					{
						"astId": 7179,
						"contract": "contract-6262427532.sol:SumaSamms",
						"label": "_value",
						"offset": 6,
						"slot": "0",
						"type": "t_uint208"
					}
				],
				"numberOfBytes": "32"
			},
			"t_struct(Trace208)7175_storage": {
				"encoding": "inplace",
				"label": "struct Checkpoints.Trace208",
				"members": [
					{
						"astId": 7174,
						"contract": "contract-6262427532.sol:SumaSamms",
						"label": "_checkpoints",
						"offset": 0,
						"slot": "0",
						"type": "t_array(t_struct(Checkpoint208)7180_storage)dyn_storage"
					}
				],
				"numberOfBytes": "32"
			},
			"t_uint208": {
				"encoding": "inplace",
				"label": "uint208",
				"numberOfBytes": "26"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			},
			"t_uint48": {
				"encoding": "inplace",
				"label": "uint48",
				"numberOfBytes": "6"
			}
		}
	},
	"web3Deploy": "var initialOwner = /* var of type address here */ ;\nvar sumasammsContract = new web3.eth.Contract([{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededSafeSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLoan\",\"type\":\"uint256\"}],\"name\":\"ERC3156ExceededMaxLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC3156InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ERC3156UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"_key\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"_value\",\"type\":\"uint208\"}],\"internalType\":\"struct Checkpoints.Checkpoint208\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]);\nvar sumasamms = sumasammsContract.deploy({\n     data: '0x61016060405234801562000011575f80fd5b506040516200324e3803806200324e8339810160408190526200003491620009bf565b6040518060400160405280600981526020016853756d6153616d6d7360b81b81525080604051806040016040528060018152602001603160f81b815250836040518060400160405280600981526020016853756d6153616d6d7360b81b815250604051806040016040528060048152602001635353415360e01b8152508160039081620000c2919062000a84565b506004620000d1828262000a84565b50506005805460ff19169055506001600160a01b0381166200010d57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6200011881620001fb565b506200012682600662000254565b610120526200013781600762000254565b61014052815160208084019190912060e052815190820120610100524660a052620001c460e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c05250620001f433620001e16012600a62000c5d565b620001ee90600162000c6d565b6200028c565b5062000d72565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f60208351101562000273576200026b83620002c8565b905062000286565b8162000280848262000a84565b5060ff90505b92915050565b6001600160a01b038216620002b75760405163ec442f0560e01b81525f600482015260240162000104565b620002c45f83836200030a565b5050565b5f80829050601f81511115620002f5578260405163305a27a960e01b815260040162000104919062000c87565b8051620003028262000cd5565b179392505050565b620003178383836200031c565b505050565b620003298383836200038a565b6001600160a01b0383166200037d575f6200034360025490565b90506001600160d01b03808211156200037a57604051630e58ae9360e11b8152600481018390526024810182905260440162000104565b50505b62000317838383620003a1565b6200039462000438565b620003178383836200045f565b6001600160a01b038316620003d657620003d3600b62000cb26200058e60201b17620003cd84620005a2565b620005db565b50505b6001600160a01b038216620004055762000402600b62000cbd6200061760201b17620003cd84620005a2565b50505b6001600160a01b038381165f90815260096020526040808220548584168352912054620003179291821691168362000624565b60055460ff16156200045d5760405163d93c066560e01b815260040160405180910390fd5b565b6001600160a01b0383166200048d578060025f82825462000481919062000cf9565b90915550620004ff9050565b6001600160a01b0383165f9081526020819052604090205481811015620004e15760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640162000104565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166200051d576002805482900390556200053b565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200058191815260200190565b60405180910390a3505050565b5f6200059b828462000d0f565b9392505050565b5f6001600160d01b03821115620005d7576040516306dfcc6560e41b815260d060048201526024810183905260440162000104565b5090565b5f806200060a620005eb62000786565b62000601620005fa8862000796565b868860201c565b879190620007e2565b915091505b935093915050565b5f6200059b828462000d39565b816001600160a01b0316836001600160a01b0316141580156200064657505f81115b1562000317576001600160a01b03831615620006e7576001600160a01b0383165f908152600a602090815260408220829162000693919062000617901b62000cbd17620003cd86620005a2565b6001600160d01b031691506001600160d01b03169150846001600160a01b03165f805160206200322e8339815191528383604051620006dc929190918252602082015260400190565b60405180910390a250505b6001600160a01b0382161562000317576001600160a01b0382165f908152600a60209081526040822082916200072e91906200058e901b62000cb217620003cd86620005a2565b6001600160d01b031691506001600160d01b03169150836001600160a01b03165f805160206200322e833981519152838360405162000777929190918252602082015260400190565b60405180910390a25050505050565b5f62000791620007f1565b905090565b80545f908015620007da57620007c083620007b360018462000d5c565b5f91825260209091200190565b54660100000000000090046001600160d01b03166200059b565b5f9392505050565b5f806200060a858585620007fd565b5f62000791436200098b565b82545f90819080156200092d575f6200081d87620007b360018562000d5c565b60408051808201909152905465ffffffffffff80821680845266010000000000009092046001600160d01b0316602084015291925090871610156200087557604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff808816911603620008c957846200089c88620007b360018662000d5c565b80546001600160d01b039290921666010000000000000265ffffffffffff9092169190911790556200091c565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d555f8d815291909120945191519092166601000000000000029216919091179101555b6020015192508391506200060f9050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a81529182209551925190931666010000000000000291909316179201919091559050816200060f565b5f65ffffffffffff821115620005d7576040516306dfcc6560e41b8152603060048201526024810183905260440162000104565b5f60208284031215620009d0575f80fd5b81516001600160a01b03811681146200059b575f80fd5b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168062000a1057607f821691505b60208210810362000a2f57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200031757805f5260205f20601f840160051c8101602085101562000a5c5750805b601f840160051c820191505b8181101562000a7d575f815560010162000a68565b5050505050565b81516001600160401b0381111562000aa05762000aa0620009e7565b62000ab88162000ab18454620009fb565b8462000a35565b602080601f83116001811462000aee575f841562000ad65750858301515b5f19600386901b1c1916600185901b17855562000b48565b5f85815260208120601f198616915b8281101562000b1e5788860151825594840194600190910190840162000afd565b508582101562000b3c57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111562000ba457815f190482111562000b885762000b8862000b50565b8085161562000b9657918102915b93841c939080029062000b69565b509250929050565b5f8262000bbc5750600162000286565b8162000bca57505f62000286565b816001811462000be3576002811462000bee5762000c0e565b600191505062000286565b60ff84111562000c025762000c0262000b50565b50506001821b62000286565b5060208310610133831016604e8410600b841016171562000c33575081810a62000286565b62000c3f838362000b64565b805f190482111562000c555762000c5562000b50565b029392505050565b5f6200059b60ff84168362000bac565b808202811582820484141762000286576200028662000b50565b5f602080835283518060208501525f5b8181101562000cb55785810183015185820160400152820162000c97565b505f604082860101526040601f19601f8301168501019250505092915050565b8051602080830151919081101562000a2f575f1960209190910360031b1b16919050565b8082018082111562000286576200028662000b50565b6001600160d01b0381811683821601908082111562000d325762000d3262000b50565b5092915050565b6001600160d01b0382811682821603908082111562000d325762000d3262000b50565b8181038181111562000286576200028662000b50565b60805160a05160c05160e05161010051610120516101405161246a62000dc45f395f61123101525f61120401525f610e8b01525f610e6301525f610dbe01525f610de801525f610e12015261246a5ff3fe608060405234801561000f575f80fd5b5060043610610208575f3560e01c806370a082311161011f57806395d89b41116100a9578063d505accf11610079578063d505accf14610485578063d9d98ce414610498578063dd62ed3e146104ab578063f1127ed8146104e3578063f2fde38b14610522575f80fd5b806395d89b41146104445780639ab24eb01461044c578063a9059cbb1461045f578063c3cda52014610472575f80fd5b80638456cb59116100ef5780638456cb59146103d957806384b0196e146103e15780638da5cb5b146103fc5780638e539e8c1461041257806391ddadf414610425575f80fd5b806370a0823114610383578063715018a6146103ab57806379cc6790146103b35780637ecebe00146103c6575f80fd5b806340c10f19116101a05780635c19a95c116101705780635c19a95c146103175780635c975abb1461032a5780635cffe9de14610335578063613255ab146103485780636fcfff451461035b575f80fd5b806340c10f19146102a657806342966c68146102b95780634bf5d7e9146102cc578063587cde1e146102d4575f80fd5b8063313ce567116101db578063313ce567146102725780633644e515146102815780633a46b1a8146102895780633f4ba83a1461029c575f80fd5b806306fdde031461020c578063095ea7b31461022a57806318160ddd1461024d57806323b872dd1461025f575b5f80fd5b610214610535565b6040516102219190611f82565b60405180910390f35b61023d610238366004611fa8565b6105c5565b6040519015158152602001610221565b6002545b604051908152602001610221565b61023d61026d366004611fd2565b6105de565b60405160128152602001610221565b610251610601565b610251610297366004611fa8565b61060f565b6102a4610693565b005b6102a46102b4366004611fa8565b6106a5565b6102a46102c7366004612010565b6106bb565b6102146106c8565b6102ff6102e2366004612027565b6001600160a01b039081165f908152600960205260409020541690565b6040516001600160a01b039091168152602001610221565b6102a4610325366004612027565b610740565b60055460ff1661023d565b61023d610343366004612042565b61074b565b610251610356366004612027565b6108bd565b61036e610369366004612027565b6108e2565b60405163ffffffff9091168152602001610221565b610251610391366004612027565b6001600160a01b03165f9081526020819052604090205490565b6102a46108ec565b6102a46103c1366004611fa8565b6108fd565b6102516103d4366004612027565b610912565b6102a461091c565b6103e961092c565b60405161022197969594939291906120d9565b60055461010090046001600160a01b03166102ff565b610251610420366004612010565b61096e565b61042d6109d7565b60405165ffffffffffff9091168152602001610221565b6102146109e0565b61025161045a366004612027565b6109ef565b61023d61046d366004611fa8565b610a1e565b6102a4610480366004612185565b610a2b565b6102a46104933660046121db565b610ae7565b6102516104a6366004611fa8565b610c1d565b6102516104b9366004612244565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6104f66104f136600461227b565b610c5b565b60408051825165ffffffffffff1681526020928301516001600160d01b03169281019290925201610221565b6102a4610530366004612027565b610c78565b606060038054610544906122af565b80601f0160208091040260200160405190810160405280929190818152602001828054610570906122af565b80156105bb5780601f10610592576101008083540402835291602001916105bb565b820191905f5260205f20905b81548152906001019060200180831161059e57829003601f168201915b5050505050905090565b5f336105d2818585610cc8565b60019150505b92915050565b5f336105eb858285610cda565b6105f6858585610d55565b506001949350505050565b5f61060a610db2565b905090565b5f806106196109d7565b90508065ffffffffffff16831061065957604051637669fc0f60e11b81526004810184905265ffffffffffff821660248201526044015b60405180910390fd5b61068261066584610edb565b6001600160a01b0386165f908152600a6020526040902090610f11565b6001600160d01b0316949350505050565b61069b610fc1565b6106a3610ff4565b565b6106ad610fc1565b6106b78282611046565b5050565b6106c5338261107a565b50565b60606106d26110ae565b65ffffffffffff166106e26109d7565b65ffffffffffff1614610708576040516301bfc1c560e61b815260040160405180910390fd5b5060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b336106b781836110b8565b5f80610756866108bd565b90508085111561077c5760405163fd9a760960e01b815260048101829052602401610650565b5f6107878787610c1d565b90506107938887611046565b6040516323e30c8b60e01b81527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038a16906323e30c8b906107eb9033908c908c9088908d908d906004016122e7565b6020604051808303815f875af1158015610807573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061082b9190612341565b146108535760405162678c5b60e81b81526001600160a01b0389166004820152602401610650565b5f6108688930610863858b61236c565b610cda565b81158061087c57506001600160a01b038116155b15610899576108948961088f848a61236c565b61107a565b6108ae565b6108a3898861107a565b6108ae898284610d55565b50600198975050505050505050565b5f6001600160a01b03821630146108d4575f6105d8565b6002546105d8905f1961237f565b5f6105d882611129565b6108f4610fc1565b6106a35f61114a565b610908823383610cda565b6106b7828261107a565b5f6105d8826111a3565b610924610fc1565b6106a36111c0565b5f6060805f805f606061093d6111fd565b61094561122a565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b5f806109786109d7565b90508065ffffffffffff1683106109b357604051637669fc0f60e11b81526004810184905265ffffffffffff82166024820152604401610650565b6109c76109bf84610edb565b600b90610f11565b6001600160d01b03169392505050565b5f61060a6110ae565b606060048054610544906122af565b6001600160a01b0381165f908152600a60205260408120610a0f90611257565b6001600160d01b031692915050565b5f336105d2818585610d55565b83421115610a4f57604051632341d78760e11b815260048101859052602401610650565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590525f90610ac890610ac09060a00160405160208183030381529060405280519060200120611286565b8585856112b2565b9050610ad481876112de565b610ade81886110b8565b50505050505050565b83421115610b0b5760405163313c898160e11b815260048101859052602401610650565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b568c6001600160a01b03165f90815260086020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f610bb082611286565b90505f610bbf828787876112b2565b9050896001600160a01b0316816001600160a01b031614610c06576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610650565b610c118a8a8a610cc8565b50505050505050505050565b5f6001600160a01b0383163014610c5257604051635ad3edc960e11b81526001600160a01b0384166004820152602401610650565b5f5b9392505050565b604080518082019091525f8082526020820152610c548383611330565b610c80610fc1565b6001600160a01b038116610ca957604051631e4fbdf760e01b81525f6004820152602401610650565b6106c58161114a565b5f610c548284612392565b5f610c5482846123b9565b610cd58383836001611364565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198114610d4f5781811015610d4157604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610650565b610d4f84848484035f611364565b50505050565b6001600160a01b038316610d7e57604051634b637e8f60e11b81525f6004820152602401610650565b6001600160a01b038216610da75760405163ec442f0560e01b81525f6004820152602401610650565b610cd5838383611436565b5f306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610e0a57507f000000000000000000000000000000000000000000000000000000000000000046145b15610e3457507f000000000000000000000000000000000000000000000000000000000000000090565b61060a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b5f65ffffffffffff821115610f0d576040516306dfcc6560e41b81526030600482015260248101839052604401610650565b5090565b81545f9081816005811115610f6d575f610f2a84611441565b610f34908561237f565b5f8881526020902090915081015465ffffffffffff9081169087161015610f5d57809150610f6b565b610f6881600161236c565b92505b505b5f610f7a87878585611525565b90508015610fb457610f9e87610f9160018461237f565b5f91825260209091200190565b54600160301b90046001600160d01b0316610fb6565b5f5b979650505050505050565b6005546001600160a01b036101009091041633146106a35760405163118cdaa760e01b8152336004820152602401610650565b610ffc611584565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03821661106f5760405163ec442f0560e01b81525f6004820152602401610650565b6106b75f8383611436565b6001600160a01b0382166110a357604051634b637e8f60e11b81525f6004820152602401610650565b6106b7825f83611436565b5f61060a43610edb565b6001600160a01b038281165f8181526009602052604080822080548686166001600160a01b0319821681179092559151919094169392849290917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610cd58183611124866115a7565b6115c4565b6001600160a01b0381165f908152600a60205260408120546105d89061172d565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0381165f908152600860205260408120546105d8565b6111c861175d565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110293390565b606061060a7f00000000000000000000000000000000000000000000000000000000000000006006611781565b606061060a7f00000000000000000000000000000000000000000000000000000000000000006007611781565b80545f908015610c525761127083610f9160018461237f565b54600160301b90046001600160d01b0316610c54565b5f6105d8611292610db2565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f806112c28888888861182a565b9250925092506112d282826118f2565b50909695505050505050565b6001600160a01b0382165f908152600860205260409020805460018101909155818114610cd5576040516301d4b62360e61b81526001600160a01b038416600482015260248101829052604401610650565b604080518082019091525f80825260208201526001600160a01b0383165f908152600a60205260409020610c5490836119aa565b6001600160a01b03841661138d5760405163e602df0560e01b81525f6004820152602401610650565b6001600160a01b0383166113b657604051634a1406b160e11b81525f6004820152602401610650565b6001600160a01b038085165f9081526001602090815260408083209387168352929052208290558015610d4f57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161142891815260200190565b60405180910390a350505050565b610cd5838383611a17565b5f815f0361145057505f919050565b5f600161145c84611a7d565b901c6001901b90506001818481611475576114756123d9565b048201901c9050600181848161148d5761148d6123d9565b048201901c905060018184816114a5576114a56123d9565b048201901c905060018184816114bd576114bd6123d9565b048201901c905060018184816114d5576114d56123d9565b048201901c905060018184816114ed576114ed6123d9565b048201901c90506001818481611505576115056123d9565b048201901c9050610c548182858161151f5761151f6123d9565b04611b10565b5f5b8183101561157c575f61153a8484611b25565b5f8781526020902090915065ffffffffffff86169082015465ffffffffffff16111561156857809250611576565b61157381600161236c565b93505b50611527565b509392505050565b60055460ff166106a357604051638dfc202b60e01b815260040160405180910390fd5b6001600160a01b0381165f908152602081905260408120546105d8565b816001600160a01b0316836001600160a01b0316141580156115e557505f81115b15610cd5576001600160a01b0383161561168c576001600160a01b0383165f908152600a60205260408120819061162790610cbd61162286611b3f565b611b72565b6001600160d01b031691506001600160d01b03169150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611681929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610cd5576001600160a01b0382165f908152600a6020526040812081906116c490610cb261162286611b3f565b6001600160d01b031691506001600160d01b03169150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405161171e929190918252602082015260400190565b60405180910390a25050505050565b5f63ffffffff821115610f0d576040516306dfcc6560e41b81526020600482015260248101839052604401610650565b60055460ff16156106a35760405163d93c066560e01b815260040160405180910390fd5b606060ff831461179b5761179483611baa565b90506105d8565b8180546117a7906122af565b80601f01602080910402602001604051908101604052809291908181526020018280546117d3906122af565b801561181e5780601f106117f55761010080835404028352916020019161181e565b820191905f5260205f20905b81548152906001019060200180831161180157829003601f168201915b505050505090506105d8565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561186357505f915060039050826118e8565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156118b4573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b0381166118df57505f9250600191508290506118e8565b92505f91508190505b9450945094915050565b5f826003811115611905576119056123ed565b0361190e575050565b6001826003811115611922576119226123ed565b036119405760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611954576119546123ed565b036119755760405163fce698f760e01b815260048101829052602401610650565b6003826003811115611989576119896123ed565b036106b7576040516335e2f38360e21b815260048101829052602401610650565b604080518082019091525f8082526020820152825f018263ffffffff16815481106119d7576119d7612401565b5f9182526020918290206040805180820190915291015465ffffffffffff81168252600160301b90046001600160d01b0316918101919091529392505050565b611a22838383611be7565b6001600160a01b038316611a72575f611a3a60025490565b90506001600160d01b0380821115611a6f57604051630e58ae9360e11b81526004810183905260248101829052604401610650565b50505b610cd5838383611bfa565b5f80608083901c15611a9157608092831c92015b604083901c15611aa357604092831c92015b602083901c15611ab557602092831c92015b601083901c15611ac757601092831c92015b600883901c15611ad957600892831c92015b600483901c15611aeb57600492831c92015b600283901c15611afd57600292831c92015b600183901c156105d85760010192915050565b5f818310611b1e5781610c54565b5090919050565b5f611b336002848418612415565b610c549084841661236c565b5f6001600160d01b03821115610f0d576040516306dfcc6560e41b815260d0600482015260248101839052604401610650565b5f80611b9d611b7f6109d7565b611b95611b8b88611257565b868863ffffffff16565b879190611c6f565b915091505b935093915050565b60605f611bb683611c7c565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b611bef61175d565b610cd5838383611ca3565b6001600160a01b038316611c1c57611c19600b610cb261162284611b3f565b50505b6001600160a01b038216611c3e57611c3b600b610cbd61162284611b3f565b50505b6001600160a01b038381165f90815260096020526040808220548584168352912054610cd5929182169116836115c4565b5f80611b9d858585611dc9565b5f60ff8216601f8111156105d857604051632cd44ac360e21b815260040160405180910390fd5b6001600160a01b038316611ccd578060025f828254611cc2919061236c565b90915550611d3d9050565b6001600160a01b0383165f9081526020819052604090205481811015611d1f5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610650565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216611d5957600280548290039055611d77565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611dbc91815260200190565b60405180910390a3505050565b82545f9081908015611ee5575f611de587610f9160018561237f565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b031660208401529192509087161015611e3957604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff808816911603611e855784611e5c88610f9160018661237f565b80546001600160d01b0392909216600160301b0265ffffffffffff909216919091179055611ed5565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d555f8d81529190912094519151909216600160301b029216919091179101555b602001519250839150611ba29050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a815291822095519251909316600160301b029190931617920191909155905081611ba2565b5f81518084525f5b81811015611f6357602081850181015186830182015201611f47565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610c546020830184611f3f565b6001600160a01b03811681146106c5575f80fd5b5f8060408385031215611fb9575f80fd5b8235611fc481611f94565b946020939093013593505050565b5f805f60608486031215611fe4575f80fd5b8335611fef81611f94565b92506020840135611fff81611f94565b929592945050506040919091013590565b5f60208284031215612020575f80fd5b5035919050565b5f60208284031215612037575f80fd5b8135610c5481611f94565b5f805f805f60808688031215612056575f80fd5b853561206181611f94565b9450602086013561207181611f94565b935060408601359250606086013567ffffffffffffffff80821115612094575f80fd5b818801915088601f8301126120a7575f80fd5b8135818111156120b5575f80fd5b8960208285010111156120c6575f80fd5b9699959850939650602001949392505050565b60ff60f81b881681525f602060e060208401526120f960e084018a611f3f565b838103604085015261210b818a611f3f565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825260208088019350909101905f5b8181101561215e57835183529284019291840191600101612142565b50909c9b505050505050505050505050565b803560ff81168114612180575f80fd5b919050565b5f805f805f8060c0878903121561219a575f80fd5b86356121a581611f94565b955060208701359450604087013593506121c160608801612170565b92506080870135915060a087013590509295509295509295565b5f805f805f805f60e0888a0312156121f1575f80fd5b87356121fc81611f94565b9650602088013561220c81611f94565b9550604088013594506060880135935061222860808901612170565b925060a0880135915060c0880135905092959891949750929550565b5f8060408385031215612255575f80fd5b823561226081611f94565b9150602083013561227081611f94565b809150509250929050565b5f806040838503121561228c575f80fd5b823561229781611f94565b9150602083013563ffffffff81168114612270575f80fd5b600181811c908216806122c357607f821691505b6020821081036122e157634e487b7160e01b5f52602260045260245ffd5b50919050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290525f828460c08401375f60c0848401015260c0601f19601f8501168301019050979650505050505050565b5f60208284031215612351575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156105d8576105d8612358565b818103818111156105d8576105d8612358565b6001600160d01b038181168382160190808211156123b2576123b2612358565b5092915050565b6001600160d01b038281168282160390808211156123b2576123b2612358565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f8261242f57634e487b7160e01b5f52601260045260245ffd5b50049056fea2646970667358221220d0fd295cce8691226fd804a3f9c21cf8904112a09c97bc80f3d89c67f522e07b64736f6c63430008160033dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724', \n     arguments: [\n          initialOwner,\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"4bf5d7e9": "CLOCK_MODE()",
		"3644e515": "DOMAIN_SEPARATOR()",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"42966c68": "burn(uint256)",
		"79cc6790": "burnFrom(address,uint256)",
		"f1127ed8": "checkpoints(address,uint32)",
		"91ddadf4": "clock()",
		"313ce567": "decimals()",
		"5c19a95c": "delegate(address)",
		"c3cda520": "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
		"587cde1e": "delegates(address)",
		"84b0196e": "eip712Domain()",
		"d9d98ce4": "flashFee(address,uint256)",
		"5cffe9de": "flashLoan(address,address,uint256,bytes)",
		"8e539e8c": "getPastTotalSupply(uint256)",
		"3a46b1a8": "getPastVotes(address,uint256)",
		"9ab24eb0": "getVotes(address)",
		"613255ab": "maxFlashLoan(address)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"7ecebe00": "nonces(address)",
		"6fcfff45": "numCheckpoints(address)",
		"8da5cb5b": "owner()",
		"8456cb59": "pause()",
		"5c975abb": "paused()",
		"d505accf": "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
		"715018a6": "renounceOwnership()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"f2fde38b": "transferOwnership(address)",
		"3f4ba83a": "unpause()"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "1864400",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"CLOCK_MODE()": "infinite",
			"DOMAIN_SEPARATOR()": "infinite",
			"allowance(address,address)": "infinite",
			"approve(address,uint256)": "24775",
			"balanceOf(address)": "2577",
			"burn(uint256)": "infinite",
			"burnFrom(address,uint256)": "infinite",
			"checkpoints(address,uint32)": "infinite",
			"clock()": "infinite",
			"decimals()": "222",
			"delegate(address)": "infinite",
			"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
			"delegates(address)": "2670",
			"eip712Domain()": "infinite",
			"flashFee(address,uint256)": "512",
			"flashLoan(address,address,uint256,bytes)": "infinite",
			"getPastTotalSupply(uint256)": "infinite",
			"getPastVotes(address,uint256)": "infinite",
			"getVotes(address)": "infinite",
			"maxFlashLoan(address)": "infinite",
			"mint(address,uint256)": "infinite",
			"name()": "infinite",
			"nonces(address)": "infinite",
			"numCheckpoints(address)": "infinite",
			"owner()": "2430",
			"pause()": "infinite",
			"paused()": "2370",
			"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
			"renounceOwnership()": "infinite",
			"symbol()": "infinite",
			"totalSupply()": "2371",
			"transfer(address,uint256)": "infinite",
			"transferFrom(address,address,uint256)": "infinite",
			"transferOwnership(address)": "infinite",
			"unpause()": "infinite"
		},
		"Internal": {
			"_update(address,address,uint256)": "infinite"
		}
	},
	"devdoc": {
		"errors": {
			"CheckpointUnorderedInsertion()": [
				{
					"details": "A value was attempted to be inserted on a past checkpoint."
				}
			],
			"ECDSAInvalidSignature()": [
				{
					"details": "The signature derives the `address(0)`."
				}
			],
			"ECDSAInvalidSignatureLength(uint256)": [
				{
					"details": "The signature has an invalid length."
				}
			],
			"ECDSAInvalidSignatureS(bytes32)": [
				{
					"details": "The signature has an S value that is in the upper half order."
				}
			],
			"ERC20ExceededSafeSupply(uint256,uint256)": [
				{
					"details": "Total supply cap has been exceeded, introducing a risk of votes overflowing."
				}
			],
			"ERC20InsufficientAllowance(address,uint256,uint256)": [
				{
					"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
					"params": {
						"allowance": "Amount of tokens a `spender` is allowed to operate with.",
						"needed": "Minimum amount required to perform a transfer.",
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC20InsufficientBalance(address,uint256,uint256)": [
				{
					"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
					"params": {
						"balance": "Current balance for the interacting account.",
						"needed": "Minimum amount required to perform a transfer.",
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidApprover(address)": [
				{
					"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
					"params": {
						"approver": "Address initiating an approval operation."
					}
				}
			],
			"ERC20InvalidReceiver(address)": [
				{
					"details": "Indicates a failure with the token `receiver`. Used in transfers.",
					"params": {
						"receiver": "Address to which tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSender(address)": [
				{
					"details": "Indicates a failure with the token `sender`. Used in transfers.",
					"params": {
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSpender(address)": [
				{
					"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
					"params": {
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC2612ExpiredSignature(uint256)": [
				{
					"details": "Permit deadline has expired."
				}
			],
			"ERC2612InvalidSigner(address,address)": [
				{
					"details": "Mismatched signature."
				}
			],
			"ERC3156ExceededMaxLoan(uint256)": [
				{
					"details": "The requested loan exceeds the max loan value for `token`."
				}
			],
			"ERC3156InvalidReceiver(address)": [
				{
					"details": "The receiver of a flashloan is not a valid {onFlashLoan} implementer."
				}
			],
			"ERC3156UnsupportedToken(address)": [
				{
					"details": "The loan token is not valid."
				}
			],
			"ERC5805FutureLookup(uint256,uint48)": [
				{
					"details": "Lookup to future votes is not available."
				}
			],
			"ERC6372InconsistentClock()": [
				{
					"details": "The clock was incorrectly modified."
				}
			],
			"EnforcedPause()": [
				{
					"details": "The operation failed because the contract is paused."
				}
			],
			"ExpectedPause()": [
				{
					"details": "The operation failed because the contract is not paused."
				}
			],
			"InvalidAccountNonce(address,uint256)": [
				{
					"details": "The nonce used for an `account` is not the expected current nonce."
				}
			],
			"OwnableInvalidOwner(address)": [
				{
					"details": "The owner is not a valid owner account. (eg. `address(0)`)"
				}
			],
			"OwnableUnauthorizedAccount(address)": [
				{
					"details": "The caller account is not authorized to perform an operation."
				}
			],
			"SafeCastOverflowedUintDowncast(uint8,uint256)": [
				{
					"details": "Value doesn't fit in an uint of `bits` size."
				}
			],
			"VotesExpiredSignature(uint256)": [
				{
					"details": "The signature used has expired."
				}
			]
		},
		"events": {
			"Approval(address,address,uint256)": {
				"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
			},
			"DelegateChanged(address,address,address)": {
				"details": "Emitted when an account changes their delegate."
			},
			"DelegateVotesChanged(address,uint256,uint256)": {
				"details": "Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units."
			},
			"EIP712DomainChanged()": {
				"details": "MAY be emitted to signal that the domain could have changed."
			},
			"Paused(address)": {
				"details": "Emitted when the pause is triggered by `account`."
			},
			"Transfer(address,address,uint256)": {
				"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
			},
			"Unpaused(address)": {
				"details": "Emitted when the pause is lifted by `account`."
			}
		},
		"kind": "dev",
		"methods": {
			"CLOCK_MODE()": {
				"details": "Machine-readable description of the clock as specified in EIP-6372."
			},
			"DOMAIN_SEPARATOR()": {
				"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
			},
			"allowance(address,address)": {
				"details": "See {IERC20-allowance}."
			},
			"approve(address,uint256)": {
				"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
			},
			"balanceOf(address)": {
				"details": "See {IERC20-balanceOf}."
			},
			"burn(uint256)": {
				"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
			},
			"burnFrom(address,uint256)": {
				"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
			},
			"checkpoints(address,uint32)": {
				"details": "Get the `pos`-th checkpoint for `account`."
			},
			"clock()": {
				"details": "Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match."
			},
			"decimals()": {
				"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
			},
			"delegate(address)": {
				"details": "Delegates votes from the sender to `delegatee`."
			},
			"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
				"details": "Delegates votes from signer to `delegatee`."
			},
			"delegates(address)": {
				"details": "Returns the delegate that `account` has chosen."
			},
			"eip712Domain()": {
				"details": "See {IERC-5267}."
			},
			"flashFee(address,uint256)": {
				"details": "Returns the fee applied when doing flash loans. This function calls the {_flashFee} function which returns the fee applied when doing flash loans.",
				"params": {
					"token": "The token to be flash loaned.",
					"value": "The amount of tokens to be loaned."
				},
				"returns": {
					"_0": "The fees applied to the corresponding flash loan."
				}
			},
			"flashLoan(address,address,uint256,bytes)": {
				"details": "Performs a flash loan. New tokens are minted and sent to the `receiver`, who is required to implement the {IERC3156FlashBorrower} interface. By the end of the flash loan, the receiver is expected to own value + fee tokens and have them approved back to the token contract itself so they can be burned.",
				"params": {
					"data": "An arbitrary datafield that is passed to the receiver.",
					"receiver": "The receiver of the flash loan. Should implement the {IERC3156FlashBorrower-onFlashLoan} interface.",
					"token": "The token to be flash loaned. Only `address(this)` is supported.",
					"value": "The amount of tokens to be loaned."
				},
				"returns": {
					"_0": "`true` if the flash loan was successful."
				}
			},
			"getPastTotalSupply(uint256)": {
				"details": "Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined."
			},
			"getPastVotes(address,uint256)": {
				"details": "Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined."
			},
			"getVotes(address)": {
				"details": "Returns the current amount of votes that `account` has."
			},
			"maxFlashLoan(address)": {
				"details": "Returns the maximum amount of tokens available for loan.",
				"params": {
					"token": "The address of the token that is requested."
				},
				"returns": {
					"_0": "The amount of token that can be loaned. NOTE: This function does not consider any form of supply cap, so in case it's used in a token with a cap like {ERC20Capped}, make sure to override this function to integrate the cap instead of `type(uint256).max`."
				}
			},
			"name()": {
				"details": "Returns the name of the token."
			},
			"numCheckpoints(address)": {
				"details": "Get number of checkpoints for `account`."
			},
			"owner()": {
				"details": "Returns the address of the current owner."
			},
			"paused()": {
				"details": "Returns true if the contract is paused, and false otherwise."
			},
			"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
				"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
			},
			"renounceOwnership()": {
				"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
			},
			"symbol()": {
				"details": "Returns the symbol of the token, usually a shorter version of the name."
			},
			"totalSupply()": {
				"details": "See {IERC20-totalSupply}."
			},
			"transfer(address,uint256)": {
				"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
			},
			"transferFrom(address,address,uint256)": {
				"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
			},
			"transferOwnership(address)": {
				"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@CLOCK_MODE_319": {
				"entryPoint": 1736,
				"id": 319,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@DOMAIN_SEPARATOR_2094": {
				"entryPoint": 1537,
				"id": 2094,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_EIP712Name_3640": {
				"entryPoint": 4605,
				"id": 3640,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_EIP712Version_3652": {
				"entryPoint": 4650,
				"id": 3652,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_add_754": {
				"entryPoint": 3250,
				"id": 754,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@_approve_1430": {
				"entryPoint": 3272,
				"id": 1430,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_approve_1490": {
				"entryPoint": 4964,
				"id": 1490,
				"parameterSlots": 4,
				"returnSlots": 0
			},
			"@_buildDomainSeparator_3570": {
				"entryPoint": null,
				"id": 3570,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_burn_1412": {
				"entryPoint": 4218,
				"id": 1412,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_checkOwner_84": {
				"entryPoint": 4033,
				"id": 84,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_checkpoints_705": {
				"entryPoint": 4912,
				"id": 705,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@_delegate_535": {
				"entryPoint": 4280,
				"id": 535,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_domainSeparatorV4_3549": {
				"entryPoint": 3506,
				"id": 3549,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_flashFeeReceiver_1779": {
				"entryPoint": null,
				"id": 1779,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_flashFee_1767": {
				"entryPoint": null,
				"id": 1767,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@_getVotingUnits_2196": {
				"entryPoint": 5543,
				"id": 2196,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_hashTypedDataV4_3586": {
				"entryPoint": 4742,
				"id": 3586,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_insert_7572": {
				"entryPoint": 7625,
				"id": 7572,
				"parameterSlots": 3,
				"returnSlots": 2
			},
			"@_maxSupply_2128": {
				"entryPoint": null,
				"id": 2128,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_mint_1379": {
				"entryPoint": 4166,
				"id": 1379,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_moveDelegateVotes_668": {
				"entryPoint": 5572,
				"id": 668,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_msgSender_2301": {
				"entryPoint": null,
				"id": 2301,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_numCheckpoints_686": {
				"entryPoint": 4393,
				"id": 686,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_pause_2479": {
				"entryPoint": 4544,
				"id": 2479,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_push_740": {
				"entryPoint": 7026,
				"id": 740,
				"parameterSlots": 3,
				"returnSlots": 2
			},
			"@_requireNotPaused_2450": {
				"entryPoint": 5981,
				"id": 2450,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_requirePaused_2463": {
				"entryPoint": 5508,
				"id": 2463,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_spendAllowance_1538": {
				"entryPoint": 3290,
				"id": 1538,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_subtract_768": {
				"entryPoint": 3261,
				"id": 768,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@_throwError_3425": {
				"entryPoint": 6386,
				"id": 3425,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_transferOwnership_146": {
				"entryPoint": 4426,
				"id": 146,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_transferVotingUnits_590": {
				"entryPoint": 7162,
				"id": 590,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_transfer_1269": {
				"entryPoint": 3413,
				"id": 1269,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_unpause_2495": {
				"entryPoint": 4084,
				"id": 2495,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_unsafeAccess_7691": {
				"entryPoint": null,
				"id": 7691,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@_update_1346": {
				"entryPoint": 7331,
				"id": 1346,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_update_1940": {
				"entryPoint": 7143,
				"id": 1940,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_update_2182": {
				"entryPoint": 6679,
				"id": 2182,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_update_8593": {
				"entryPoint": 5174,
				"id": 8593,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_upperBinaryLookup_7624": {
				"entryPoint": 5413,
				"id": 7624,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"@_useCheckedNonce_2378": {
				"entryPoint": 4830,
				"id": 2378,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_useNonce_2353": {
				"entryPoint": null,
				"id": 2353,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@allowance_1166": {
				"entryPoint": null,
				"id": 1166,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@approve_1190": {
				"entryPoint": 1477,
				"id": 1190,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@at_7481": {
				"entryPoint": 6570,
				"id": 7481,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@average_3955": {
				"entryPoint": 6949,
				"id": 3955,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@balanceOf_1125": {
				"entryPoint": null,
				"id": 1125,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@blockNumber_8248": {
				"entryPoint": 4270,
				"id": 8248,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@burnFrom_1662": {
				"entryPoint": 2301,
				"id": 1662,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@burn_1641": {
				"entryPoint": 1723,
				"id": 1641,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@byteLength_2614": {
				"entryPoint": 7292,
				"id": 2614,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@checkpoints_2226": {
				"entryPoint": 3163,
				"id": 2226,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@clock_299": {
				"entryPoint": 2519,
				"id": 299,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@decimals_1103": {
				"entryPoint": null,
				"id": 1103,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@delegateBySig_500": {
				"entryPoint": 2603,
				"id": 500,
				"parameterSlots": 6,
				"returnSlots": 0
			},
			"@delegate_443": {
				"entryPoint": 1856,
				"id": 443,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@delegates_426": {
				"entryPoint": null,
				"id": 426,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@eip712Domain_3628": {
				"entryPoint": 2348,
				"id": 3628,
				"parameterSlots": 0,
				"returnSlots": 7
			},
			"@flashFee_1750": {
				"entryPoint": 3101,
				"id": 1750,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@flashLoan_1906": {
				"entryPoint": 1867,
				"id": 1906,
				"parameterSlots": 5,
				"returnSlots": 1
			},
			"@getPastTotalSupply_402": {
				"entryPoint": 2414,
				"id": 402,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@getPastVotes_370": {
				"entryPoint": 1551,
				"id": 370,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@getVotes_334": {
				"entryPoint": 2543,
				"id": 334,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@latest_7400": {
				"entryPoint": 4695,
				"id": 7400,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@length_7463": {
				"entryPoint": null,
				"id": 7463,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@log2_4437": {
				"entryPoint": 6781,
				"id": 4437,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@maxFlashLoan_1722": {
				"entryPoint": 2237,
				"id": 1722,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@min_3932": {
				"entryPoint": 6928,
				"id": 3932,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@mint_8571": {
				"entryPoint": 1701,
				"id": 8571,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@name_1085": {
				"entryPoint": 1333,
				"id": 1085,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@nonces_2084": {
				"entryPoint": 4515,
				"id": 2084,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@nonces_2338": {
				"entryPoint": null,
				"id": 2338,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@nonces_8609": {
				"entryPoint": 2322,
				"id": 8609,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@numCheckpoints_2209": {
				"entryPoint": 2274,
				"id": 2209,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@owner_67": {
				"entryPoint": null,
				"id": 67,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@pause_8547": {
				"entryPoint": 2332,
				"id": 8547,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@paused_2438": {
				"entryPoint": null,
				"id": 2438,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@permit_2067": {
				"entryPoint": 2791,
				"id": 2067,
				"parameterSlots": 7,
				"returnSlots": 0
			},
			"@push_7203": {
				"entryPoint": 7279,
				"id": 7203,
				"parameterSlots": 3,
				"returnSlots": 2
			},
			"@recover_3376": {
				"entryPoint": 4786,
				"id": 3376,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"@renounceOwnership_98": {
				"entryPoint": 2284,
				"id": 98,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@sqrt_4270": {
				"entryPoint": 5185,
				"id": 4270,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@symbol_1094": {
				"entryPoint": 2528,
				"id": 1094,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@toStringWithFallback_2681": {
				"entryPoint": 6017,
				"id": 2681,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@toString_2582": {
				"entryPoint": 7082,
				"id": 2582,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toTypedDataHash_3726": {
				"entryPoint": null,
				"id": 3726,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@toUint208_4976": {
				"entryPoint": 6975,
				"id": 4976,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toUint32_5592": {
				"entryPoint": 5933,
				"id": 5592,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toUint48_5536": {
				"entryPoint": 3803,
				"id": 5536,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@totalSupply_1112": {
				"entryPoint": null,
				"id": 1112,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@transferFrom_1222": {
				"entryPoint": 1502,
				"id": 1222,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"@transferOwnership_126": {
				"entryPoint": 3192,
				"id": 126,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@transfer_1149": {
				"entryPoint": 2590,
				"id": 1149,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@tryRecover_3340": {
				"entryPoint": 6186,
				"id": 3340,
				"parameterSlots": 4,
				"returnSlots": 3
			},
			"@unpause_8556": {
				"entryPoint": 1683,
				"id": 8556,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@upperLookupRecent_7370": {
				"entryPoint": 3857,
				"id": 7370,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 8231,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_addresst_address": {
				"entryPoint": 8772,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_addresst_uint256": {
				"entryPoint": 8146,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
				"entryPoint": 8667,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 7
			},
			"abi_decode_tuple_t_addresst_uint256": {
				"entryPoint": 8104,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
				"entryPoint": 8581,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 6
			},
			"abi_decode_tuple_t_addresst_uint32": {
				"entryPoint": 8827,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_bytes32_fromMemory": {
				"entryPoint": 9025,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_contract$_IERC3156FlashBorrower_$797t_addresst_uint256t_bytes_calldata_ptr": {
				"entryPoint": 8258,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 5
			},
			"abi_decode_tuple_t_uint256": {
				"entryPoint": 8208,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_uint8": {
				"entryPoint": 8560,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_string": {
				"entryPoint": 7999,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
				"entryPoint": 8935,
				"id": null,
				"parameterSlots": 7,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
				"entryPoint": 8409,
				"id": null,
				"parameterSlots": 8,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 7,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 5,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 6,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 5,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_rational_208_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_rational_32_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 8066,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_struct$_Checkpoint208_$7180_memory_ptr__to_t_struct$_Checkpoint208_$7180_memory_ptr__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_uint48__to_t_uint256_t_uint48__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint208": {
				"entryPoint": 9106,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 9068,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_div_t_uint256": {
				"entryPoint": 9237,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_sub_t_uint208": {
				"entryPoint": 9145,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_sub_t_uint256": {
				"entryPoint": 9087,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"extract_byte_array_length": {
				"entryPoint": 8879,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 9048,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x12": {
				"entryPoint": 9177,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x21": {
				"entryPoint": 9197,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x32": {
				"entryPoint": 9217,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"validator_revert_address": {
				"entryPoint": 8084,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:15305:33",
					"nodeType": "YulBlock",
					"src": "0:15305:33",
					"statements": [
						{
							"nativeSrc": "6:3:33",
							"nodeType": "YulBlock",
							"src": "6:3:33",
							"statements": []
						},
						{
							"body": {
								"nativeSrc": "64:373:33",
								"nodeType": "YulBlock",
								"src": "64:373:33",
								"statements": [
									{
										"nativeSrc": "74:26:33",
										"nodeType": "YulVariableDeclaration",
										"src": "74:26:33",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "94:5:33",
													"nodeType": "YulIdentifier",
													"src": "94:5:33"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "88:5:33",
												"nodeType": "YulIdentifier",
												"src": "88:5:33"
											},
											"nativeSrc": "88:12:33",
											"nodeType": "YulFunctionCall",
											"src": "88:12:33"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "78:6:33",
												"nodeType": "YulTypedName",
												"src": "78:6:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "116:3:33",
													"nodeType": "YulIdentifier",
													"src": "116:3:33"
												},
												{
													"name": "length",
													"nativeSrc": "121:6:33",
													"nodeType": "YulIdentifier",
													"src": "121:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "109:6:33",
												"nodeType": "YulIdentifier",
												"src": "109:6:33"
											},
											"nativeSrc": "109:19:33",
											"nodeType": "YulFunctionCall",
											"src": "109:19:33"
										},
										"nativeSrc": "109:19:33",
										"nodeType": "YulExpressionStatement",
										"src": "109:19:33"
									},
									{
										"nativeSrc": "137:10:33",
										"nodeType": "YulVariableDeclaration",
										"src": "137:10:33",
										"value": {
											"kind": "number",
											"nativeSrc": "146:1:33",
											"nodeType": "YulLiteral",
											"src": "146:1:33",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nativeSrc": "141:1:33",
												"nodeType": "YulTypedName",
												"src": "141:1:33",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "208:110:33",
											"nodeType": "YulBlock",
											"src": "208:110:33",
											"statements": [
												{
													"nativeSrc": "222:14:33",
													"nodeType": "YulVariableDeclaration",
													"src": "222:14:33",
													"value": {
														"kind": "number",
														"nativeSrc": "232:4:33",
														"nodeType": "YulLiteral",
														"src": "232:4:33",
														"type": "",
														"value": "0x20"
													},
													"variables": [
														{
															"name": "_1",
															"nativeSrc": "226:2:33",
															"nodeType": "YulTypedName",
															"src": "226:2:33",
															"type": ""
														}
													]
												},
												{
													"expression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nativeSrc": "264:3:33",
																				"nodeType": "YulIdentifier",
																				"src": "264:3:33"
																			},
																			{
																				"name": "i",
																				"nativeSrc": "269:1:33",
																				"nodeType": "YulIdentifier",
																				"src": "269:1:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "260:3:33",
																			"nodeType": "YulIdentifier",
																			"src": "260:3:33"
																		},
																		"nativeSrc": "260:11:33",
																		"nodeType": "YulFunctionCall",
																		"src": "260:11:33"
																	},
																	{
																		"name": "_1",
																		"nativeSrc": "273:2:33",
																		"nodeType": "YulIdentifier",
																		"src": "273:2:33"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "256:3:33",
																	"nodeType": "YulIdentifier",
																	"src": "256:3:33"
																},
																"nativeSrc": "256:20:33",
																"nodeType": "YulFunctionCall",
																"src": "256:20:33"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "292:5:33",
																						"nodeType": "YulIdentifier",
																						"src": "292:5:33"
																					},
																					{
																						"name": "i",
																						"nativeSrc": "299:1:33",
																						"nodeType": "YulIdentifier",
																						"src": "299:1:33"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "288:3:33",
																					"nodeType": "YulIdentifier",
																					"src": "288:3:33"
																				},
																				"nativeSrc": "288:13:33",
																				"nodeType": "YulFunctionCall",
																				"src": "288:13:33"
																			},
																			{
																				"name": "_1",
																				"nativeSrc": "303:2:33",
																				"nodeType": "YulIdentifier",
																				"src": "303:2:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "284:3:33",
																			"nodeType": "YulIdentifier",
																			"src": "284:3:33"
																		},
																		"nativeSrc": "284:22:33",
																		"nodeType": "YulFunctionCall",
																		"src": "284:22:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "278:5:33",
																	"nodeType": "YulIdentifier",
																	"src": "278:5:33"
																},
																"nativeSrc": "278:29:33",
																"nodeType": "YulFunctionCall",
																"src": "278:29:33"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "249:6:33",
															"nodeType": "YulIdentifier",
															"src": "249:6:33"
														},
														"nativeSrc": "249:59:33",
														"nodeType": "YulFunctionCall",
														"src": "249:59:33"
													},
													"nativeSrc": "249:59:33",
													"nodeType": "YulExpressionStatement",
													"src": "249:59:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nativeSrc": "167:1:33",
													"nodeType": "YulIdentifier",
													"src": "167:1:33"
												},
												{
													"name": "length",
													"nativeSrc": "170:6:33",
													"nodeType": "YulIdentifier",
													"src": "170:6:33"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "164:2:33",
												"nodeType": "YulIdentifier",
												"src": "164:2:33"
											},
											"nativeSrc": "164:13:33",
											"nodeType": "YulFunctionCall",
											"src": "164:13:33"
										},
										"nativeSrc": "156:162:33",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "178:21:33",
											"nodeType": "YulBlock",
											"src": "178:21:33",
											"statements": [
												{
													"nativeSrc": "180:17:33",
													"nodeType": "YulAssignment",
													"src": "180:17:33",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nativeSrc": "189:1:33",
																"nodeType": "YulIdentifier",
																"src": "189:1:33"
															},
															{
																"kind": "number",
																"nativeSrc": "192:4:33",
																"nodeType": "YulLiteral",
																"src": "192:4:33",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "185:3:33",
															"nodeType": "YulIdentifier",
															"src": "185:3:33"
														},
														"nativeSrc": "185:12:33",
														"nodeType": "YulFunctionCall",
														"src": "185:12:33"
													},
													"variableNames": [
														{
															"name": "i",
															"nativeSrc": "180:1:33",
															"nodeType": "YulIdentifier",
															"src": "180:1:33"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "160:3:33",
											"nodeType": "YulBlock",
											"src": "160:3:33",
											"statements": []
										},
										"src": "156:162:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "pos",
																	"nativeSrc": "342:3:33",
																	"nodeType": "YulIdentifier",
																	"src": "342:3:33"
																},
																{
																	"name": "length",
																	"nativeSrc": "347:6:33",
																	"nodeType": "YulIdentifier",
																	"src": "347:6:33"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "338:3:33",
																"nodeType": "YulIdentifier",
																"src": "338:3:33"
															},
															"nativeSrc": "338:16:33",
															"nodeType": "YulFunctionCall",
															"src": "338:16:33"
														},
														{
															"kind": "number",
															"nativeSrc": "356:4:33",
															"nodeType": "YulLiteral",
															"src": "356:4:33",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "334:3:33",
														"nodeType": "YulIdentifier",
														"src": "334:3:33"
													},
													"nativeSrc": "334:27:33",
													"nodeType": "YulFunctionCall",
													"src": "334:27:33"
												},
												{
													"kind": "number",
													"nativeSrc": "363:1:33",
													"nodeType": "YulLiteral",
													"src": "363:1:33",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "327:6:33",
												"nodeType": "YulIdentifier",
												"src": "327:6:33"
											},
											"nativeSrc": "327:38:33",
											"nodeType": "YulFunctionCall",
											"src": "327:38:33"
										},
										"nativeSrc": "327:38:33",
										"nodeType": "YulExpressionStatement",
										"src": "327:38:33"
									},
									{
										"nativeSrc": "374:57:33",
										"nodeType": "YulAssignment",
										"src": "374:57:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nativeSrc": "389:3:33",
															"nodeType": "YulIdentifier",
															"src": "389:3:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "length",
																			"nativeSrc": "402:6:33",
																			"nodeType": "YulIdentifier",
																			"src": "402:6:33"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "410:2:33",
																			"nodeType": "YulLiteral",
																			"src": "410:2:33",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "398:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "398:3:33"
																	},
																	"nativeSrc": "398:15:33",
																	"nodeType": "YulFunctionCall",
																	"src": "398:15:33"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "419:2:33",
																			"nodeType": "YulLiteral",
																			"src": "419:2:33",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "not",
																		"nativeSrc": "415:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "415:3:33"
																	},
																	"nativeSrc": "415:7:33",
																	"nodeType": "YulFunctionCall",
																	"src": "415:7:33"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "394:3:33",
																"nodeType": "YulIdentifier",
																"src": "394:3:33"
															},
															"nativeSrc": "394:29:33",
															"nodeType": "YulFunctionCall",
															"src": "394:29:33"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "385:3:33",
														"nodeType": "YulIdentifier",
														"src": "385:3:33"
													},
													"nativeSrc": "385:39:33",
													"nodeType": "YulFunctionCall",
													"src": "385:39:33"
												},
												{
													"kind": "number",
													"nativeSrc": "426:4:33",
													"nodeType": "YulLiteral",
													"src": "426:4:33",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "381:3:33",
												"nodeType": "YulIdentifier",
												"src": "381:3:33"
											},
											"nativeSrc": "381:50:33",
											"nodeType": "YulFunctionCall",
											"src": "381:50:33"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "374:3:33",
												"nodeType": "YulIdentifier",
												"src": "374:3:33"
											}
										]
									}
								]
							},
							"name": "abi_encode_string",
							"nativeSrc": "14:423:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "41:5:33",
									"nodeType": "YulTypedName",
									"src": "41:5:33",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "48:3:33",
									"nodeType": "YulTypedName",
									"src": "48:3:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "56:3:33",
									"nodeType": "YulTypedName",
									"src": "56:3:33",
									"type": ""
								}
							],
							"src": "14:423:33"
						},
						{
							"body": {
								"nativeSrc": "563:99:33",
								"nodeType": "YulBlock",
								"src": "563:99:33",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "580:9:33",
													"nodeType": "YulIdentifier",
													"src": "580:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "591:2:33",
													"nodeType": "YulLiteral",
													"src": "591:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "573:6:33",
												"nodeType": "YulIdentifier",
												"src": "573:6:33"
											},
											"nativeSrc": "573:21:33",
											"nodeType": "YulFunctionCall",
											"src": "573:21:33"
										},
										"nativeSrc": "573:21:33",
										"nodeType": "YulExpressionStatement",
										"src": "573:21:33"
									},
									{
										"nativeSrc": "603:53:33",
										"nodeType": "YulAssignment",
										"src": "603:53:33",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "629:6:33",
													"nodeType": "YulIdentifier",
													"src": "629:6:33"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "641:9:33",
															"nodeType": "YulIdentifier",
															"src": "641:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "652:2:33",
															"nodeType": "YulLiteral",
															"src": "652:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "637:3:33",
														"nodeType": "YulIdentifier",
														"src": "637:3:33"
													},
													"nativeSrc": "637:18:33",
													"nodeType": "YulFunctionCall",
													"src": "637:18:33"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "611:17:33",
												"nodeType": "YulIdentifier",
												"src": "611:17:33"
											},
											"nativeSrc": "611:45:33",
											"nodeType": "YulFunctionCall",
											"src": "611:45:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "603:4:33",
												"nodeType": "YulIdentifier",
												"src": "603:4:33"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "442:220:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "532:9:33",
									"nodeType": "YulTypedName",
									"src": "532:9:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "543:6:33",
									"nodeType": "YulTypedName",
									"src": "543:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "554:4:33",
									"nodeType": "YulTypedName",
									"src": "554:4:33",
									"type": ""
								}
							],
							"src": "442:220:33"
						},
						{
							"body": {
								"nativeSrc": "712:86:33",
								"nodeType": "YulBlock",
								"src": "712:86:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "776:16:33",
											"nodeType": "YulBlock",
											"src": "776:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "785:1:33",
																"nodeType": "YulLiteral",
																"src": "785:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "788:1:33",
																"nodeType": "YulLiteral",
																"src": "788:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "778:6:33",
															"nodeType": "YulIdentifier",
															"src": "778:6:33"
														},
														"nativeSrc": "778:12:33",
														"nodeType": "YulFunctionCall",
														"src": "778:12:33"
													},
													"nativeSrc": "778:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "778:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "735:5:33",
															"nodeType": "YulIdentifier",
															"src": "735:5:33"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "746:5:33",
																	"nodeType": "YulIdentifier",
																	"src": "746:5:33"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "761:3:33",
																					"nodeType": "YulLiteral",
																					"src": "761:3:33",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "766:1:33",
																					"nodeType": "YulLiteral",
																					"src": "766:1:33",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nativeSrc": "757:3:33",
																				"nodeType": "YulIdentifier",
																				"src": "757:3:33"
																			},
																			"nativeSrc": "757:11:33",
																			"nodeType": "YulFunctionCall",
																			"src": "757:11:33"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "770:1:33",
																			"nodeType": "YulLiteral",
																			"src": "770:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nativeSrc": "753:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "753:3:33"
																	},
																	"nativeSrc": "753:19:33",
																	"nodeType": "YulFunctionCall",
																	"src": "753:19:33"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "742:3:33",
																"nodeType": "YulIdentifier",
																"src": "742:3:33"
															},
															"nativeSrc": "742:31:33",
															"nodeType": "YulFunctionCall",
															"src": "742:31:33"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "732:2:33",
														"nodeType": "YulIdentifier",
														"src": "732:2:33"
													},
													"nativeSrc": "732:42:33",
													"nodeType": "YulFunctionCall",
													"src": "732:42:33"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "725:6:33",
												"nodeType": "YulIdentifier",
												"src": "725:6:33"
											},
											"nativeSrc": "725:50:33",
											"nodeType": "YulFunctionCall",
											"src": "725:50:33"
										},
										"nativeSrc": "722:70:33",
										"nodeType": "YulIf",
										"src": "722:70:33"
									}
								]
							},
							"name": "validator_revert_address",
							"nativeSrc": "667:131:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "701:5:33",
									"nodeType": "YulTypedName",
									"src": "701:5:33",
									"type": ""
								}
							],
							"src": "667:131:33"
						},
						{
							"body": {
								"nativeSrc": "890:228:33",
								"nodeType": "YulBlock",
								"src": "890:228:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "936:16:33",
											"nodeType": "YulBlock",
											"src": "936:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "945:1:33",
																"nodeType": "YulLiteral",
																"src": "945:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "948:1:33",
																"nodeType": "YulLiteral",
																"src": "948:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "938:6:33",
															"nodeType": "YulIdentifier",
															"src": "938:6:33"
														},
														"nativeSrc": "938:12:33",
														"nodeType": "YulFunctionCall",
														"src": "938:12:33"
													},
													"nativeSrc": "938:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "938:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "911:7:33",
															"nodeType": "YulIdentifier",
															"src": "911:7:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "920:9:33",
															"nodeType": "YulIdentifier",
															"src": "920:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "907:3:33",
														"nodeType": "YulIdentifier",
														"src": "907:3:33"
													},
													"nativeSrc": "907:23:33",
													"nodeType": "YulFunctionCall",
													"src": "907:23:33"
												},
												{
													"kind": "number",
													"nativeSrc": "932:2:33",
													"nodeType": "YulLiteral",
													"src": "932:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "903:3:33",
												"nodeType": "YulIdentifier",
												"src": "903:3:33"
											},
											"nativeSrc": "903:32:33",
											"nodeType": "YulFunctionCall",
											"src": "903:32:33"
										},
										"nativeSrc": "900:52:33",
										"nodeType": "YulIf",
										"src": "900:52:33"
									},
									{
										"nativeSrc": "961:36:33",
										"nodeType": "YulVariableDeclaration",
										"src": "961:36:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "987:9:33",
													"nodeType": "YulIdentifier",
													"src": "987:9:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "974:12:33",
												"nodeType": "YulIdentifier",
												"src": "974:12:33"
											},
											"nativeSrc": "974:23:33",
											"nodeType": "YulFunctionCall",
											"src": "974:23:33"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "965:5:33",
												"nodeType": "YulTypedName",
												"src": "965:5:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1031:5:33",
													"nodeType": "YulIdentifier",
													"src": "1031:5:33"
												}
											],
											"functionName": {
												"name": "validator_revert_address",
												"nativeSrc": "1006:24:33",
												"nodeType": "YulIdentifier",
												"src": "1006:24:33"
											},
											"nativeSrc": "1006:31:33",
											"nodeType": "YulFunctionCall",
											"src": "1006:31:33"
										},
										"nativeSrc": "1006:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "1006:31:33"
									},
									{
										"nativeSrc": "1046:15:33",
										"nodeType": "YulAssignment",
										"src": "1046:15:33",
										"value": {
											"name": "value",
											"nativeSrc": "1056:5:33",
											"nodeType": "YulIdentifier",
											"src": "1056:5:33"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "1046:6:33",
												"nodeType": "YulIdentifier",
												"src": "1046:6:33"
											}
										]
									},
									{
										"nativeSrc": "1070:42:33",
										"nodeType": "YulAssignment",
										"src": "1070:42:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1097:9:33",
															"nodeType": "YulIdentifier",
															"src": "1097:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "1108:2:33",
															"nodeType": "YulLiteral",
															"src": "1108:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1093:3:33",
														"nodeType": "YulIdentifier",
														"src": "1093:3:33"
													},
													"nativeSrc": "1093:18:33",
													"nodeType": "YulFunctionCall",
													"src": "1093:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "1080:12:33",
												"nodeType": "YulIdentifier",
												"src": "1080:12:33"
											},
											"nativeSrc": "1080:32:33",
											"nodeType": "YulFunctionCall",
											"src": "1080:32:33"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "1070:6:33",
												"nodeType": "YulIdentifier",
												"src": "1070:6:33"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256",
							"nativeSrc": "803:315:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "848:9:33",
									"nodeType": "YulTypedName",
									"src": "848:9:33",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "859:7:33",
									"nodeType": "YulTypedName",
									"src": "859:7:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "871:6:33",
									"nodeType": "YulTypedName",
									"src": "871:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "879:6:33",
									"nodeType": "YulTypedName",
									"src": "879:6:33",
									"type": ""
								}
							],
							"src": "803:315:33"
						},
						{
							"body": {
								"nativeSrc": "1218:92:33",
								"nodeType": "YulBlock",
								"src": "1218:92:33",
								"statements": [
									{
										"nativeSrc": "1228:26:33",
										"nodeType": "YulAssignment",
										"src": "1228:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1240:9:33",
													"nodeType": "YulIdentifier",
													"src": "1240:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "1251:2:33",
													"nodeType": "YulLiteral",
													"src": "1251:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1236:3:33",
												"nodeType": "YulIdentifier",
												"src": "1236:3:33"
											},
											"nativeSrc": "1236:18:33",
											"nodeType": "YulFunctionCall",
											"src": "1236:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1228:4:33",
												"nodeType": "YulIdentifier",
												"src": "1228:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1270:9:33",
													"nodeType": "YulIdentifier",
													"src": "1270:9:33"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nativeSrc": "1295:6:33",
																	"nodeType": "YulIdentifier",
																	"src": "1295:6:33"
																}
															],
															"functionName": {
																"name": "iszero",
																"nativeSrc": "1288:6:33",
																"nodeType": "YulIdentifier",
																"src": "1288:6:33"
															},
															"nativeSrc": "1288:14:33",
															"nodeType": "YulFunctionCall",
															"src": "1288:14:33"
														}
													],
													"functionName": {
														"name": "iszero",
														"nativeSrc": "1281:6:33",
														"nodeType": "YulIdentifier",
														"src": "1281:6:33"
													},
													"nativeSrc": "1281:22:33",
													"nodeType": "YulFunctionCall",
													"src": "1281:22:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1263:6:33",
												"nodeType": "YulIdentifier",
												"src": "1263:6:33"
											},
											"nativeSrc": "1263:41:33",
											"nodeType": "YulFunctionCall",
											"src": "1263:41:33"
										},
										"nativeSrc": "1263:41:33",
										"nodeType": "YulExpressionStatement",
										"src": "1263:41:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
							"nativeSrc": "1123:187:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1187:9:33",
									"nodeType": "YulTypedName",
									"src": "1187:9:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1198:6:33",
									"nodeType": "YulTypedName",
									"src": "1198:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1209:4:33",
									"nodeType": "YulTypedName",
									"src": "1209:4:33",
									"type": ""
								}
							],
							"src": "1123:187:33"
						},
						{
							"body": {
								"nativeSrc": "1416:76:33",
								"nodeType": "YulBlock",
								"src": "1416:76:33",
								"statements": [
									{
										"nativeSrc": "1426:26:33",
										"nodeType": "YulAssignment",
										"src": "1426:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1438:9:33",
													"nodeType": "YulIdentifier",
													"src": "1438:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "1449:2:33",
													"nodeType": "YulLiteral",
													"src": "1449:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1434:3:33",
												"nodeType": "YulIdentifier",
												"src": "1434:3:33"
											},
											"nativeSrc": "1434:18:33",
											"nodeType": "YulFunctionCall",
											"src": "1434:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1426:4:33",
												"nodeType": "YulIdentifier",
												"src": "1426:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1468:9:33",
													"nodeType": "YulIdentifier",
													"src": "1468:9:33"
												},
												{
													"name": "value0",
													"nativeSrc": "1479:6:33",
													"nodeType": "YulIdentifier",
													"src": "1479:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1461:6:33",
												"nodeType": "YulIdentifier",
												"src": "1461:6:33"
											},
											"nativeSrc": "1461:25:33",
											"nodeType": "YulFunctionCall",
											"src": "1461:25:33"
										},
										"nativeSrc": "1461:25:33",
										"nodeType": "YulExpressionStatement",
										"src": "1461:25:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nativeSrc": "1315:177:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1385:9:33",
									"nodeType": "YulTypedName",
									"src": "1385:9:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1396:6:33",
									"nodeType": "YulTypedName",
									"src": "1396:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1407:4:33",
									"nodeType": "YulTypedName",
									"src": "1407:4:33",
									"type": ""
								}
							],
							"src": "1315:177:33"
						},
						{
							"body": {
								"nativeSrc": "1601:352:33",
								"nodeType": "YulBlock",
								"src": "1601:352:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "1647:16:33",
											"nodeType": "YulBlock",
											"src": "1647:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1656:1:33",
																"nodeType": "YulLiteral",
																"src": "1656:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "1659:1:33",
																"nodeType": "YulLiteral",
																"src": "1659:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "1649:6:33",
															"nodeType": "YulIdentifier",
															"src": "1649:6:33"
														},
														"nativeSrc": "1649:12:33",
														"nodeType": "YulFunctionCall",
														"src": "1649:12:33"
													},
													"nativeSrc": "1649:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "1649:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "1622:7:33",
															"nodeType": "YulIdentifier",
															"src": "1622:7:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "1631:9:33",
															"nodeType": "YulIdentifier",
															"src": "1631:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1618:3:33",
														"nodeType": "YulIdentifier",
														"src": "1618:3:33"
													},
													"nativeSrc": "1618:23:33",
													"nodeType": "YulFunctionCall",
													"src": "1618:23:33"
												},
												{
													"kind": "number",
													"nativeSrc": "1643:2:33",
													"nodeType": "YulLiteral",
													"src": "1643:2:33",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "1614:3:33",
												"nodeType": "YulIdentifier",
												"src": "1614:3:33"
											},
											"nativeSrc": "1614:32:33",
											"nodeType": "YulFunctionCall",
											"src": "1614:32:33"
										},
										"nativeSrc": "1611:52:33",
										"nodeType": "YulIf",
										"src": "1611:52:33"
									},
									{
										"nativeSrc": "1672:36:33",
										"nodeType": "YulVariableDeclaration",
										"src": "1672:36:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1698:9:33",
													"nodeType": "YulIdentifier",
													"src": "1698:9:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "1685:12:33",
												"nodeType": "YulIdentifier",
												"src": "1685:12:33"
											},
											"nativeSrc": "1685:23:33",
											"nodeType": "YulFunctionCall",
											"src": "1685:23:33"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "1676:5:33",
												"nodeType": "YulTypedName",
												"src": "1676:5:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1742:5:33",
													"nodeType": "YulIdentifier",
													"src": "1742:5:33"
												}
											],
											"functionName": {
												"name": "validator_revert_address",
												"nativeSrc": "1717:24:33",
												"nodeType": "YulIdentifier",
												"src": "1717:24:33"
											},
											"nativeSrc": "1717:31:33",
											"nodeType": "YulFunctionCall",
											"src": "1717:31:33"
										},
										"nativeSrc": "1717:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "1717:31:33"
									},
									{
										"nativeSrc": "1757:15:33",
										"nodeType": "YulAssignment",
										"src": "1757:15:33",
										"value": {
											"name": "value",
											"nativeSrc": "1767:5:33",
											"nodeType": "YulIdentifier",
											"src": "1767:5:33"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "1757:6:33",
												"nodeType": "YulIdentifier",
												"src": "1757:6:33"
											}
										]
									},
									{
										"nativeSrc": "1781:47:33",
										"nodeType": "YulVariableDeclaration",
										"src": "1781:47:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1813:9:33",
															"nodeType": "YulIdentifier",
															"src": "1813:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "1824:2:33",
															"nodeType": "YulLiteral",
															"src": "1824:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1809:3:33",
														"nodeType": "YulIdentifier",
														"src": "1809:3:33"
													},
													"nativeSrc": "1809:18:33",
													"nodeType": "YulFunctionCall",
													"src": "1809:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "1796:12:33",
												"nodeType": "YulIdentifier",
												"src": "1796:12:33"
											},
											"nativeSrc": "1796:32:33",
											"nodeType": "YulFunctionCall",
											"src": "1796:32:33"
										},
										"variables": [
											{
												"name": "value_1",
												"nativeSrc": "1785:7:33",
												"nodeType": "YulTypedName",
												"src": "1785:7:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value_1",
													"nativeSrc": "1862:7:33",
													"nodeType": "YulIdentifier",
													"src": "1862:7:33"
												}
											],
											"functionName": {
												"name": "validator_revert_address",
												"nativeSrc": "1837:24:33",
												"nodeType": "YulIdentifier",
												"src": "1837:24:33"
											},
											"nativeSrc": "1837:33:33",
											"nodeType": "YulFunctionCall",
											"src": "1837:33:33"
										},
										"nativeSrc": "1837:33:33",
										"nodeType": "YulExpressionStatement",
										"src": "1837:33:33"
									},
									{
										"nativeSrc": "1879:17:33",
										"nodeType": "YulAssignment",
										"src": "1879:17:33",
										"value": {
											"name": "value_1",
											"nativeSrc": "1889:7:33",
											"nodeType": "YulIdentifier",
											"src": "1889:7:33"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "1879:6:33",
												"nodeType": "YulIdentifier",
												"src": "1879:6:33"
											}
										]
									},
									{
										"nativeSrc": "1905:42:33",
										"nodeType": "YulAssignment",
										"src": "1905:42:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1932:9:33",
															"nodeType": "YulIdentifier",
															"src": "1932:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "1943:2:33",
															"nodeType": "YulLiteral",
															"src": "1943:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1928:3:33",
														"nodeType": "YulIdentifier",
														"src": "1928:3:33"
													},
													"nativeSrc": "1928:18:33",
													"nodeType": "YulFunctionCall",
													"src": "1928:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "1915:12:33",
												"nodeType": "YulIdentifier",
												"src": "1915:12:33"
											},
											"nativeSrc": "1915:32:33",
											"nodeType": "YulFunctionCall",
											"src": "1915:32:33"
										},
										"variableNames": [
											{
												"name": "value2",
												"nativeSrc": "1905:6:33",
												"nodeType": "YulIdentifier",
												"src": "1905:6:33"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256",
							"nativeSrc": "1497:456:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1551:9:33",
									"nodeType": "YulTypedName",
									"src": "1551:9:33",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "1562:7:33",
									"nodeType": "YulTypedName",
									"src": "1562:7:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "1574:6:33",
									"nodeType": "YulTypedName",
									"src": "1574:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "1582:6:33",
									"nodeType": "YulTypedName",
									"src": "1582:6:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "1590:6:33",
									"nodeType": "YulTypedName",
									"src": "1590:6:33",
									"type": ""
								}
							],
							"src": "1497:456:33"
						},
						{
							"body": {
								"nativeSrc": "2055:87:33",
								"nodeType": "YulBlock",
								"src": "2055:87:33",
								"statements": [
									{
										"nativeSrc": "2065:26:33",
										"nodeType": "YulAssignment",
										"src": "2065:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2077:9:33",
													"nodeType": "YulIdentifier",
													"src": "2077:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "2088:2:33",
													"nodeType": "YulLiteral",
													"src": "2088:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "2073:3:33",
												"nodeType": "YulIdentifier",
												"src": "2073:3:33"
											},
											"nativeSrc": "2073:18:33",
											"nodeType": "YulFunctionCall",
											"src": "2073:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "2065:4:33",
												"nodeType": "YulIdentifier",
												"src": "2065:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2107:9:33",
													"nodeType": "YulIdentifier",
													"src": "2107:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "2122:6:33",
															"nodeType": "YulIdentifier",
															"src": "2122:6:33"
														},
														{
															"kind": "number",
															"nativeSrc": "2130:4:33",
															"nodeType": "YulLiteral",
															"src": "2130:4:33",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "2118:3:33",
														"nodeType": "YulIdentifier",
														"src": "2118:3:33"
													},
													"nativeSrc": "2118:17:33",
													"nodeType": "YulFunctionCall",
													"src": "2118:17:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2100:6:33",
												"nodeType": "YulIdentifier",
												"src": "2100:6:33"
											},
											"nativeSrc": "2100:36:33",
											"nodeType": "YulFunctionCall",
											"src": "2100:36:33"
										},
										"nativeSrc": "2100:36:33",
										"nodeType": "YulExpressionStatement",
										"src": "2100:36:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
							"nativeSrc": "1958:184:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2024:9:33",
									"nodeType": "YulTypedName",
									"src": "2024:9:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "2035:6:33",
									"nodeType": "YulTypedName",
									"src": "2035:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2046:4:33",
									"nodeType": "YulTypedName",
									"src": "2046:4:33",
									"type": ""
								}
							],
							"src": "1958:184:33"
						},
						{
							"body": {
								"nativeSrc": "2248:76:33",
								"nodeType": "YulBlock",
								"src": "2248:76:33",
								"statements": [
									{
										"nativeSrc": "2258:26:33",
										"nodeType": "YulAssignment",
										"src": "2258:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2270:9:33",
													"nodeType": "YulIdentifier",
													"src": "2270:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "2281:2:33",
													"nodeType": "YulLiteral",
													"src": "2281:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "2266:3:33",
												"nodeType": "YulIdentifier",
												"src": "2266:3:33"
											},
											"nativeSrc": "2266:18:33",
											"nodeType": "YulFunctionCall",
											"src": "2266:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "2258:4:33",
												"nodeType": "YulIdentifier",
												"src": "2258:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2300:9:33",
													"nodeType": "YulIdentifier",
													"src": "2300:9:33"
												},
												{
													"name": "value0",
													"nativeSrc": "2311:6:33",
													"nodeType": "YulIdentifier",
													"src": "2311:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2293:6:33",
												"nodeType": "YulIdentifier",
												"src": "2293:6:33"
											},
											"nativeSrc": "2293:25:33",
											"nodeType": "YulFunctionCall",
											"src": "2293:25:33"
										},
										"nativeSrc": "2293:25:33",
										"nodeType": "YulExpressionStatement",
										"src": "2293:25:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
							"nativeSrc": "2147:177:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2217:9:33",
									"nodeType": "YulTypedName",
									"src": "2217:9:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "2228:6:33",
									"nodeType": "YulTypedName",
									"src": "2228:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2239:4:33",
									"nodeType": "YulTypedName",
									"src": "2239:4:33",
									"type": ""
								}
							],
							"src": "2147:177:33"
						},
						{
							"body": {
								"nativeSrc": "2399:110:33",
								"nodeType": "YulBlock",
								"src": "2399:110:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "2445:16:33",
											"nodeType": "YulBlock",
											"src": "2445:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "2454:1:33",
																"nodeType": "YulLiteral",
																"src": "2454:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "2457:1:33",
																"nodeType": "YulLiteral",
																"src": "2457:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "2447:6:33",
															"nodeType": "YulIdentifier",
															"src": "2447:6:33"
														},
														"nativeSrc": "2447:12:33",
														"nodeType": "YulFunctionCall",
														"src": "2447:12:33"
													},
													"nativeSrc": "2447:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "2447:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "2420:7:33",
															"nodeType": "YulIdentifier",
															"src": "2420:7:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "2429:9:33",
															"nodeType": "YulIdentifier",
															"src": "2429:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "2416:3:33",
														"nodeType": "YulIdentifier",
														"src": "2416:3:33"
													},
													"nativeSrc": "2416:23:33",
													"nodeType": "YulFunctionCall",
													"src": "2416:23:33"
												},
												{
													"kind": "number",
													"nativeSrc": "2441:2:33",
													"nodeType": "YulLiteral",
													"src": "2441:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "2412:3:33",
												"nodeType": "YulIdentifier",
												"src": "2412:3:33"
											},
											"nativeSrc": "2412:32:33",
											"nodeType": "YulFunctionCall",
											"src": "2412:32:33"
										},
										"nativeSrc": "2409:52:33",
										"nodeType": "YulIf",
										"src": "2409:52:33"
									},
									{
										"nativeSrc": "2470:33:33",
										"nodeType": "YulAssignment",
										"src": "2470:33:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2493:9:33",
													"nodeType": "YulIdentifier",
													"src": "2493:9:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "2480:12:33",
												"nodeType": "YulIdentifier",
												"src": "2480:12:33"
											},
											"nativeSrc": "2480:23:33",
											"nodeType": "YulFunctionCall",
											"src": "2480:23:33"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "2470:6:33",
												"nodeType": "YulIdentifier",
												"src": "2470:6:33"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256",
							"nativeSrc": "2329:180:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2365:9:33",
									"nodeType": "YulTypedName",
									"src": "2365:9:33",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "2376:7:33",
									"nodeType": "YulTypedName",
									"src": "2376:7:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "2388:6:33",
									"nodeType": "YulTypedName",
									"src": "2388:6:33",
									"type": ""
								}
							],
							"src": "2329:180:33"
						},
						{
							"body": {
								"nativeSrc": "2584:177:33",
								"nodeType": "YulBlock",
								"src": "2584:177:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "2630:16:33",
											"nodeType": "YulBlock",
											"src": "2630:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "2639:1:33",
																"nodeType": "YulLiteral",
																"src": "2639:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "2642:1:33",
																"nodeType": "YulLiteral",
																"src": "2642:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "2632:6:33",
															"nodeType": "YulIdentifier",
															"src": "2632:6:33"
														},
														"nativeSrc": "2632:12:33",
														"nodeType": "YulFunctionCall",
														"src": "2632:12:33"
													},
													"nativeSrc": "2632:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "2632:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "2605:7:33",
															"nodeType": "YulIdentifier",
															"src": "2605:7:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "2614:9:33",
															"nodeType": "YulIdentifier",
															"src": "2614:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "2601:3:33",
														"nodeType": "YulIdentifier",
														"src": "2601:3:33"
													},
													"nativeSrc": "2601:23:33",
													"nodeType": "YulFunctionCall",
													"src": "2601:23:33"
												},
												{
													"kind": "number",
													"nativeSrc": "2626:2:33",
													"nodeType": "YulLiteral",
													"src": "2626:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "2597:3:33",
												"nodeType": "YulIdentifier",
												"src": "2597:3:33"
											},
											"nativeSrc": "2597:32:33",
											"nodeType": "YulFunctionCall",
											"src": "2597:32:33"
										},
										"nativeSrc": "2594:52:33",
										"nodeType": "YulIf",
										"src": "2594:52:33"
									},
									{
										"nativeSrc": "2655:36:33",
										"nodeType": "YulVariableDeclaration",
										"src": "2655:36:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2681:9:33",
													"nodeType": "YulIdentifier",
													"src": "2681:9:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "2668:12:33",
												"nodeType": "YulIdentifier",
												"src": "2668:12:33"
											},
											"nativeSrc": "2668:23:33",
											"nodeType": "YulFunctionCall",
											"src": "2668:23:33"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "2659:5:33",
												"nodeType": "YulTypedName",
												"src": "2659:5:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "2725:5:33",
													"nodeType": "YulIdentifier",
													"src": "2725:5:33"
												}
											],
											"functionName": {
												"name": "validator_revert_address",
												"nativeSrc": "2700:24:33",
												"nodeType": "YulIdentifier",
												"src": "2700:24:33"
											},
											"nativeSrc": "2700:31:33",
											"nodeType": "YulFunctionCall",
											"src": "2700:31:33"
										},
										"nativeSrc": "2700:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "2700:31:33"
									},
									{
										"nativeSrc": "2740:15:33",
										"nodeType": "YulAssignment",
										"src": "2740:15:33",
										"value": {
											"name": "value",
											"nativeSrc": "2750:5:33",
											"nodeType": "YulIdentifier",
											"src": "2750:5:33"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "2740:6:33",
												"nodeType": "YulIdentifier",
												"src": "2740:6:33"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nativeSrc": "2514:247:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2550:9:33",
									"nodeType": "YulTypedName",
									"src": "2550:9:33",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "2561:7:33",
									"nodeType": "YulTypedName",
									"src": "2561:7:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "2573:6:33",
									"nodeType": "YulTypedName",
									"src": "2573:6:33",
									"type": ""
								}
							],
							"src": "2514:247:33"
						},
						{
							"body": {
								"nativeSrc": "2867:102:33",
								"nodeType": "YulBlock",
								"src": "2867:102:33",
								"statements": [
									{
										"nativeSrc": "2877:26:33",
										"nodeType": "YulAssignment",
										"src": "2877:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2889:9:33",
													"nodeType": "YulIdentifier",
													"src": "2889:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "2900:2:33",
													"nodeType": "YulLiteral",
													"src": "2900:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "2885:3:33",
												"nodeType": "YulIdentifier",
												"src": "2885:3:33"
											},
											"nativeSrc": "2885:18:33",
											"nodeType": "YulFunctionCall",
											"src": "2885:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "2877:4:33",
												"nodeType": "YulIdentifier",
												"src": "2877:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2919:9:33",
													"nodeType": "YulIdentifier",
													"src": "2919:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "2934:6:33",
															"nodeType": "YulIdentifier",
															"src": "2934:6:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "2950:3:33",
																			"nodeType": "YulLiteral",
																			"src": "2950:3:33",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "2955:1:33",
																			"nodeType": "YulLiteral",
																			"src": "2955:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "2946:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "2946:3:33"
																	},
																	"nativeSrc": "2946:11:33",
																	"nodeType": "YulFunctionCall",
																	"src": "2946:11:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "2959:1:33",
																	"nodeType": "YulLiteral",
																	"src": "2959:1:33",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "2942:3:33",
																"nodeType": "YulIdentifier",
																"src": "2942:3:33"
															},
															"nativeSrc": "2942:19:33",
															"nodeType": "YulFunctionCall",
															"src": "2942:19:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "2930:3:33",
														"nodeType": "YulIdentifier",
														"src": "2930:3:33"
													},
													"nativeSrc": "2930:32:33",
													"nodeType": "YulFunctionCall",
													"src": "2930:32:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2912:6:33",
												"nodeType": "YulIdentifier",
												"src": "2912:6:33"
											},
											"nativeSrc": "2912:51:33",
											"nodeType": "YulFunctionCall",
											"src": "2912:51:33"
										},
										"nativeSrc": "2912:51:33",
										"nodeType": "YulExpressionStatement",
										"src": "2912:51:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "2766:203:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2836:9:33",
									"nodeType": "YulTypedName",
									"src": "2836:9:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "2847:6:33",
									"nodeType": "YulTypedName",
									"src": "2847:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2858:4:33",
									"nodeType": "YulTypedName",
									"src": "2858:4:33",
									"type": ""
								}
							],
							"src": "2766:203:33"
						},
						{
							"body": {
								"nativeSrc": "3143:796:33",
								"nodeType": "YulBlock",
								"src": "3143:796:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "3190:16:33",
											"nodeType": "YulBlock",
											"src": "3190:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3199:1:33",
																"nodeType": "YulLiteral",
																"src": "3199:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "3202:1:33",
																"nodeType": "YulLiteral",
																"src": "3202:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "3192:6:33",
															"nodeType": "YulIdentifier",
															"src": "3192:6:33"
														},
														"nativeSrc": "3192:12:33",
														"nodeType": "YulFunctionCall",
														"src": "3192:12:33"
													},
													"nativeSrc": "3192:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "3192:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "3164:7:33",
															"nodeType": "YulIdentifier",
															"src": "3164:7:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "3173:9:33",
															"nodeType": "YulIdentifier",
															"src": "3173:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "3160:3:33",
														"nodeType": "YulIdentifier",
														"src": "3160:3:33"
													},
													"nativeSrc": "3160:23:33",
													"nodeType": "YulFunctionCall",
													"src": "3160:23:33"
												},
												{
													"kind": "number",
													"nativeSrc": "3185:3:33",
													"nodeType": "YulLiteral",
													"src": "3185:3:33",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "3156:3:33",
												"nodeType": "YulIdentifier",
												"src": "3156:3:33"
											},
											"nativeSrc": "3156:33:33",
											"nodeType": "YulFunctionCall",
											"src": "3156:33:33"
										},
										"nativeSrc": "3153:53:33",
										"nodeType": "YulIf",
										"src": "3153:53:33"
									},
									{
										"nativeSrc": "3215:36:33",
										"nodeType": "YulVariableDeclaration",
										"src": "3215:36:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3241:9:33",
													"nodeType": "YulIdentifier",
													"src": "3241:9:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "3228:12:33",
												"nodeType": "YulIdentifier",
												"src": "3228:12:33"
											},
											"nativeSrc": "3228:23:33",
											"nodeType": "YulFunctionCall",
											"src": "3228:23:33"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "3219:5:33",
												"nodeType": "YulTypedName",
												"src": "3219:5:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "3285:5:33",
													"nodeType": "YulIdentifier",
													"src": "3285:5:33"
												}
											],
											"functionName": {
												"name": "validator_revert_address",
												"nativeSrc": "3260:24:33",
												"nodeType": "YulIdentifier",
												"src": "3260:24:33"
											},
											"nativeSrc": "3260:31:33",
											"nodeType": "YulFunctionCall",
											"src": "3260:31:33"
										},
										"nativeSrc": "3260:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "3260:31:33"
									},
									{
										"nativeSrc": "3300:15:33",
										"nodeType": "YulAssignment",
										"src": "3300:15:33",
										"value": {
											"name": "value",
											"nativeSrc": "3310:5:33",
											"nodeType": "YulIdentifier",
											"src": "3310:5:33"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "3300:6:33",
												"nodeType": "YulIdentifier",
												"src": "3300:6:33"
											}
										]
									},
									{
										"nativeSrc": "3324:47:33",
										"nodeType": "YulVariableDeclaration",
										"src": "3324:47:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3356:9:33",
															"nodeType": "YulIdentifier",
															"src": "3356:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "3367:2:33",
															"nodeType": "YulLiteral",
															"src": "3367:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3352:3:33",
														"nodeType": "YulIdentifier",
														"src": "3352:3:33"
													},
													"nativeSrc": "3352:18:33",
													"nodeType": "YulFunctionCall",
													"src": "3352:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "3339:12:33",
												"nodeType": "YulIdentifier",
												"src": "3339:12:33"
											},
											"nativeSrc": "3339:32:33",
											"nodeType": "YulFunctionCall",
											"src": "3339:32:33"
										},
										"variables": [
											{
												"name": "value_1",
												"nativeSrc": "3328:7:33",
												"nodeType": "YulTypedName",
												"src": "3328:7:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value_1",
													"nativeSrc": "3405:7:33",
													"nodeType": "YulIdentifier",
													"src": "3405:7:33"
												}
											],
											"functionName": {
												"name": "validator_revert_address",
												"nativeSrc": "3380:24:33",
												"nodeType": "YulIdentifier",
												"src": "3380:24:33"
											},
											"nativeSrc": "3380:33:33",
											"nodeType": "YulFunctionCall",
											"src": "3380:33:33"
										},
										"nativeSrc": "3380:33:33",
										"nodeType": "YulExpressionStatement",
										"src": "3380:33:33"
									},
									{
										"nativeSrc": "3422:17:33",
										"nodeType": "YulAssignment",
										"src": "3422:17:33",
										"value": {
											"name": "value_1",
											"nativeSrc": "3432:7:33",
											"nodeType": "YulIdentifier",
											"src": "3432:7:33"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "3422:6:33",
												"nodeType": "YulIdentifier",
												"src": "3422:6:33"
											}
										]
									},
									{
										"nativeSrc": "3448:42:33",
										"nodeType": "YulAssignment",
										"src": "3448:42:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3475:9:33",
															"nodeType": "YulIdentifier",
															"src": "3475:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "3486:2:33",
															"nodeType": "YulLiteral",
															"src": "3486:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3471:3:33",
														"nodeType": "YulIdentifier",
														"src": "3471:3:33"
													},
													"nativeSrc": "3471:18:33",
													"nodeType": "YulFunctionCall",
													"src": "3471:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "3458:12:33",
												"nodeType": "YulIdentifier",
												"src": "3458:12:33"
											},
											"nativeSrc": "3458:32:33",
											"nodeType": "YulFunctionCall",
											"src": "3458:32:33"
										},
										"variableNames": [
											{
												"name": "value2",
												"nativeSrc": "3448:6:33",
												"nodeType": "YulIdentifier",
												"src": "3448:6:33"
											}
										]
									},
									{
										"nativeSrc": "3499:46:33",
										"nodeType": "YulVariableDeclaration",
										"src": "3499:46:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3530:9:33",
															"nodeType": "YulIdentifier",
															"src": "3530:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "3541:2:33",
															"nodeType": "YulLiteral",
															"src": "3541:2:33",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3526:3:33",
														"nodeType": "YulIdentifier",
														"src": "3526:3:33"
													},
													"nativeSrc": "3526:18:33",
													"nodeType": "YulFunctionCall",
													"src": "3526:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "3513:12:33",
												"nodeType": "YulIdentifier",
												"src": "3513:12:33"
											},
											"nativeSrc": "3513:32:33",
											"nodeType": "YulFunctionCall",
											"src": "3513:32:33"
										},
										"variables": [
											{
												"name": "offset",
												"nativeSrc": "3503:6:33",
												"nodeType": "YulTypedName",
												"src": "3503:6:33",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3554:28:33",
										"nodeType": "YulVariableDeclaration",
										"src": "3554:28:33",
										"value": {
											"kind": "number",
											"nativeSrc": "3564:18:33",
											"nodeType": "YulLiteral",
											"src": "3564:18:33",
											"type": "",
											"value": "0xffffffffffffffff"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "3558:2:33",
												"nodeType": "YulTypedName",
												"src": "3558:2:33",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "3609:16:33",
											"nodeType": "YulBlock",
											"src": "3609:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3618:1:33",
																"nodeType": "YulLiteral",
																"src": "3618:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "3621:1:33",
																"nodeType": "YulLiteral",
																"src": "3621:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "3611:6:33",
															"nodeType": "YulIdentifier",
															"src": "3611:6:33"
														},
														"nativeSrc": "3611:12:33",
														"nodeType": "YulFunctionCall",
														"src": "3611:12:33"
													},
													"nativeSrc": "3611:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "3611:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "3597:6:33",
													"nodeType": "YulIdentifier",
													"src": "3597:6:33"
												},
												{
													"name": "_1",
													"nativeSrc": "3605:2:33",
													"nodeType": "YulIdentifier",
													"src": "3605:2:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "3594:2:33",
												"nodeType": "YulIdentifier",
												"src": "3594:2:33"
											},
											"nativeSrc": "3594:14:33",
											"nodeType": "YulFunctionCall",
											"src": "3594:14:33"
										},
										"nativeSrc": "3591:34:33",
										"nodeType": "YulIf",
										"src": "3591:34:33"
									},
									{
										"nativeSrc": "3634:32:33",
										"nodeType": "YulVariableDeclaration",
										"src": "3634:32:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3648:9:33",
													"nodeType": "YulIdentifier",
													"src": "3648:9:33"
												},
												{
													"name": "offset",
													"nativeSrc": "3659:6:33",
													"nodeType": "YulIdentifier",
													"src": "3659:6:33"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3644:3:33",
												"nodeType": "YulIdentifier",
												"src": "3644:3:33"
											},
											"nativeSrc": "3644:22:33",
											"nodeType": "YulFunctionCall",
											"src": "3644:22:33"
										},
										"variables": [
											{
												"name": "_2",
												"nativeSrc": "3638:2:33",
												"nodeType": "YulTypedName",
												"src": "3638:2:33",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "3714:16:33",
											"nodeType": "YulBlock",
											"src": "3714:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3723:1:33",
																"nodeType": "YulLiteral",
																"src": "3723:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "3726:1:33",
																"nodeType": "YulLiteral",
																"src": "3726:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "3716:6:33",
															"nodeType": "YulIdentifier",
															"src": "3716:6:33"
														},
														"nativeSrc": "3716:12:33",
														"nodeType": "YulFunctionCall",
														"src": "3716:12:33"
													},
													"nativeSrc": "3716:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "3716:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "_2",
																	"nativeSrc": "3693:2:33",
																	"nodeType": "YulIdentifier",
																	"src": "3693:2:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "3697:4:33",
																	"nodeType": "YulLiteral",
																	"src": "3697:4:33",
																	"type": "",
																	"value": "0x1f"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "3689:3:33",
																"nodeType": "YulIdentifier",
																"src": "3689:3:33"
															},
															"nativeSrc": "3689:13:33",
															"nodeType": "YulFunctionCall",
															"src": "3689:13:33"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "3704:7:33",
															"nodeType": "YulIdentifier",
															"src": "3704:7:33"
														}
													],
													"functionName": {
														"name": "slt",
														"nativeSrc": "3685:3:33",
														"nodeType": "YulIdentifier",
														"src": "3685:3:33"
													},
													"nativeSrc": "3685:27:33",
													"nodeType": "YulFunctionCall",
													"src": "3685:27:33"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "3678:6:33",
												"nodeType": "YulIdentifier",
												"src": "3678:6:33"
											},
											"nativeSrc": "3678:35:33",
											"nodeType": "YulFunctionCall",
											"src": "3678:35:33"
										},
										"nativeSrc": "3675:55:33",
										"nodeType": "YulIf",
										"src": "3675:55:33"
									},
									{
										"nativeSrc": "3739:30:33",
										"nodeType": "YulVariableDeclaration",
										"src": "3739:30:33",
										"value": {
											"arguments": [
												{
													"name": "_2",
													"nativeSrc": "3766:2:33",
													"nodeType": "YulIdentifier",
													"src": "3766:2:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "3753:12:33",
												"nodeType": "YulIdentifier",
												"src": "3753:12:33"
											},
											"nativeSrc": "3753:16:33",
											"nodeType": "YulFunctionCall",
											"src": "3753:16:33"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "3743:6:33",
												"nodeType": "YulTypedName",
												"src": "3743:6:33",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "3796:16:33",
											"nodeType": "YulBlock",
											"src": "3796:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3805:1:33",
																"nodeType": "YulLiteral",
																"src": "3805:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "3808:1:33",
																"nodeType": "YulLiteral",
																"src": "3808:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "3798:6:33",
															"nodeType": "YulIdentifier",
															"src": "3798:6:33"
														},
														"nativeSrc": "3798:12:33",
														"nodeType": "YulFunctionCall",
														"src": "3798:12:33"
													},
													"nativeSrc": "3798:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "3798:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "length",
													"nativeSrc": "3784:6:33",
													"nodeType": "YulIdentifier",
													"src": "3784:6:33"
												},
												{
													"name": "_1",
													"nativeSrc": "3792:2:33",
													"nodeType": "YulIdentifier",
													"src": "3792:2:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "3781:2:33",
												"nodeType": "YulIdentifier",
												"src": "3781:2:33"
											},
											"nativeSrc": "3781:14:33",
											"nodeType": "YulFunctionCall",
											"src": "3781:14:33"
										},
										"nativeSrc": "3778:34:33",
										"nodeType": "YulIf",
										"src": "3778:34:33"
									},
									{
										"body": {
											"nativeSrc": "3862:16:33",
											"nodeType": "YulBlock",
											"src": "3862:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3871:1:33",
																"nodeType": "YulLiteral",
																"src": "3871:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "3874:1:33",
																"nodeType": "YulLiteral",
																"src": "3874:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "3864:6:33",
															"nodeType": "YulIdentifier",
															"src": "3864:6:33"
														},
														"nativeSrc": "3864:12:33",
														"nodeType": "YulFunctionCall",
														"src": "3864:12:33"
													},
													"nativeSrc": "3864:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "3864:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "_2",
																	"nativeSrc": "3835:2:33",
																	"nodeType": "YulIdentifier",
																	"src": "3835:2:33"
																},
																{
																	"name": "length",
																	"nativeSrc": "3839:6:33",
																	"nodeType": "YulIdentifier",
																	"src": "3839:6:33"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "3831:3:33",
																"nodeType": "YulIdentifier",
																"src": "3831:3:33"
															},
															"nativeSrc": "3831:15:33",
															"nodeType": "YulFunctionCall",
															"src": "3831:15:33"
														},
														{
															"kind": "number",
															"nativeSrc": "3848:2:33",
															"nodeType": "YulLiteral",
															"src": "3848:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3827:3:33",
														"nodeType": "YulIdentifier",
														"src": "3827:3:33"
													},
													"nativeSrc": "3827:24:33",
													"nodeType": "YulFunctionCall",
													"src": "3827:24:33"
												},
												{
													"name": "dataEnd",
													"nativeSrc": "3853:7:33",
													"nodeType": "YulIdentifier",
													"src": "3853:7:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "3824:2:33",
												"nodeType": "YulIdentifier",
												"src": "3824:2:33"
											},
											"nativeSrc": "3824:37:33",
											"nodeType": "YulFunctionCall",
											"src": "3824:37:33"
										},
										"nativeSrc": "3821:57:33",
										"nodeType": "YulIf",
										"src": "3821:57:33"
									},
									{
										"nativeSrc": "3887:21:33",
										"nodeType": "YulAssignment",
										"src": "3887:21:33",
										"value": {
											"arguments": [
												{
													"name": "_2",
													"nativeSrc": "3901:2:33",
													"nodeType": "YulIdentifier",
													"src": "3901:2:33"
												},
												{
													"kind": "number",
													"nativeSrc": "3905:2:33",
													"nodeType": "YulLiteral",
													"src": "3905:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3897:3:33",
												"nodeType": "YulIdentifier",
												"src": "3897:3:33"
											},
											"nativeSrc": "3897:11:33",
											"nodeType": "YulFunctionCall",
											"src": "3897:11:33"
										},
										"variableNames": [
											{
												"name": "value3",
												"nativeSrc": "3887:6:33",
												"nodeType": "YulIdentifier",
												"src": "3887:6:33"
											}
										]
									},
									{
										"nativeSrc": "3917:16:33",
										"nodeType": "YulAssignment",
										"src": "3917:16:33",
										"value": {
											"name": "length",
											"nativeSrc": "3927:6:33",
											"nodeType": "YulIdentifier",
											"src": "3927:6:33"
										},
										"variableNames": [
											{
												"name": "value4",
												"nativeSrc": "3917:6:33",
												"nodeType": "YulIdentifier",
												"src": "3917:6:33"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_contract$_IERC3156FlashBorrower_$797t_addresst_uint256t_bytes_calldata_ptr",
							"nativeSrc": "2974:965:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3077:9:33",
									"nodeType": "YulTypedName",
									"src": "3077:9:33",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "3088:7:33",
									"nodeType": "YulTypedName",
									"src": "3088:7:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "3100:6:33",
									"nodeType": "YulTypedName",
									"src": "3100:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "3108:6:33",
									"nodeType": "YulTypedName",
									"src": "3108:6:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "3116:6:33",
									"nodeType": "YulTypedName",
									"src": "3116:6:33",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "3124:6:33",
									"nodeType": "YulTypedName",
									"src": "3124:6:33",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "3132:6:33",
									"nodeType": "YulTypedName",
									"src": "3132:6:33",
									"type": ""
								}
							],
							"src": "2974:965:33"
						},
						{
							"body": {
								"nativeSrc": "4043:93:33",
								"nodeType": "YulBlock",
								"src": "4043:93:33",
								"statements": [
									{
										"nativeSrc": "4053:26:33",
										"nodeType": "YulAssignment",
										"src": "4053:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4065:9:33",
													"nodeType": "YulIdentifier",
													"src": "4065:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "4076:2:33",
													"nodeType": "YulLiteral",
													"src": "4076:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "4061:3:33",
												"nodeType": "YulIdentifier",
												"src": "4061:3:33"
											},
											"nativeSrc": "4061:18:33",
											"nodeType": "YulFunctionCall",
											"src": "4061:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "4053:4:33",
												"nodeType": "YulIdentifier",
												"src": "4053:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4095:9:33",
													"nodeType": "YulIdentifier",
													"src": "4095:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "4110:6:33",
															"nodeType": "YulIdentifier",
															"src": "4110:6:33"
														},
														{
															"kind": "number",
															"nativeSrc": "4118:10:33",
															"nodeType": "YulLiteral",
															"src": "4118:10:33",
															"type": "",
															"value": "0xffffffff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "4106:3:33",
														"nodeType": "YulIdentifier",
														"src": "4106:3:33"
													},
													"nativeSrc": "4106:23:33",
													"nodeType": "YulFunctionCall",
													"src": "4106:23:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4088:6:33",
												"nodeType": "YulIdentifier",
												"src": "4088:6:33"
											},
											"nativeSrc": "4088:42:33",
											"nodeType": "YulFunctionCall",
											"src": "4088:42:33"
										},
										"nativeSrc": "4088:42:33",
										"nodeType": "YulExpressionStatement",
										"src": "4088:42:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed",
							"nativeSrc": "3944:192:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4012:9:33",
									"nodeType": "YulTypedName",
									"src": "4012:9:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "4023:6:33",
									"nodeType": "YulTypedName",
									"src": "4023:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "4034:4:33",
									"nodeType": "YulTypedName",
									"src": "4034:4:33",
									"type": ""
								}
							],
							"src": "3944:192:33"
						},
						{
							"body": {
								"nativeSrc": "4498:902:33",
								"nodeType": "YulBlock",
								"src": "4498:902:33",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4515:9:33",
													"nodeType": "YulIdentifier",
													"src": "4515:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "4530:6:33",
															"nodeType": "YulIdentifier",
															"src": "4530:6:33"
														},
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "4542:3:33",
																	"nodeType": "YulLiteral",
																	"src": "4542:3:33",
																	"type": "",
																	"value": "248"
																},
																{
																	"kind": "number",
																	"nativeSrc": "4547:3:33",
																	"nodeType": "YulLiteral",
																	"src": "4547:3:33",
																	"type": "",
																	"value": "255"
																}
															],
															"functionName": {
																"name": "shl",
																"nativeSrc": "4538:3:33",
																"nodeType": "YulIdentifier",
																"src": "4538:3:33"
															},
															"nativeSrc": "4538:13:33",
															"nodeType": "YulFunctionCall",
															"src": "4538:13:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "4526:3:33",
														"nodeType": "YulIdentifier",
														"src": "4526:3:33"
													},
													"nativeSrc": "4526:26:33",
													"nodeType": "YulFunctionCall",
													"src": "4526:26:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4508:6:33",
												"nodeType": "YulIdentifier",
												"src": "4508:6:33"
											},
											"nativeSrc": "4508:45:33",
											"nodeType": "YulFunctionCall",
											"src": "4508:45:33"
										},
										"nativeSrc": "4508:45:33",
										"nodeType": "YulExpressionStatement",
										"src": "4508:45:33"
									},
									{
										"nativeSrc": "4562:12:33",
										"nodeType": "YulVariableDeclaration",
										"src": "4562:12:33",
										"value": {
											"kind": "number",
											"nativeSrc": "4572:2:33",
											"nodeType": "YulLiteral",
											"src": "4572:2:33",
											"type": "",
											"value": "32"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "4566:2:33",
												"nodeType": "YulTypedName",
												"src": "4566:2:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4594:9:33",
															"nodeType": "YulIdentifier",
															"src": "4594:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "4605:2:33",
															"nodeType": "YulLiteral",
															"src": "4605:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4590:3:33",
														"nodeType": "YulIdentifier",
														"src": "4590:3:33"
													},
													"nativeSrc": "4590:18:33",
													"nodeType": "YulFunctionCall",
													"src": "4590:18:33"
												},
												{
													"kind": "number",
													"nativeSrc": "4610:3:33",
													"nodeType": "YulLiteral",
													"src": "4610:3:33",
													"type": "",
													"value": "224"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4583:6:33",
												"nodeType": "YulIdentifier",
												"src": "4583:6:33"
											},
											"nativeSrc": "4583:31:33",
											"nodeType": "YulFunctionCall",
											"src": "4583:31:33"
										},
										"nativeSrc": "4583:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "4583:31:33"
									},
									{
										"nativeSrc": "4623:60:33",
										"nodeType": "YulVariableDeclaration",
										"src": "4623:60:33",
										"value": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "4655:6:33",
													"nodeType": "YulIdentifier",
													"src": "4655:6:33"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4667:9:33",
															"nodeType": "YulIdentifier",
															"src": "4667:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "4678:3:33",
															"nodeType": "YulLiteral",
															"src": "4678:3:33",
															"type": "",
															"value": "224"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4663:3:33",
														"nodeType": "YulIdentifier",
														"src": "4663:3:33"
													},
													"nativeSrc": "4663:19:33",
													"nodeType": "YulFunctionCall",
													"src": "4663:19:33"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "4637:17:33",
												"nodeType": "YulIdentifier",
												"src": "4637:17:33"
											},
											"nativeSrc": "4637:46:33",
											"nodeType": "YulFunctionCall",
											"src": "4637:46:33"
										},
										"variables": [
											{
												"name": "tail_1",
												"nativeSrc": "4627:6:33",
												"nodeType": "YulTypedName",
												"src": "4627:6:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4703:9:33",
															"nodeType": "YulIdentifier",
															"src": "4703:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "4714:2:33",
															"nodeType": "YulLiteral",
															"src": "4714:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4699:3:33",
														"nodeType": "YulIdentifier",
														"src": "4699:3:33"
													},
													"nativeSrc": "4699:18:33",
													"nodeType": "YulFunctionCall",
													"src": "4699:18:33"
												},
												{
													"arguments": [
														{
															"name": "tail_1",
															"nativeSrc": "4723:6:33",
															"nodeType": "YulIdentifier",
															"src": "4723:6:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "4731:9:33",
															"nodeType": "YulIdentifier",
															"src": "4731:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "4719:3:33",
														"nodeType": "YulIdentifier",
														"src": "4719:3:33"
													},
													"nativeSrc": "4719:22:33",
													"nodeType": "YulFunctionCall",
													"src": "4719:22:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4692:6:33",
												"nodeType": "YulIdentifier",
												"src": "4692:6:33"
											},
											"nativeSrc": "4692:50:33",
											"nodeType": "YulFunctionCall",
											"src": "4692:50:33"
										},
										"nativeSrc": "4692:50:33",
										"nodeType": "YulExpressionStatement",
										"src": "4692:50:33"
									},
									{
										"nativeSrc": "4751:47:33",
										"nodeType": "YulVariableDeclaration",
										"src": "4751:47:33",
										"value": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "4783:6:33",
													"nodeType": "YulIdentifier",
													"src": "4783:6:33"
												},
												{
													"name": "tail_1",
													"nativeSrc": "4791:6:33",
													"nodeType": "YulIdentifier",
													"src": "4791:6:33"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "4765:17:33",
												"nodeType": "YulIdentifier",
												"src": "4765:17:33"
											},
											"nativeSrc": "4765:33:33",
											"nodeType": "YulFunctionCall",
											"src": "4765:33:33"
										},
										"variables": [
											{
												"name": "tail_2",
												"nativeSrc": "4755:6:33",
												"nodeType": "YulTypedName",
												"src": "4755:6:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4818:9:33",
															"nodeType": "YulIdentifier",
															"src": "4818:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "4829:2:33",
															"nodeType": "YulLiteral",
															"src": "4829:2:33",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4814:3:33",
														"nodeType": "YulIdentifier",
														"src": "4814:3:33"
													},
													"nativeSrc": "4814:18:33",
													"nodeType": "YulFunctionCall",
													"src": "4814:18:33"
												},
												{
													"name": "value3",
													"nativeSrc": "4834:6:33",
													"nodeType": "YulIdentifier",
													"src": "4834:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4807:6:33",
												"nodeType": "YulIdentifier",
												"src": "4807:6:33"
											},
											"nativeSrc": "4807:34:33",
											"nodeType": "YulFunctionCall",
											"src": "4807:34:33"
										},
										"nativeSrc": "4807:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "4807:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4861:9:33",
															"nodeType": "YulIdentifier",
															"src": "4861:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "4872:3:33",
															"nodeType": "YulLiteral",
															"src": "4872:3:33",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4857:3:33",
														"nodeType": "YulIdentifier",
														"src": "4857:3:33"
													},
													"nativeSrc": "4857:19:33",
													"nodeType": "YulFunctionCall",
													"src": "4857:19:33"
												},
												{
													"arguments": [
														{
															"name": "value4",
															"nativeSrc": "4882:6:33",
															"nodeType": "YulIdentifier",
															"src": "4882:6:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "4898:3:33",
																			"nodeType": "YulLiteral",
																			"src": "4898:3:33",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "4903:1:33",
																			"nodeType": "YulLiteral",
																			"src": "4903:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "4894:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "4894:3:33"
																	},
																	"nativeSrc": "4894:11:33",
																	"nodeType": "YulFunctionCall",
																	"src": "4894:11:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "4907:1:33",
																	"nodeType": "YulLiteral",
																	"src": "4907:1:33",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "4890:3:33",
																"nodeType": "YulIdentifier",
																"src": "4890:3:33"
															},
															"nativeSrc": "4890:19:33",
															"nodeType": "YulFunctionCall",
															"src": "4890:19:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "4878:3:33",
														"nodeType": "YulIdentifier",
														"src": "4878:3:33"
													},
													"nativeSrc": "4878:32:33",
													"nodeType": "YulFunctionCall",
													"src": "4878:32:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4850:6:33",
												"nodeType": "YulIdentifier",
												"src": "4850:6:33"
											},
											"nativeSrc": "4850:61:33",
											"nodeType": "YulFunctionCall",
											"src": "4850:61:33"
										},
										"nativeSrc": "4850:61:33",
										"nodeType": "YulExpressionStatement",
										"src": "4850:61:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4931:9:33",
															"nodeType": "YulIdentifier",
															"src": "4931:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "4942:3:33",
															"nodeType": "YulLiteral",
															"src": "4942:3:33",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4927:3:33",
														"nodeType": "YulIdentifier",
														"src": "4927:3:33"
													},
													"nativeSrc": "4927:19:33",
													"nodeType": "YulFunctionCall",
													"src": "4927:19:33"
												},
												{
													"name": "value5",
													"nativeSrc": "4948:6:33",
													"nodeType": "YulIdentifier",
													"src": "4948:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4920:6:33",
												"nodeType": "YulIdentifier",
												"src": "4920:6:33"
											},
											"nativeSrc": "4920:35:33",
											"nodeType": "YulFunctionCall",
											"src": "4920:35:33"
										},
										"nativeSrc": "4920:35:33",
										"nodeType": "YulExpressionStatement",
										"src": "4920:35:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4975:9:33",
															"nodeType": "YulIdentifier",
															"src": "4975:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "4986:3:33",
															"nodeType": "YulLiteral",
															"src": "4986:3:33",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4971:3:33",
														"nodeType": "YulIdentifier",
														"src": "4971:3:33"
													},
													"nativeSrc": "4971:19:33",
													"nodeType": "YulFunctionCall",
													"src": "4971:19:33"
												},
												{
													"arguments": [
														{
															"name": "tail_2",
															"nativeSrc": "4996:6:33",
															"nodeType": "YulIdentifier",
															"src": "4996:6:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "5004:9:33",
															"nodeType": "YulIdentifier",
															"src": "5004:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "4992:3:33",
														"nodeType": "YulIdentifier",
														"src": "4992:3:33"
													},
													"nativeSrc": "4992:22:33",
													"nodeType": "YulFunctionCall",
													"src": "4992:22:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4964:6:33",
												"nodeType": "YulIdentifier",
												"src": "4964:6:33"
											},
											"nativeSrc": "4964:51:33",
											"nodeType": "YulFunctionCall",
											"src": "4964:51:33"
										},
										"nativeSrc": "4964:51:33",
										"nodeType": "YulExpressionStatement",
										"src": "4964:51:33"
									},
									{
										"nativeSrc": "5024:17:33",
										"nodeType": "YulVariableDeclaration",
										"src": "5024:17:33",
										"value": {
											"name": "tail_2",
											"nativeSrc": "5035:6:33",
											"nodeType": "YulIdentifier",
											"src": "5035:6:33"
										},
										"variables": [
											{
												"name": "pos",
												"nativeSrc": "5028:3:33",
												"nodeType": "YulTypedName",
												"src": "5028:3:33",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "5050:27:33",
										"nodeType": "YulVariableDeclaration",
										"src": "5050:27:33",
										"value": {
											"arguments": [
												{
													"name": "value6",
													"nativeSrc": "5070:6:33",
													"nodeType": "YulIdentifier",
													"src": "5070:6:33"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "5064:5:33",
												"nodeType": "YulIdentifier",
												"src": "5064:5:33"
											},
											"nativeSrc": "5064:13:33",
											"nodeType": "YulFunctionCall",
											"src": "5064:13:33"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "5054:6:33",
												"nodeType": "YulTypedName",
												"src": "5054:6:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "tail_2",
													"nativeSrc": "5093:6:33",
													"nodeType": "YulIdentifier",
													"src": "5093:6:33"
												},
												{
													"name": "length",
													"nativeSrc": "5101:6:33",
													"nodeType": "YulIdentifier",
													"src": "5101:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5086:6:33",
												"nodeType": "YulIdentifier",
												"src": "5086:6:33"
											},
											"nativeSrc": "5086:22:33",
											"nodeType": "YulFunctionCall",
											"src": "5086:22:33"
										},
										"nativeSrc": "5086:22:33",
										"nodeType": "YulExpressionStatement",
										"src": "5086:22:33"
									},
									{
										"nativeSrc": "5117:22:33",
										"nodeType": "YulAssignment",
										"src": "5117:22:33",
										"value": {
											"arguments": [
												{
													"name": "tail_2",
													"nativeSrc": "5128:6:33",
													"nodeType": "YulIdentifier",
													"src": "5128:6:33"
												},
												{
													"kind": "number",
													"nativeSrc": "5136:2:33",
													"nodeType": "YulLiteral",
													"src": "5136:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5124:3:33",
												"nodeType": "YulIdentifier",
												"src": "5124:3:33"
											},
											"nativeSrc": "5124:15:33",
											"nodeType": "YulFunctionCall",
											"src": "5124:15:33"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "5117:3:33",
												"nodeType": "YulIdentifier",
												"src": "5117:3:33"
											}
										]
									},
									{
										"nativeSrc": "5148:29:33",
										"nodeType": "YulVariableDeclaration",
										"src": "5148:29:33",
										"value": {
											"arguments": [
												{
													"name": "value6",
													"nativeSrc": "5166:6:33",
													"nodeType": "YulIdentifier",
													"src": "5166:6:33"
												},
												{
													"kind": "number",
													"nativeSrc": "5174:2:33",
													"nodeType": "YulLiteral",
													"src": "5174:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5162:3:33",
												"nodeType": "YulIdentifier",
												"src": "5162:3:33"
											},
											"nativeSrc": "5162:15:33",
											"nodeType": "YulFunctionCall",
											"src": "5162:15:33"
										},
										"variables": [
											{
												"name": "srcPtr",
												"nativeSrc": "5152:6:33",
												"nodeType": "YulTypedName",
												"src": "5152:6:33",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "5186:10:33",
										"nodeType": "YulVariableDeclaration",
										"src": "5186:10:33",
										"value": {
											"kind": "number",
											"nativeSrc": "5195:1:33",
											"nodeType": "YulLiteral",
											"src": "5195:1:33",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nativeSrc": "5190:1:33",
												"nodeType": "YulTypedName",
												"src": "5190:1:33",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "5254:120:33",
											"nodeType": "YulBlock",
											"src": "5254:120:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"name": "pos",
																"nativeSrc": "5275:3:33",
																"nodeType": "YulIdentifier",
																"src": "5275:3:33"
															},
															{
																"arguments": [
																	{
																		"name": "srcPtr",
																		"nativeSrc": "5286:6:33",
																		"nodeType": "YulIdentifier",
																		"src": "5286:6:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5280:5:33",
																	"nodeType": "YulIdentifier",
																	"src": "5280:5:33"
																},
																"nativeSrc": "5280:13:33",
																"nodeType": "YulFunctionCall",
																"src": "5280:13:33"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "5268:6:33",
															"nodeType": "YulIdentifier",
															"src": "5268:6:33"
														},
														"nativeSrc": "5268:26:33",
														"nodeType": "YulFunctionCall",
														"src": "5268:26:33"
													},
													"nativeSrc": "5268:26:33",
													"nodeType": "YulExpressionStatement",
													"src": "5268:26:33"
												},
												{
													"nativeSrc": "5307:19:33",
													"nodeType": "YulAssignment",
													"src": "5307:19:33",
													"value": {
														"arguments": [
															{
																"name": "pos",
																"nativeSrc": "5318:3:33",
																"nodeType": "YulIdentifier",
																"src": "5318:3:33"
															},
															{
																"name": "_1",
																"nativeSrc": "5323:2:33",
																"nodeType": "YulIdentifier",
																"src": "5323:2:33"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "5314:3:33",
															"nodeType": "YulIdentifier",
															"src": "5314:3:33"
														},
														"nativeSrc": "5314:12:33",
														"nodeType": "YulFunctionCall",
														"src": "5314:12:33"
													},
													"variableNames": [
														{
															"name": "pos",
															"nativeSrc": "5307:3:33",
															"nodeType": "YulIdentifier",
															"src": "5307:3:33"
														}
													]
												},
												{
													"nativeSrc": "5339:25:33",
													"nodeType": "YulAssignment",
													"src": "5339:25:33",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nativeSrc": "5353:6:33",
																"nodeType": "YulIdentifier",
																"src": "5353:6:33"
															},
															{
																"name": "_1",
																"nativeSrc": "5361:2:33",
																"nodeType": "YulIdentifier",
																"src": "5361:2:33"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "5349:3:33",
															"nodeType": "YulIdentifier",
															"src": "5349:3:33"
														},
														"nativeSrc": "5349:15:33",
														"nodeType": "YulFunctionCall",
														"src": "5349:15:33"
													},
													"variableNames": [
														{
															"name": "srcPtr",
															"nativeSrc": "5339:6:33",
															"nodeType": "YulIdentifier",
															"src": "5339:6:33"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nativeSrc": "5216:1:33",
													"nodeType": "YulIdentifier",
													"src": "5216:1:33"
												},
												{
													"name": "length",
													"nativeSrc": "5219:6:33",
													"nodeType": "YulIdentifier",
													"src": "5219:6:33"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "5213:2:33",
												"nodeType": "YulIdentifier",
												"src": "5213:2:33"
											},
											"nativeSrc": "5213:13:33",
											"nodeType": "YulFunctionCall",
											"src": "5213:13:33"
										},
										"nativeSrc": "5205:169:33",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "5227:18:33",
											"nodeType": "YulBlock",
											"src": "5227:18:33",
											"statements": [
												{
													"nativeSrc": "5229:14:33",
													"nodeType": "YulAssignment",
													"src": "5229:14:33",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nativeSrc": "5238:1:33",
																"nodeType": "YulIdentifier",
																"src": "5238:1:33"
															},
															{
																"kind": "number",
																"nativeSrc": "5241:1:33",
																"nodeType": "YulLiteral",
																"src": "5241:1:33",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "5234:3:33",
															"nodeType": "YulIdentifier",
															"src": "5234:3:33"
														},
														"nativeSrc": "5234:9:33",
														"nodeType": "YulFunctionCall",
														"src": "5234:9:33"
													},
													"variableNames": [
														{
															"name": "i",
															"nativeSrc": "5229:1:33",
															"nodeType": "YulIdentifier",
															"src": "5229:1:33"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "5209:3:33",
											"nodeType": "YulBlock",
											"src": "5209:3:33",
											"statements": []
										},
										"src": "5205:169:33"
									},
									{
										"nativeSrc": "5383:11:33",
										"nodeType": "YulAssignment",
										"src": "5383:11:33",
										"value": {
											"name": "pos",
											"nativeSrc": "5391:3:33",
											"nodeType": "YulIdentifier",
											"src": "5391:3:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5383:4:33",
												"nodeType": "YulIdentifier",
												"src": "5383:4:33"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
							"nativeSrc": "4141:1259:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4419:9:33",
									"nodeType": "YulTypedName",
									"src": "4419:9:33",
									"type": ""
								},
								{
									"name": "value6",
									"nativeSrc": "4430:6:33",
									"nodeType": "YulTypedName",
									"src": "4430:6:33",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "4438:6:33",
									"nodeType": "YulTypedName",
									"src": "4438:6:33",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "4446:6:33",
									"nodeType": "YulTypedName",
									"src": "4446:6:33",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "4454:6:33",
									"nodeType": "YulTypedName",
									"src": "4454:6:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "4462:6:33",
									"nodeType": "YulTypedName",
									"src": "4462:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "4470:6:33",
									"nodeType": "YulTypedName",
									"src": "4470:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "4478:6:33",
									"nodeType": "YulTypedName",
									"src": "4478:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "4489:4:33",
									"nodeType": "YulTypedName",
									"src": "4489:4:33",
									"type": ""
								}
							],
							"src": "4141:1259:33"
						},
						{
							"body": {
								"nativeSrc": "5504:97:33",
								"nodeType": "YulBlock",
								"src": "5504:97:33",
								"statements": [
									{
										"nativeSrc": "5514:26:33",
										"nodeType": "YulAssignment",
										"src": "5514:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5526:9:33",
													"nodeType": "YulIdentifier",
													"src": "5526:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "5537:2:33",
													"nodeType": "YulLiteral",
													"src": "5537:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5522:3:33",
												"nodeType": "YulIdentifier",
												"src": "5522:3:33"
											},
											"nativeSrc": "5522:18:33",
											"nodeType": "YulFunctionCall",
											"src": "5522:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5514:4:33",
												"nodeType": "YulIdentifier",
												"src": "5514:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5556:9:33",
													"nodeType": "YulIdentifier",
													"src": "5556:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "5571:6:33",
															"nodeType": "YulIdentifier",
															"src": "5571:6:33"
														},
														{
															"kind": "number",
															"nativeSrc": "5579:14:33",
															"nodeType": "YulLiteral",
															"src": "5579:14:33",
															"type": "",
															"value": "0xffffffffffff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "5567:3:33",
														"nodeType": "YulIdentifier",
														"src": "5567:3:33"
													},
													"nativeSrc": "5567:27:33",
													"nodeType": "YulFunctionCall",
													"src": "5567:27:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5549:6:33",
												"nodeType": "YulIdentifier",
												"src": "5549:6:33"
											},
											"nativeSrc": "5549:46:33",
											"nodeType": "YulFunctionCall",
											"src": "5549:46:33"
										},
										"nativeSrc": "5549:46:33",
										"nodeType": "YulExpressionStatement",
										"src": "5549:46:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed",
							"nativeSrc": "5405:196:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5473:9:33",
									"nodeType": "YulTypedName",
									"src": "5473:9:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5484:6:33",
									"nodeType": "YulTypedName",
									"src": "5484:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5495:4:33",
									"nodeType": "YulTypedName",
									"src": "5495:4:33",
									"type": ""
								}
							],
							"src": "5405:196:33"
						},
						{
							"body": {
								"nativeSrc": "5653:109:33",
								"nodeType": "YulBlock",
								"src": "5653:109:33",
								"statements": [
									{
										"nativeSrc": "5663:29:33",
										"nodeType": "YulAssignment",
										"src": "5663:29:33",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "5685:6:33",
													"nodeType": "YulIdentifier",
													"src": "5685:6:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "5672:12:33",
												"nodeType": "YulIdentifier",
												"src": "5672:12:33"
											},
											"nativeSrc": "5672:20:33",
											"nodeType": "YulFunctionCall",
											"src": "5672:20:33"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "5663:5:33",
												"nodeType": "YulIdentifier",
												"src": "5663:5:33"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "5740:16:33",
											"nodeType": "YulBlock",
											"src": "5740:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "5749:1:33",
																"nodeType": "YulLiteral",
																"src": "5749:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "5752:1:33",
																"nodeType": "YulLiteral",
																"src": "5752:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "5742:6:33",
															"nodeType": "YulIdentifier",
															"src": "5742:6:33"
														},
														"nativeSrc": "5742:12:33",
														"nodeType": "YulFunctionCall",
														"src": "5742:12:33"
													},
													"nativeSrc": "5742:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "5742:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "5714:5:33",
															"nodeType": "YulIdentifier",
															"src": "5714:5:33"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "5725:5:33",
																	"nodeType": "YulIdentifier",
																	"src": "5725:5:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "5732:4:33",
																	"nodeType": "YulLiteral",
																	"src": "5732:4:33",
																	"type": "",
																	"value": "0xff"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "5721:3:33",
																"nodeType": "YulIdentifier",
																"src": "5721:3:33"
															},
															"nativeSrc": "5721:16:33",
															"nodeType": "YulFunctionCall",
															"src": "5721:16:33"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "5711:2:33",
														"nodeType": "YulIdentifier",
														"src": "5711:2:33"
													},
													"nativeSrc": "5711:27:33",
													"nodeType": "YulFunctionCall",
													"src": "5711:27:33"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "5704:6:33",
												"nodeType": "YulIdentifier",
												"src": "5704:6:33"
											},
											"nativeSrc": "5704:35:33",
											"nodeType": "YulFunctionCall",
											"src": "5704:35:33"
										},
										"nativeSrc": "5701:55:33",
										"nodeType": "YulIf",
										"src": "5701:55:33"
									}
								]
							},
							"name": "abi_decode_uint8",
							"nativeSrc": "5606:156:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "5632:6:33",
									"nodeType": "YulTypedName",
									"src": "5632:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "5643:5:33",
									"nodeType": "YulTypedName",
									"src": "5643:5:33",
									"type": ""
								}
							],
							"src": "5606:156:33"
						},
						{
							"body": {
								"nativeSrc": "5920:439:33",
								"nodeType": "YulBlock",
								"src": "5920:439:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "5967:16:33",
											"nodeType": "YulBlock",
											"src": "5967:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "5976:1:33",
																"nodeType": "YulLiteral",
																"src": "5976:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "5979:1:33",
																"nodeType": "YulLiteral",
																"src": "5979:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "5969:6:33",
															"nodeType": "YulIdentifier",
															"src": "5969:6:33"
														},
														"nativeSrc": "5969:12:33",
														"nodeType": "YulFunctionCall",
														"src": "5969:12:33"
													},
													"nativeSrc": "5969:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "5969:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "5941:7:33",
															"nodeType": "YulIdentifier",
															"src": "5941:7:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "5950:9:33",
															"nodeType": "YulIdentifier",
															"src": "5950:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "5937:3:33",
														"nodeType": "YulIdentifier",
														"src": "5937:3:33"
													},
													"nativeSrc": "5937:23:33",
													"nodeType": "YulFunctionCall",
													"src": "5937:23:33"
												},
												{
													"kind": "number",
													"nativeSrc": "5962:3:33",
													"nodeType": "YulLiteral",
													"src": "5962:3:33",
													"type": "",
													"value": "192"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "5933:3:33",
												"nodeType": "YulIdentifier",
												"src": "5933:3:33"
											},
											"nativeSrc": "5933:33:33",
											"nodeType": "YulFunctionCall",
											"src": "5933:33:33"
										},
										"nativeSrc": "5930:53:33",
										"nodeType": "YulIf",
										"src": "5930:53:33"
									},
									{
										"nativeSrc": "5992:36:33",
										"nodeType": "YulVariableDeclaration",
										"src": "5992:36:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6018:9:33",
													"nodeType": "YulIdentifier",
													"src": "6018:9:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6005:12:33",
												"nodeType": "YulIdentifier",
												"src": "6005:12:33"
											},
											"nativeSrc": "6005:23:33",
											"nodeType": "YulFunctionCall",
											"src": "6005:23:33"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "5996:5:33",
												"nodeType": "YulTypedName",
												"src": "5996:5:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "6062:5:33",
													"nodeType": "YulIdentifier",
													"src": "6062:5:33"
												}
											],
											"functionName": {
												"name": "validator_revert_address",
												"nativeSrc": "6037:24:33",
												"nodeType": "YulIdentifier",
												"src": "6037:24:33"
											},
											"nativeSrc": "6037:31:33",
											"nodeType": "YulFunctionCall",
											"src": "6037:31:33"
										},
										"nativeSrc": "6037:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "6037:31:33"
									},
									{
										"nativeSrc": "6077:15:33",
										"nodeType": "YulAssignment",
										"src": "6077:15:33",
										"value": {
											"name": "value",
											"nativeSrc": "6087:5:33",
											"nodeType": "YulIdentifier",
											"src": "6087:5:33"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "6077:6:33",
												"nodeType": "YulIdentifier",
												"src": "6077:6:33"
											}
										]
									},
									{
										"nativeSrc": "6101:42:33",
										"nodeType": "YulAssignment",
										"src": "6101:42:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6128:9:33",
															"nodeType": "YulIdentifier",
															"src": "6128:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6139:2:33",
															"nodeType": "YulLiteral",
															"src": "6139:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6124:3:33",
														"nodeType": "YulIdentifier",
														"src": "6124:3:33"
													},
													"nativeSrc": "6124:18:33",
													"nodeType": "YulFunctionCall",
													"src": "6124:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6111:12:33",
												"nodeType": "YulIdentifier",
												"src": "6111:12:33"
											},
											"nativeSrc": "6111:32:33",
											"nodeType": "YulFunctionCall",
											"src": "6111:32:33"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "6101:6:33",
												"nodeType": "YulIdentifier",
												"src": "6101:6:33"
											}
										]
									},
									{
										"nativeSrc": "6152:42:33",
										"nodeType": "YulAssignment",
										"src": "6152:42:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6179:9:33",
															"nodeType": "YulIdentifier",
															"src": "6179:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6190:2:33",
															"nodeType": "YulLiteral",
															"src": "6190:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6175:3:33",
														"nodeType": "YulIdentifier",
														"src": "6175:3:33"
													},
													"nativeSrc": "6175:18:33",
													"nodeType": "YulFunctionCall",
													"src": "6175:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6162:12:33",
												"nodeType": "YulIdentifier",
												"src": "6162:12:33"
											},
											"nativeSrc": "6162:32:33",
											"nodeType": "YulFunctionCall",
											"src": "6162:32:33"
										},
										"variableNames": [
											{
												"name": "value2",
												"nativeSrc": "6152:6:33",
												"nodeType": "YulIdentifier",
												"src": "6152:6:33"
											}
										]
									},
									{
										"nativeSrc": "6203:46:33",
										"nodeType": "YulAssignment",
										"src": "6203:46:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6234:9:33",
															"nodeType": "YulIdentifier",
															"src": "6234:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6245:2:33",
															"nodeType": "YulLiteral",
															"src": "6245:2:33",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6230:3:33",
														"nodeType": "YulIdentifier",
														"src": "6230:3:33"
													},
													"nativeSrc": "6230:18:33",
													"nodeType": "YulFunctionCall",
													"src": "6230:18:33"
												}
											],
											"functionName": {
												"name": "abi_decode_uint8",
												"nativeSrc": "6213:16:33",
												"nodeType": "YulIdentifier",
												"src": "6213:16:33"
											},
											"nativeSrc": "6213:36:33",
											"nodeType": "YulFunctionCall",
											"src": "6213:36:33"
										},
										"variableNames": [
											{
												"name": "value3",
												"nativeSrc": "6203:6:33",
												"nodeType": "YulIdentifier",
												"src": "6203:6:33"
											}
										]
									},
									{
										"nativeSrc": "6258:43:33",
										"nodeType": "YulAssignment",
										"src": "6258:43:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6285:9:33",
															"nodeType": "YulIdentifier",
															"src": "6285:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6296:3:33",
															"nodeType": "YulLiteral",
															"src": "6296:3:33",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6281:3:33",
														"nodeType": "YulIdentifier",
														"src": "6281:3:33"
													},
													"nativeSrc": "6281:19:33",
													"nodeType": "YulFunctionCall",
													"src": "6281:19:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6268:12:33",
												"nodeType": "YulIdentifier",
												"src": "6268:12:33"
											},
											"nativeSrc": "6268:33:33",
											"nodeType": "YulFunctionCall",
											"src": "6268:33:33"
										},
										"variableNames": [
											{
												"name": "value4",
												"nativeSrc": "6258:6:33",
												"nodeType": "YulIdentifier",
												"src": "6258:6:33"
											}
										]
									},
									{
										"nativeSrc": "6310:43:33",
										"nodeType": "YulAssignment",
										"src": "6310:43:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6337:9:33",
															"nodeType": "YulIdentifier",
															"src": "6337:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6348:3:33",
															"nodeType": "YulLiteral",
															"src": "6348:3:33",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6333:3:33",
														"nodeType": "YulIdentifier",
														"src": "6333:3:33"
													},
													"nativeSrc": "6333:19:33",
													"nodeType": "YulFunctionCall",
													"src": "6333:19:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6320:12:33",
												"nodeType": "YulIdentifier",
												"src": "6320:12:33"
											},
											"nativeSrc": "6320:33:33",
											"nodeType": "YulFunctionCall",
											"src": "6320:33:33"
										},
										"variableNames": [
											{
												"name": "value5",
												"nativeSrc": "6310:6:33",
												"nodeType": "YulIdentifier",
												"src": "6310:6:33"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
							"nativeSrc": "5767:592:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5846:9:33",
									"nodeType": "YulTypedName",
									"src": "5846:9:33",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "5857:7:33",
									"nodeType": "YulTypedName",
									"src": "5857:7:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "5869:6:33",
									"nodeType": "YulTypedName",
									"src": "5869:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "5877:6:33",
									"nodeType": "YulTypedName",
									"src": "5877:6:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "5885:6:33",
									"nodeType": "YulTypedName",
									"src": "5885:6:33",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "5893:6:33",
									"nodeType": "YulTypedName",
									"src": "5893:6:33",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "5901:6:33",
									"nodeType": "YulTypedName",
									"src": "5901:6:33",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "5909:6:33",
									"nodeType": "YulTypedName",
									"src": "5909:6:33",
									"type": ""
								}
							],
							"src": "5767:592:33"
						},
						{
							"body": {
								"nativeSrc": "6534:564:33",
								"nodeType": "YulBlock",
								"src": "6534:564:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "6581:16:33",
											"nodeType": "YulBlock",
											"src": "6581:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "6590:1:33",
																"nodeType": "YulLiteral",
																"src": "6590:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "6593:1:33",
																"nodeType": "YulLiteral",
																"src": "6593:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "6583:6:33",
															"nodeType": "YulIdentifier",
															"src": "6583:6:33"
														},
														"nativeSrc": "6583:12:33",
														"nodeType": "YulFunctionCall",
														"src": "6583:12:33"
													},
													"nativeSrc": "6583:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "6583:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "6555:7:33",
															"nodeType": "YulIdentifier",
															"src": "6555:7:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "6564:9:33",
															"nodeType": "YulIdentifier",
															"src": "6564:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "6551:3:33",
														"nodeType": "YulIdentifier",
														"src": "6551:3:33"
													},
													"nativeSrc": "6551:23:33",
													"nodeType": "YulFunctionCall",
													"src": "6551:23:33"
												},
												{
													"kind": "number",
													"nativeSrc": "6576:3:33",
													"nodeType": "YulLiteral",
													"src": "6576:3:33",
													"type": "",
													"value": "224"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "6547:3:33",
												"nodeType": "YulIdentifier",
												"src": "6547:3:33"
											},
											"nativeSrc": "6547:33:33",
											"nodeType": "YulFunctionCall",
											"src": "6547:33:33"
										},
										"nativeSrc": "6544:53:33",
										"nodeType": "YulIf",
										"src": "6544:53:33"
									},
									{
										"nativeSrc": "6606:36:33",
										"nodeType": "YulVariableDeclaration",
										"src": "6606:36:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6632:9:33",
													"nodeType": "YulIdentifier",
													"src": "6632:9:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6619:12:33",
												"nodeType": "YulIdentifier",
												"src": "6619:12:33"
											},
											"nativeSrc": "6619:23:33",
											"nodeType": "YulFunctionCall",
											"src": "6619:23:33"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "6610:5:33",
												"nodeType": "YulTypedName",
												"src": "6610:5:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "6676:5:33",
													"nodeType": "YulIdentifier",
													"src": "6676:5:33"
												}
											],
											"functionName": {
												"name": "validator_revert_address",
												"nativeSrc": "6651:24:33",
												"nodeType": "YulIdentifier",
												"src": "6651:24:33"
											},
											"nativeSrc": "6651:31:33",
											"nodeType": "YulFunctionCall",
											"src": "6651:31:33"
										},
										"nativeSrc": "6651:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "6651:31:33"
									},
									{
										"nativeSrc": "6691:15:33",
										"nodeType": "YulAssignment",
										"src": "6691:15:33",
										"value": {
											"name": "value",
											"nativeSrc": "6701:5:33",
											"nodeType": "YulIdentifier",
											"src": "6701:5:33"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "6691:6:33",
												"nodeType": "YulIdentifier",
												"src": "6691:6:33"
											}
										]
									},
									{
										"nativeSrc": "6715:47:33",
										"nodeType": "YulVariableDeclaration",
										"src": "6715:47:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6747:9:33",
															"nodeType": "YulIdentifier",
															"src": "6747:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6758:2:33",
															"nodeType": "YulLiteral",
															"src": "6758:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6743:3:33",
														"nodeType": "YulIdentifier",
														"src": "6743:3:33"
													},
													"nativeSrc": "6743:18:33",
													"nodeType": "YulFunctionCall",
													"src": "6743:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6730:12:33",
												"nodeType": "YulIdentifier",
												"src": "6730:12:33"
											},
											"nativeSrc": "6730:32:33",
											"nodeType": "YulFunctionCall",
											"src": "6730:32:33"
										},
										"variables": [
											{
												"name": "value_1",
												"nativeSrc": "6719:7:33",
												"nodeType": "YulTypedName",
												"src": "6719:7:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value_1",
													"nativeSrc": "6796:7:33",
													"nodeType": "YulIdentifier",
													"src": "6796:7:33"
												}
											],
											"functionName": {
												"name": "validator_revert_address",
												"nativeSrc": "6771:24:33",
												"nodeType": "YulIdentifier",
												"src": "6771:24:33"
											},
											"nativeSrc": "6771:33:33",
											"nodeType": "YulFunctionCall",
											"src": "6771:33:33"
										},
										"nativeSrc": "6771:33:33",
										"nodeType": "YulExpressionStatement",
										"src": "6771:33:33"
									},
									{
										"nativeSrc": "6813:17:33",
										"nodeType": "YulAssignment",
										"src": "6813:17:33",
										"value": {
											"name": "value_1",
											"nativeSrc": "6823:7:33",
											"nodeType": "YulIdentifier",
											"src": "6823:7:33"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "6813:6:33",
												"nodeType": "YulIdentifier",
												"src": "6813:6:33"
											}
										]
									},
									{
										"nativeSrc": "6839:42:33",
										"nodeType": "YulAssignment",
										"src": "6839:42:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6866:9:33",
															"nodeType": "YulIdentifier",
															"src": "6866:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6877:2:33",
															"nodeType": "YulLiteral",
															"src": "6877:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6862:3:33",
														"nodeType": "YulIdentifier",
														"src": "6862:3:33"
													},
													"nativeSrc": "6862:18:33",
													"nodeType": "YulFunctionCall",
													"src": "6862:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6849:12:33",
												"nodeType": "YulIdentifier",
												"src": "6849:12:33"
											},
											"nativeSrc": "6849:32:33",
											"nodeType": "YulFunctionCall",
											"src": "6849:32:33"
										},
										"variableNames": [
											{
												"name": "value2",
												"nativeSrc": "6839:6:33",
												"nodeType": "YulIdentifier",
												"src": "6839:6:33"
											}
										]
									},
									{
										"nativeSrc": "6890:42:33",
										"nodeType": "YulAssignment",
										"src": "6890:42:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6917:9:33",
															"nodeType": "YulIdentifier",
															"src": "6917:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6928:2:33",
															"nodeType": "YulLiteral",
															"src": "6928:2:33",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6913:3:33",
														"nodeType": "YulIdentifier",
														"src": "6913:3:33"
													},
													"nativeSrc": "6913:18:33",
													"nodeType": "YulFunctionCall",
													"src": "6913:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6900:12:33",
												"nodeType": "YulIdentifier",
												"src": "6900:12:33"
											},
											"nativeSrc": "6900:32:33",
											"nodeType": "YulFunctionCall",
											"src": "6900:32:33"
										},
										"variableNames": [
											{
												"name": "value3",
												"nativeSrc": "6890:6:33",
												"nodeType": "YulIdentifier",
												"src": "6890:6:33"
											}
										]
									},
									{
										"nativeSrc": "6941:47:33",
										"nodeType": "YulAssignment",
										"src": "6941:47:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6972:9:33",
															"nodeType": "YulIdentifier",
															"src": "6972:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "6983:3:33",
															"nodeType": "YulLiteral",
															"src": "6983:3:33",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6968:3:33",
														"nodeType": "YulIdentifier",
														"src": "6968:3:33"
													},
													"nativeSrc": "6968:19:33",
													"nodeType": "YulFunctionCall",
													"src": "6968:19:33"
												}
											],
											"functionName": {
												"name": "abi_decode_uint8",
												"nativeSrc": "6951:16:33",
												"nodeType": "YulIdentifier",
												"src": "6951:16:33"
											},
											"nativeSrc": "6951:37:33",
											"nodeType": "YulFunctionCall",
											"src": "6951:37:33"
										},
										"variableNames": [
											{
												"name": "value4",
												"nativeSrc": "6941:6:33",
												"nodeType": "YulIdentifier",
												"src": "6941:6:33"
											}
										]
									},
									{
										"nativeSrc": "6997:43:33",
										"nodeType": "YulAssignment",
										"src": "6997:43:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7024:9:33",
															"nodeType": "YulIdentifier",
															"src": "7024:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "7035:3:33",
															"nodeType": "YulLiteral",
															"src": "7035:3:33",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7020:3:33",
														"nodeType": "YulIdentifier",
														"src": "7020:3:33"
													},
													"nativeSrc": "7020:19:33",
													"nodeType": "YulFunctionCall",
													"src": "7020:19:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "7007:12:33",
												"nodeType": "YulIdentifier",
												"src": "7007:12:33"
											},
											"nativeSrc": "7007:33:33",
											"nodeType": "YulFunctionCall",
											"src": "7007:33:33"
										},
										"variableNames": [
											{
												"name": "value5",
												"nativeSrc": "6997:6:33",
												"nodeType": "YulIdentifier",
												"src": "6997:6:33"
											}
										]
									},
									{
										"nativeSrc": "7049:43:33",
										"nodeType": "YulAssignment",
										"src": "7049:43:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7076:9:33",
															"nodeType": "YulIdentifier",
															"src": "7076:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "7087:3:33",
															"nodeType": "YulLiteral",
															"src": "7087:3:33",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7072:3:33",
														"nodeType": "YulIdentifier",
														"src": "7072:3:33"
													},
													"nativeSrc": "7072:19:33",
													"nodeType": "YulFunctionCall",
													"src": "7072:19:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "7059:12:33",
												"nodeType": "YulIdentifier",
												"src": "7059:12:33"
											},
											"nativeSrc": "7059:33:33",
											"nodeType": "YulFunctionCall",
											"src": "7059:33:33"
										},
										"variableNames": [
											{
												"name": "value6",
												"nativeSrc": "7049:6:33",
												"nodeType": "YulIdentifier",
												"src": "7049:6:33"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
							"nativeSrc": "6364:734:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6452:9:33",
									"nodeType": "YulTypedName",
									"src": "6452:9:33",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "6463:7:33",
									"nodeType": "YulTypedName",
									"src": "6463:7:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "6475:6:33",
									"nodeType": "YulTypedName",
									"src": "6475:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "6483:6:33",
									"nodeType": "YulTypedName",
									"src": "6483:6:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "6491:6:33",
									"nodeType": "YulTypedName",
									"src": "6491:6:33",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "6499:6:33",
									"nodeType": "YulTypedName",
									"src": "6499:6:33",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "6507:6:33",
									"nodeType": "YulTypedName",
									"src": "6507:6:33",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "6515:6:33",
									"nodeType": "YulTypedName",
									"src": "6515:6:33",
									"type": ""
								},
								{
									"name": "value6",
									"nativeSrc": "6523:6:33",
									"nodeType": "YulTypedName",
									"src": "6523:6:33",
									"type": ""
								}
							],
							"src": "6364:734:33"
						},
						{
							"body": {
								"nativeSrc": "7190:301:33",
								"nodeType": "YulBlock",
								"src": "7190:301:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "7236:16:33",
											"nodeType": "YulBlock",
											"src": "7236:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "7245:1:33",
																"nodeType": "YulLiteral",
																"src": "7245:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "7248:1:33",
																"nodeType": "YulLiteral",
																"src": "7248:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "7238:6:33",
															"nodeType": "YulIdentifier",
															"src": "7238:6:33"
														},
														"nativeSrc": "7238:12:33",
														"nodeType": "YulFunctionCall",
														"src": "7238:12:33"
													},
													"nativeSrc": "7238:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "7238:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "7211:7:33",
															"nodeType": "YulIdentifier",
															"src": "7211:7:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "7220:9:33",
															"nodeType": "YulIdentifier",
															"src": "7220:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "7207:3:33",
														"nodeType": "YulIdentifier",
														"src": "7207:3:33"
													},
													"nativeSrc": "7207:23:33",
													"nodeType": "YulFunctionCall",
													"src": "7207:23:33"
												},
												{
													"kind": "number",
													"nativeSrc": "7232:2:33",
													"nodeType": "YulLiteral",
													"src": "7232:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "7203:3:33",
												"nodeType": "YulIdentifier",
												"src": "7203:3:33"
											},
											"nativeSrc": "7203:32:33",
											"nodeType": "YulFunctionCall",
											"src": "7203:32:33"
										},
										"nativeSrc": "7200:52:33",
										"nodeType": "YulIf",
										"src": "7200:52:33"
									},
									{
										"nativeSrc": "7261:36:33",
										"nodeType": "YulVariableDeclaration",
										"src": "7261:36:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7287:9:33",
													"nodeType": "YulIdentifier",
													"src": "7287:9:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "7274:12:33",
												"nodeType": "YulIdentifier",
												"src": "7274:12:33"
											},
											"nativeSrc": "7274:23:33",
											"nodeType": "YulFunctionCall",
											"src": "7274:23:33"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "7265:5:33",
												"nodeType": "YulTypedName",
												"src": "7265:5:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "7331:5:33",
													"nodeType": "YulIdentifier",
													"src": "7331:5:33"
												}
											],
											"functionName": {
												"name": "validator_revert_address",
												"nativeSrc": "7306:24:33",
												"nodeType": "YulIdentifier",
												"src": "7306:24:33"
											},
											"nativeSrc": "7306:31:33",
											"nodeType": "YulFunctionCall",
											"src": "7306:31:33"
										},
										"nativeSrc": "7306:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "7306:31:33"
									},
									{
										"nativeSrc": "7346:15:33",
										"nodeType": "YulAssignment",
										"src": "7346:15:33",
										"value": {
											"name": "value",
											"nativeSrc": "7356:5:33",
											"nodeType": "YulIdentifier",
											"src": "7356:5:33"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "7346:6:33",
												"nodeType": "YulIdentifier",
												"src": "7346:6:33"
											}
										]
									},
									{
										"nativeSrc": "7370:47:33",
										"nodeType": "YulVariableDeclaration",
										"src": "7370:47:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7402:9:33",
															"nodeType": "YulIdentifier",
															"src": "7402:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "7413:2:33",
															"nodeType": "YulLiteral",
															"src": "7413:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7398:3:33",
														"nodeType": "YulIdentifier",
														"src": "7398:3:33"
													},
													"nativeSrc": "7398:18:33",
													"nodeType": "YulFunctionCall",
													"src": "7398:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "7385:12:33",
												"nodeType": "YulIdentifier",
												"src": "7385:12:33"
											},
											"nativeSrc": "7385:32:33",
											"nodeType": "YulFunctionCall",
											"src": "7385:32:33"
										},
										"variables": [
											{
												"name": "value_1",
												"nativeSrc": "7374:7:33",
												"nodeType": "YulTypedName",
												"src": "7374:7:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value_1",
													"nativeSrc": "7451:7:33",
													"nodeType": "YulIdentifier",
													"src": "7451:7:33"
												}
											],
											"functionName": {
												"name": "validator_revert_address",
												"nativeSrc": "7426:24:33",
												"nodeType": "YulIdentifier",
												"src": "7426:24:33"
											},
											"nativeSrc": "7426:33:33",
											"nodeType": "YulFunctionCall",
											"src": "7426:33:33"
										},
										"nativeSrc": "7426:33:33",
										"nodeType": "YulExpressionStatement",
										"src": "7426:33:33"
									},
									{
										"nativeSrc": "7468:17:33",
										"nodeType": "YulAssignment",
										"src": "7468:17:33",
										"value": {
											"name": "value_1",
											"nativeSrc": "7478:7:33",
											"nodeType": "YulIdentifier",
											"src": "7478:7:33"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "7468:6:33",
												"nodeType": "YulIdentifier",
												"src": "7468:6:33"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_address",
							"nativeSrc": "7103:388:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "7148:9:33",
									"nodeType": "YulTypedName",
									"src": "7148:9:33",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "7159:7:33",
									"nodeType": "YulTypedName",
									"src": "7159:7:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "7171:6:33",
									"nodeType": "YulTypedName",
									"src": "7171:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "7179:6:33",
									"nodeType": "YulTypedName",
									"src": "7179:6:33",
									"type": ""
								}
							],
							"src": "7103:388:33"
						},
						{
							"body": {
								"nativeSrc": "7582:333:33",
								"nodeType": "YulBlock",
								"src": "7582:333:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "7628:16:33",
											"nodeType": "YulBlock",
											"src": "7628:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "7637:1:33",
																"nodeType": "YulLiteral",
																"src": "7637:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "7640:1:33",
																"nodeType": "YulLiteral",
																"src": "7640:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "7630:6:33",
															"nodeType": "YulIdentifier",
															"src": "7630:6:33"
														},
														"nativeSrc": "7630:12:33",
														"nodeType": "YulFunctionCall",
														"src": "7630:12:33"
													},
													"nativeSrc": "7630:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "7630:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "7603:7:33",
															"nodeType": "YulIdentifier",
															"src": "7603:7:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "7612:9:33",
															"nodeType": "YulIdentifier",
															"src": "7612:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "7599:3:33",
														"nodeType": "YulIdentifier",
														"src": "7599:3:33"
													},
													"nativeSrc": "7599:23:33",
													"nodeType": "YulFunctionCall",
													"src": "7599:23:33"
												},
												{
													"kind": "number",
													"nativeSrc": "7624:2:33",
													"nodeType": "YulLiteral",
													"src": "7624:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "7595:3:33",
												"nodeType": "YulIdentifier",
												"src": "7595:3:33"
											},
											"nativeSrc": "7595:32:33",
											"nodeType": "YulFunctionCall",
											"src": "7595:32:33"
										},
										"nativeSrc": "7592:52:33",
										"nodeType": "YulIf",
										"src": "7592:52:33"
									},
									{
										"nativeSrc": "7653:36:33",
										"nodeType": "YulVariableDeclaration",
										"src": "7653:36:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7679:9:33",
													"nodeType": "YulIdentifier",
													"src": "7679:9:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "7666:12:33",
												"nodeType": "YulIdentifier",
												"src": "7666:12:33"
											},
											"nativeSrc": "7666:23:33",
											"nodeType": "YulFunctionCall",
											"src": "7666:23:33"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "7657:5:33",
												"nodeType": "YulTypedName",
												"src": "7657:5:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "7723:5:33",
													"nodeType": "YulIdentifier",
													"src": "7723:5:33"
												}
											],
											"functionName": {
												"name": "validator_revert_address",
												"nativeSrc": "7698:24:33",
												"nodeType": "YulIdentifier",
												"src": "7698:24:33"
											},
											"nativeSrc": "7698:31:33",
											"nodeType": "YulFunctionCall",
											"src": "7698:31:33"
										},
										"nativeSrc": "7698:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "7698:31:33"
									},
									{
										"nativeSrc": "7738:15:33",
										"nodeType": "YulAssignment",
										"src": "7738:15:33",
										"value": {
											"name": "value",
											"nativeSrc": "7748:5:33",
											"nodeType": "YulIdentifier",
											"src": "7748:5:33"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "7738:6:33",
												"nodeType": "YulIdentifier",
												"src": "7738:6:33"
											}
										]
									},
									{
										"nativeSrc": "7762:47:33",
										"nodeType": "YulVariableDeclaration",
										"src": "7762:47:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7794:9:33",
															"nodeType": "YulIdentifier",
															"src": "7794:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "7805:2:33",
															"nodeType": "YulLiteral",
															"src": "7805:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7790:3:33",
														"nodeType": "YulIdentifier",
														"src": "7790:3:33"
													},
													"nativeSrc": "7790:18:33",
													"nodeType": "YulFunctionCall",
													"src": "7790:18:33"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "7777:12:33",
												"nodeType": "YulIdentifier",
												"src": "7777:12:33"
											},
											"nativeSrc": "7777:32:33",
											"nodeType": "YulFunctionCall",
											"src": "7777:32:33"
										},
										"variables": [
											{
												"name": "value_1",
												"nativeSrc": "7766:7:33",
												"nodeType": "YulTypedName",
												"src": "7766:7:33",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "7867:16:33",
											"nodeType": "YulBlock",
											"src": "7867:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "7876:1:33",
																"nodeType": "YulLiteral",
																"src": "7876:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "7879:1:33",
																"nodeType": "YulLiteral",
																"src": "7879:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "7869:6:33",
															"nodeType": "YulIdentifier",
															"src": "7869:6:33"
														},
														"nativeSrc": "7869:12:33",
														"nodeType": "YulFunctionCall",
														"src": "7869:12:33"
													},
													"nativeSrc": "7869:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "7869:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value_1",
															"nativeSrc": "7831:7:33",
															"nodeType": "YulIdentifier",
															"src": "7831:7:33"
														},
														{
															"arguments": [
																{
																	"name": "value_1",
																	"nativeSrc": "7844:7:33",
																	"nodeType": "YulIdentifier",
																	"src": "7844:7:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "7853:10:33",
																	"nodeType": "YulLiteral",
																	"src": "7853:10:33",
																	"type": "",
																	"value": "0xffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "7840:3:33",
																"nodeType": "YulIdentifier",
																"src": "7840:3:33"
															},
															"nativeSrc": "7840:24:33",
															"nodeType": "YulFunctionCall",
															"src": "7840:24:33"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "7828:2:33",
														"nodeType": "YulIdentifier",
														"src": "7828:2:33"
													},
													"nativeSrc": "7828:37:33",
													"nodeType": "YulFunctionCall",
													"src": "7828:37:33"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "7821:6:33",
												"nodeType": "YulIdentifier",
												"src": "7821:6:33"
											},
											"nativeSrc": "7821:45:33",
											"nodeType": "YulFunctionCall",
											"src": "7821:45:33"
										},
										"nativeSrc": "7818:65:33",
										"nodeType": "YulIf",
										"src": "7818:65:33"
									},
									{
										"nativeSrc": "7892:17:33",
										"nodeType": "YulAssignment",
										"src": "7892:17:33",
										"value": {
											"name": "value_1",
											"nativeSrc": "7902:7:33",
											"nodeType": "YulIdentifier",
											"src": "7902:7:33"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "7892:6:33",
												"nodeType": "YulIdentifier",
												"src": "7892:6:33"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint32",
							"nativeSrc": "7496:419:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "7540:9:33",
									"nodeType": "YulTypedName",
									"src": "7540:9:33",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "7551:7:33",
									"nodeType": "YulTypedName",
									"src": "7551:7:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "7563:6:33",
									"nodeType": "YulTypedName",
									"src": "7563:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "7571:6:33",
									"nodeType": "YulTypedName",
									"src": "7571:6:33",
									"type": ""
								}
							],
							"src": "7496:419:33"
						},
						{
							"body": {
								"nativeSrc": "8083:193:33",
								"nodeType": "YulBlock",
								"src": "8083:193:33",
								"statements": [
									{
										"nativeSrc": "8093:26:33",
										"nodeType": "YulAssignment",
										"src": "8093:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "8105:9:33",
													"nodeType": "YulIdentifier",
													"src": "8105:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "8116:2:33",
													"nodeType": "YulLiteral",
													"src": "8116:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "8101:3:33",
												"nodeType": "YulIdentifier",
												"src": "8101:3:33"
											},
											"nativeSrc": "8101:18:33",
											"nodeType": "YulFunctionCall",
											"src": "8101:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "8093:4:33",
												"nodeType": "YulIdentifier",
												"src": "8093:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "8135:9:33",
													"nodeType": "YulIdentifier",
													"src": "8135:9:33"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nativeSrc": "8156:6:33",
																	"nodeType": "YulIdentifier",
																	"src": "8156:6:33"
																}
															],
															"functionName": {
																"name": "mload",
																"nativeSrc": "8150:5:33",
																"nodeType": "YulIdentifier",
																"src": "8150:5:33"
															},
															"nativeSrc": "8150:13:33",
															"nodeType": "YulFunctionCall",
															"src": "8150:13:33"
														},
														{
															"kind": "number",
															"nativeSrc": "8165:14:33",
															"nodeType": "YulLiteral",
															"src": "8165:14:33",
															"type": "",
															"value": "0xffffffffffff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "8146:3:33",
														"nodeType": "YulIdentifier",
														"src": "8146:3:33"
													},
													"nativeSrc": "8146:34:33",
													"nodeType": "YulFunctionCall",
													"src": "8146:34:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8128:6:33",
												"nodeType": "YulIdentifier",
												"src": "8128:6:33"
											},
											"nativeSrc": "8128:53:33",
											"nodeType": "YulFunctionCall",
											"src": "8128:53:33"
										},
										"nativeSrc": "8128:53:33",
										"nodeType": "YulExpressionStatement",
										"src": "8128:53:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8201:9:33",
															"nodeType": "YulIdentifier",
															"src": "8201:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "8212:4:33",
															"nodeType": "YulLiteral",
															"src": "8212:4:33",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8197:3:33",
														"nodeType": "YulIdentifier",
														"src": "8197:3:33"
													},
													"nativeSrc": "8197:20:33",
													"nodeType": "YulFunctionCall",
													"src": "8197:20:33"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value0",
																			"nativeSrc": "8233:6:33",
																			"nodeType": "YulIdentifier",
																			"src": "8233:6:33"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "8241:4:33",
																			"nodeType": "YulLiteral",
																			"src": "8241:4:33",
																			"type": "",
																			"value": "0x20"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "8229:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "8229:3:33"
																	},
																	"nativeSrc": "8229:17:33",
																	"nodeType": "YulFunctionCall",
																	"src": "8229:17:33"
																}
															],
															"functionName": {
																"name": "mload",
																"nativeSrc": "8223:5:33",
																"nodeType": "YulIdentifier",
																"src": "8223:5:33"
															},
															"nativeSrc": "8223:24:33",
															"nodeType": "YulFunctionCall",
															"src": "8223:24:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "8257:3:33",
																			"nodeType": "YulLiteral",
																			"src": "8257:3:33",
																			"type": "",
																			"value": "208"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "8262:1:33",
																			"nodeType": "YulLiteral",
																			"src": "8262:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "8253:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "8253:3:33"
																	},
																	"nativeSrc": "8253:11:33",
																	"nodeType": "YulFunctionCall",
																	"src": "8253:11:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "8266:1:33",
																	"nodeType": "YulLiteral",
																	"src": "8266:1:33",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "8249:3:33",
																"nodeType": "YulIdentifier",
																"src": "8249:3:33"
															},
															"nativeSrc": "8249:19:33",
															"nodeType": "YulFunctionCall",
															"src": "8249:19:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "8219:3:33",
														"nodeType": "YulIdentifier",
														"src": "8219:3:33"
													},
													"nativeSrc": "8219:50:33",
													"nodeType": "YulFunctionCall",
													"src": "8219:50:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8190:6:33",
												"nodeType": "YulIdentifier",
												"src": "8190:6:33"
											},
											"nativeSrc": "8190:80:33",
											"nodeType": "YulFunctionCall",
											"src": "8190:80:33"
										},
										"nativeSrc": "8190:80:33",
										"nodeType": "YulExpressionStatement",
										"src": "8190:80:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_struct$_Checkpoint208_$7180_memory_ptr__to_t_struct$_Checkpoint208_$7180_memory_ptr__fromStack_reversed",
							"nativeSrc": "7920:356:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "8052:9:33",
									"nodeType": "YulTypedName",
									"src": "8052:9:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "8063:6:33",
									"nodeType": "YulTypedName",
									"src": "8063:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "8074:4:33",
									"nodeType": "YulTypedName",
									"src": "8074:4:33",
									"type": ""
								}
							],
							"src": "7920:356:33"
						},
						{
							"body": {
								"nativeSrc": "8336:325:33",
								"nodeType": "YulBlock",
								"src": "8336:325:33",
								"statements": [
									{
										"nativeSrc": "8346:22:33",
										"nodeType": "YulAssignment",
										"src": "8346:22:33",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "8360:1:33",
													"nodeType": "YulLiteral",
													"src": "8360:1:33",
													"type": "",
													"value": "1"
												},
												{
													"name": "data",
													"nativeSrc": "8363:4:33",
													"nodeType": "YulIdentifier",
													"src": "8363:4:33"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "8356:3:33",
												"nodeType": "YulIdentifier",
												"src": "8356:3:33"
											},
											"nativeSrc": "8356:12:33",
											"nodeType": "YulFunctionCall",
											"src": "8356:12:33"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "8346:6:33",
												"nodeType": "YulIdentifier",
												"src": "8346:6:33"
											}
										]
									},
									{
										"nativeSrc": "8377:38:33",
										"nodeType": "YulVariableDeclaration",
										"src": "8377:38:33",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "8407:4:33",
													"nodeType": "YulIdentifier",
													"src": "8407:4:33"
												},
												{
													"kind": "number",
													"nativeSrc": "8413:1:33",
													"nodeType": "YulLiteral",
													"src": "8413:1:33",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "8403:3:33",
												"nodeType": "YulIdentifier",
												"src": "8403:3:33"
											},
											"nativeSrc": "8403:12:33",
											"nodeType": "YulFunctionCall",
											"src": "8403:12:33"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "8381:18:33",
												"nodeType": "YulTypedName",
												"src": "8381:18:33",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "8454:31:33",
											"nodeType": "YulBlock",
											"src": "8454:31:33",
											"statements": [
												{
													"nativeSrc": "8456:27:33",
													"nodeType": "YulAssignment",
													"src": "8456:27:33",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "8470:6:33",
																"nodeType": "YulIdentifier",
																"src": "8470:6:33"
															},
															{
																"kind": "number",
																"nativeSrc": "8478:4:33",
																"nodeType": "YulLiteral",
																"src": "8478:4:33",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "8466:3:33",
															"nodeType": "YulIdentifier",
															"src": "8466:3:33"
														},
														"nativeSrc": "8466:17:33",
														"nodeType": "YulFunctionCall",
														"src": "8466:17:33"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "8456:6:33",
															"nodeType": "YulIdentifier",
															"src": "8456:6:33"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "8434:18:33",
													"nodeType": "YulIdentifier",
													"src": "8434:18:33"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "8427:6:33",
												"nodeType": "YulIdentifier",
												"src": "8427:6:33"
											},
											"nativeSrc": "8427:26:33",
											"nodeType": "YulFunctionCall",
											"src": "8427:26:33"
										},
										"nativeSrc": "8424:61:33",
										"nodeType": "YulIf",
										"src": "8424:61:33"
									},
									{
										"body": {
											"nativeSrc": "8544:111:33",
											"nodeType": "YulBlock",
											"src": "8544:111:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "8565:1:33",
																"nodeType": "YulLiteral",
																"src": "8565:1:33",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8572:3:33",
																		"nodeType": "YulLiteral",
																		"src": "8572:3:33",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8577:10:33",
																		"nodeType": "YulLiteral",
																		"src": "8577:10:33",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "8568:3:33",
																	"nodeType": "YulIdentifier",
																	"src": "8568:3:33"
																},
																"nativeSrc": "8568:20:33",
																"nodeType": "YulFunctionCall",
																"src": "8568:20:33"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "8558:6:33",
															"nodeType": "YulIdentifier",
															"src": "8558:6:33"
														},
														"nativeSrc": "8558:31:33",
														"nodeType": "YulFunctionCall",
														"src": "8558:31:33"
													},
													"nativeSrc": "8558:31:33",
													"nodeType": "YulExpressionStatement",
													"src": "8558:31:33"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "8609:1:33",
																"nodeType": "YulLiteral",
																"src": "8609:1:33",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nativeSrc": "8612:4:33",
																"nodeType": "YulLiteral",
																"src": "8612:4:33",
																"type": "",
																"value": "0x22"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "8602:6:33",
															"nodeType": "YulIdentifier",
															"src": "8602:6:33"
														},
														"nativeSrc": "8602:15:33",
														"nodeType": "YulFunctionCall",
														"src": "8602:15:33"
													},
													"nativeSrc": "8602:15:33",
													"nodeType": "YulExpressionStatement",
													"src": "8602:15:33"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "8637:1:33",
																"nodeType": "YulLiteral",
																"src": "8637:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "8640:4:33",
																"nodeType": "YulLiteral",
																"src": "8640:4:33",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "8630:6:33",
															"nodeType": "YulIdentifier",
															"src": "8630:6:33"
														},
														"nativeSrc": "8630:15:33",
														"nodeType": "YulFunctionCall",
														"src": "8630:15:33"
													},
													"nativeSrc": "8630:15:33",
													"nodeType": "YulExpressionStatement",
													"src": "8630:15:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "8500:18:33",
													"nodeType": "YulIdentifier",
													"src": "8500:18:33"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "8523:6:33",
															"nodeType": "YulIdentifier",
															"src": "8523:6:33"
														},
														{
															"kind": "number",
															"nativeSrc": "8531:2:33",
															"nodeType": "YulLiteral",
															"src": "8531:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "8520:2:33",
														"nodeType": "YulIdentifier",
														"src": "8520:2:33"
													},
													"nativeSrc": "8520:14:33",
													"nodeType": "YulFunctionCall",
													"src": "8520:14:33"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "8497:2:33",
												"nodeType": "YulIdentifier",
												"src": "8497:2:33"
											},
											"nativeSrc": "8497:38:33",
											"nodeType": "YulFunctionCall",
											"src": "8497:38:33"
										},
										"nativeSrc": "8494:161:33",
										"nodeType": "YulIf",
										"src": "8494:161:33"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "8281:380:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "8316:4:33",
									"nodeType": "YulTypedName",
									"src": "8316:4:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "8325:6:33",
									"nodeType": "YulTypedName",
									"src": "8325:6:33",
									"type": ""
								}
							],
							"src": "8281:380:33"
						},
						{
							"body": {
								"nativeSrc": "8793:140:33",
								"nodeType": "YulBlock",
								"src": "8793:140:33",
								"statements": [
									{
										"nativeSrc": "8803:26:33",
										"nodeType": "YulAssignment",
										"src": "8803:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "8815:9:33",
													"nodeType": "YulIdentifier",
													"src": "8815:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "8826:2:33",
													"nodeType": "YulLiteral",
													"src": "8826:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "8811:3:33",
												"nodeType": "YulIdentifier",
												"src": "8811:3:33"
											},
											"nativeSrc": "8811:18:33",
											"nodeType": "YulFunctionCall",
											"src": "8811:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "8803:4:33",
												"nodeType": "YulIdentifier",
												"src": "8803:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "8845:9:33",
													"nodeType": "YulIdentifier",
													"src": "8845:9:33"
												},
												{
													"name": "value0",
													"nativeSrc": "8856:6:33",
													"nodeType": "YulIdentifier",
													"src": "8856:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8838:6:33",
												"nodeType": "YulIdentifier",
												"src": "8838:6:33"
											},
											"nativeSrc": "8838:25:33",
											"nodeType": "YulFunctionCall",
											"src": "8838:25:33"
										},
										"nativeSrc": "8838:25:33",
										"nodeType": "YulExpressionStatement",
										"src": "8838:25:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8883:9:33",
															"nodeType": "YulIdentifier",
															"src": "8883:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "8894:2:33",
															"nodeType": "YulLiteral",
															"src": "8894:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8879:3:33",
														"nodeType": "YulIdentifier",
														"src": "8879:3:33"
													},
													"nativeSrc": "8879:18:33",
													"nodeType": "YulFunctionCall",
													"src": "8879:18:33"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "8903:6:33",
															"nodeType": "YulIdentifier",
															"src": "8903:6:33"
														},
														{
															"kind": "number",
															"nativeSrc": "8911:14:33",
															"nodeType": "YulLiteral",
															"src": "8911:14:33",
															"type": "",
															"value": "0xffffffffffff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "8899:3:33",
														"nodeType": "YulIdentifier",
														"src": "8899:3:33"
													},
													"nativeSrc": "8899:27:33",
													"nodeType": "YulFunctionCall",
													"src": "8899:27:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8872:6:33",
												"nodeType": "YulIdentifier",
												"src": "8872:6:33"
											},
											"nativeSrc": "8872:55:33",
											"nodeType": "YulFunctionCall",
											"src": "8872:55:33"
										},
										"nativeSrc": "8872:55:33",
										"nodeType": "YulExpressionStatement",
										"src": "8872:55:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_uint48__to_t_uint256_t_uint48__fromStack_reversed",
							"nativeSrc": "8666:267:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "8754:9:33",
									"nodeType": "YulTypedName",
									"src": "8754:9:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "8765:6:33",
									"nodeType": "YulTypedName",
									"src": "8765:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "8773:6:33",
									"nodeType": "YulTypedName",
									"src": "8773:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "8784:4:33",
									"nodeType": "YulTypedName",
									"src": "8784:4:33",
									"type": ""
								}
							],
							"src": "8666:267:33"
						},
						{
							"body": {
								"nativeSrc": "9179:493:33",
								"nodeType": "YulBlock",
								"src": "9179:493:33",
								"statements": [
									{
										"nativeSrc": "9189:29:33",
										"nodeType": "YulVariableDeclaration",
										"src": "9189:29:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "9207:3:33",
															"nodeType": "YulLiteral",
															"src": "9207:3:33",
															"type": "",
															"value": "160"
														},
														{
															"kind": "number",
															"nativeSrc": "9212:1:33",
															"nodeType": "YulLiteral",
															"src": "9212:1:33",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "9203:3:33",
														"nodeType": "YulIdentifier",
														"src": "9203:3:33"
													},
													"nativeSrc": "9203:11:33",
													"nodeType": "YulFunctionCall",
													"src": "9203:11:33"
												},
												{
													"kind": "number",
													"nativeSrc": "9216:1:33",
													"nodeType": "YulLiteral",
													"src": "9216:1:33",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "9199:3:33",
												"nodeType": "YulIdentifier",
												"src": "9199:3:33"
											},
											"nativeSrc": "9199:19:33",
											"nodeType": "YulFunctionCall",
											"src": "9199:19:33"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "9193:2:33",
												"nodeType": "YulTypedName",
												"src": "9193:2:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "9234:9:33",
													"nodeType": "YulIdentifier",
													"src": "9234:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "9249:6:33",
															"nodeType": "YulIdentifier",
															"src": "9249:6:33"
														},
														{
															"name": "_1",
															"nativeSrc": "9257:2:33",
															"nodeType": "YulIdentifier",
															"src": "9257:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "9245:3:33",
														"nodeType": "YulIdentifier",
														"src": "9245:3:33"
													},
													"nativeSrc": "9245:15:33",
													"nodeType": "YulFunctionCall",
													"src": "9245:15:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9227:6:33",
												"nodeType": "YulIdentifier",
												"src": "9227:6:33"
											},
											"nativeSrc": "9227:34:33",
											"nodeType": "YulFunctionCall",
											"src": "9227:34:33"
										},
										"nativeSrc": "9227:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "9227:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "9281:9:33",
															"nodeType": "YulIdentifier",
															"src": "9281:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "9292:2:33",
															"nodeType": "YulLiteral",
															"src": "9292:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9277:3:33",
														"nodeType": "YulIdentifier",
														"src": "9277:3:33"
													},
													"nativeSrc": "9277:18:33",
													"nodeType": "YulFunctionCall",
													"src": "9277:18:33"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "9301:6:33",
															"nodeType": "YulIdentifier",
															"src": "9301:6:33"
														},
														{
															"name": "_1",
															"nativeSrc": "9309:2:33",
															"nodeType": "YulIdentifier",
															"src": "9309:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "9297:3:33",
														"nodeType": "YulIdentifier",
														"src": "9297:3:33"
													},
													"nativeSrc": "9297:15:33",
													"nodeType": "YulFunctionCall",
													"src": "9297:15:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9270:6:33",
												"nodeType": "YulIdentifier",
												"src": "9270:6:33"
											},
											"nativeSrc": "9270:43:33",
											"nodeType": "YulFunctionCall",
											"src": "9270:43:33"
										},
										"nativeSrc": "9270:43:33",
										"nodeType": "YulExpressionStatement",
										"src": "9270:43:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "9333:9:33",
															"nodeType": "YulIdentifier",
															"src": "9333:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "9344:2:33",
															"nodeType": "YulLiteral",
															"src": "9344:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9329:3:33",
														"nodeType": "YulIdentifier",
														"src": "9329:3:33"
													},
													"nativeSrc": "9329:18:33",
													"nodeType": "YulFunctionCall",
													"src": "9329:18:33"
												},
												{
													"name": "value2",
													"nativeSrc": "9349:6:33",
													"nodeType": "YulIdentifier",
													"src": "9349:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9322:6:33",
												"nodeType": "YulIdentifier",
												"src": "9322:6:33"
											},
											"nativeSrc": "9322:34:33",
											"nodeType": "YulFunctionCall",
											"src": "9322:34:33"
										},
										"nativeSrc": "9322:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "9322:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "9376:9:33",
															"nodeType": "YulIdentifier",
															"src": "9376:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "9387:2:33",
															"nodeType": "YulLiteral",
															"src": "9387:2:33",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9372:3:33",
														"nodeType": "YulIdentifier",
														"src": "9372:3:33"
													},
													"nativeSrc": "9372:18:33",
													"nodeType": "YulFunctionCall",
													"src": "9372:18:33"
												},
												{
													"name": "value3",
													"nativeSrc": "9392:6:33",
													"nodeType": "YulIdentifier",
													"src": "9392:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9365:6:33",
												"nodeType": "YulIdentifier",
												"src": "9365:6:33"
											},
											"nativeSrc": "9365:34:33",
											"nodeType": "YulFunctionCall",
											"src": "9365:34:33"
										},
										"nativeSrc": "9365:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "9365:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "9419:9:33",
															"nodeType": "YulIdentifier",
															"src": "9419:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "9430:3:33",
															"nodeType": "YulLiteral",
															"src": "9430:3:33",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9415:3:33",
														"nodeType": "YulIdentifier",
														"src": "9415:3:33"
													},
													"nativeSrc": "9415:19:33",
													"nodeType": "YulFunctionCall",
													"src": "9415:19:33"
												},
												{
													"kind": "number",
													"nativeSrc": "9436:3:33",
													"nodeType": "YulLiteral",
													"src": "9436:3:33",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9408:6:33",
												"nodeType": "YulIdentifier",
												"src": "9408:6:33"
											},
											"nativeSrc": "9408:32:33",
											"nodeType": "YulFunctionCall",
											"src": "9408:32:33"
										},
										"nativeSrc": "9408:32:33",
										"nodeType": "YulExpressionStatement",
										"src": "9408:32:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "9460:9:33",
															"nodeType": "YulIdentifier",
															"src": "9460:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "9471:3:33",
															"nodeType": "YulLiteral",
															"src": "9471:3:33",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9456:3:33",
														"nodeType": "YulIdentifier",
														"src": "9456:3:33"
													},
													"nativeSrc": "9456:19:33",
													"nodeType": "YulFunctionCall",
													"src": "9456:19:33"
												},
												{
													"name": "value5",
													"nativeSrc": "9477:6:33",
													"nodeType": "YulIdentifier",
													"src": "9477:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9449:6:33",
												"nodeType": "YulIdentifier",
												"src": "9449:6:33"
											},
											"nativeSrc": "9449:35:33",
											"nodeType": "YulFunctionCall",
											"src": "9449:35:33"
										},
										"nativeSrc": "9449:35:33",
										"nodeType": "YulExpressionStatement",
										"src": "9449:35:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "9510:9:33",
															"nodeType": "YulIdentifier",
															"src": "9510:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "9521:3:33",
															"nodeType": "YulLiteral",
															"src": "9521:3:33",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9506:3:33",
														"nodeType": "YulIdentifier",
														"src": "9506:3:33"
													},
													"nativeSrc": "9506:19:33",
													"nodeType": "YulFunctionCall",
													"src": "9506:19:33"
												},
												{
													"name": "value4",
													"nativeSrc": "9527:6:33",
													"nodeType": "YulIdentifier",
													"src": "9527:6:33"
												},
												{
													"name": "value5",
													"nativeSrc": "9535:6:33",
													"nodeType": "YulIdentifier",
													"src": "9535:6:33"
												}
											],
											"functionName": {
												"name": "calldatacopy",
												"nativeSrc": "9493:12:33",
												"nodeType": "YulIdentifier",
												"src": "9493:12:33"
											},
											"nativeSrc": "9493:49:33",
											"nodeType": "YulFunctionCall",
											"src": "9493:49:33"
										},
										"nativeSrc": "9493:49:33",
										"nodeType": "YulExpressionStatement",
										"src": "9493:49:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "9566:9:33",
																	"nodeType": "YulIdentifier",
																	"src": "9566:9:33"
																},
																{
																	"name": "value5",
																	"nativeSrc": "9577:6:33",
																	"nodeType": "YulIdentifier",
																	"src": "9577:6:33"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "9562:3:33",
																"nodeType": "YulIdentifier",
																"src": "9562:3:33"
															},
															"nativeSrc": "9562:22:33",
															"nodeType": "YulFunctionCall",
															"src": "9562:22:33"
														},
														{
															"kind": "number",
															"nativeSrc": "9586:3:33",
															"nodeType": "YulLiteral",
															"src": "9586:3:33",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9558:3:33",
														"nodeType": "YulIdentifier",
														"src": "9558:3:33"
													},
													"nativeSrc": "9558:32:33",
													"nodeType": "YulFunctionCall",
													"src": "9558:32:33"
												},
												{
													"kind": "number",
													"nativeSrc": "9592:1:33",
													"nodeType": "YulLiteral",
													"src": "9592:1:33",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9551:6:33",
												"nodeType": "YulIdentifier",
												"src": "9551:6:33"
											},
											"nativeSrc": "9551:43:33",
											"nodeType": "YulFunctionCall",
											"src": "9551:43:33"
										},
										"nativeSrc": "9551:43:33",
										"nodeType": "YulExpressionStatement",
										"src": "9551:43:33"
									},
									{
										"nativeSrc": "9603:63:33",
										"nodeType": "YulAssignment",
										"src": "9603:63:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "9619:9:33",
															"nodeType": "YulIdentifier",
															"src": "9619:9:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value5",
																			"nativeSrc": "9638:6:33",
																			"nodeType": "YulIdentifier",
																			"src": "9638:6:33"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "9646:2:33",
																			"nodeType": "YulLiteral",
																			"src": "9646:2:33",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "9634:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "9634:3:33"
																	},
																	"nativeSrc": "9634:15:33",
																	"nodeType": "YulFunctionCall",
																	"src": "9634:15:33"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "9655:2:33",
																			"nodeType": "YulLiteral",
																			"src": "9655:2:33",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "not",
																		"nativeSrc": "9651:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "9651:3:33"
																	},
																	"nativeSrc": "9651:7:33",
																	"nodeType": "YulFunctionCall",
																	"src": "9651:7:33"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "9630:3:33",
																"nodeType": "YulIdentifier",
																"src": "9630:3:33"
															},
															"nativeSrc": "9630:29:33",
															"nodeType": "YulFunctionCall",
															"src": "9630:29:33"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9615:3:33",
														"nodeType": "YulIdentifier",
														"src": "9615:3:33"
													},
													"nativeSrc": "9615:45:33",
													"nodeType": "YulFunctionCall",
													"src": "9615:45:33"
												},
												{
													"kind": "number",
													"nativeSrc": "9662:3:33",
													"nodeType": "YulLiteral",
													"src": "9662:3:33",
													"type": "",
													"value": "192"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "9611:3:33",
												"nodeType": "YulIdentifier",
												"src": "9611:3:33"
											},
											"nativeSrc": "9611:55:33",
											"nodeType": "YulFunctionCall",
											"src": "9611:55:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "9603:4:33",
												"nodeType": "YulIdentifier",
												"src": "9603:4:33"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
							"nativeSrc": "8938:734:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "9108:9:33",
									"nodeType": "YulTypedName",
									"src": "9108:9:33",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "9119:6:33",
									"nodeType": "YulTypedName",
									"src": "9119:6:33",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "9127:6:33",
									"nodeType": "YulTypedName",
									"src": "9127:6:33",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "9135:6:33",
									"nodeType": "YulTypedName",
									"src": "9135:6:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "9143:6:33",
									"nodeType": "YulTypedName",
									"src": "9143:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "9151:6:33",
									"nodeType": "YulTypedName",
									"src": "9151:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "9159:6:33",
									"nodeType": "YulTypedName",
									"src": "9159:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "9170:4:33",
									"nodeType": "YulTypedName",
									"src": "9170:4:33",
									"type": ""
								}
							],
							"src": "8938:734:33"
						},
						{
							"body": {
								"nativeSrc": "9758:103:33",
								"nodeType": "YulBlock",
								"src": "9758:103:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "9804:16:33",
											"nodeType": "YulBlock",
											"src": "9804:16:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "9813:1:33",
																"nodeType": "YulLiteral",
																"src": "9813:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "9816:1:33",
																"nodeType": "YulLiteral",
																"src": "9816:1:33",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "9806:6:33",
															"nodeType": "YulIdentifier",
															"src": "9806:6:33"
														},
														"nativeSrc": "9806:12:33",
														"nodeType": "YulFunctionCall",
														"src": "9806:12:33"
													},
													"nativeSrc": "9806:12:33",
													"nodeType": "YulExpressionStatement",
													"src": "9806:12:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "9779:7:33",
															"nodeType": "YulIdentifier",
															"src": "9779:7:33"
														},
														{
															"name": "headStart",
															"nativeSrc": "9788:9:33",
															"nodeType": "YulIdentifier",
															"src": "9788:9:33"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "9775:3:33",
														"nodeType": "YulIdentifier",
														"src": "9775:3:33"
													},
													"nativeSrc": "9775:23:33",
													"nodeType": "YulFunctionCall",
													"src": "9775:23:33"
												},
												{
													"kind": "number",
													"nativeSrc": "9800:2:33",
													"nodeType": "YulLiteral",
													"src": "9800:2:33",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "9771:3:33",
												"nodeType": "YulIdentifier",
												"src": "9771:3:33"
											},
											"nativeSrc": "9771:32:33",
											"nodeType": "YulFunctionCall",
											"src": "9771:32:33"
										},
										"nativeSrc": "9768:52:33",
										"nodeType": "YulIf",
										"src": "9768:52:33"
									},
									{
										"nativeSrc": "9829:26:33",
										"nodeType": "YulAssignment",
										"src": "9829:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "9845:9:33",
													"nodeType": "YulIdentifier",
													"src": "9845:9:33"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "9839:5:33",
												"nodeType": "YulIdentifier",
												"src": "9839:5:33"
											},
											"nativeSrc": "9839:16:33",
											"nodeType": "YulFunctionCall",
											"src": "9839:16:33"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "9829:6:33",
												"nodeType": "YulIdentifier",
												"src": "9829:6:33"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_bytes32_fromMemory",
							"nativeSrc": "9677:184:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "9724:9:33",
									"nodeType": "YulTypedName",
									"src": "9724:9:33",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "9735:7:33",
									"nodeType": "YulTypedName",
									"src": "9735:7:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "9747:6:33",
									"nodeType": "YulTypedName",
									"src": "9747:6:33",
									"type": ""
								}
							],
							"src": "9677:184:33"
						},
						{
							"body": {
								"nativeSrc": "9898:95:33",
								"nodeType": "YulBlock",
								"src": "9898:95:33",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "9915:1:33",
													"nodeType": "YulLiteral",
													"src": "9915:1:33",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "9922:3:33",
															"nodeType": "YulLiteral",
															"src": "9922:3:33",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "9927:10:33",
															"nodeType": "YulLiteral",
															"src": "9927:10:33",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "9918:3:33",
														"nodeType": "YulIdentifier",
														"src": "9918:3:33"
													},
													"nativeSrc": "9918:20:33",
													"nodeType": "YulFunctionCall",
													"src": "9918:20:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9908:6:33",
												"nodeType": "YulIdentifier",
												"src": "9908:6:33"
											},
											"nativeSrc": "9908:31:33",
											"nodeType": "YulFunctionCall",
											"src": "9908:31:33"
										},
										"nativeSrc": "9908:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "9908:31:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "9955:1:33",
													"nodeType": "YulLiteral",
													"src": "9955:1:33",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "9958:4:33",
													"nodeType": "YulLiteral",
													"src": "9958:4:33",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9948:6:33",
												"nodeType": "YulIdentifier",
												"src": "9948:6:33"
											},
											"nativeSrc": "9948:15:33",
											"nodeType": "YulFunctionCall",
											"src": "9948:15:33"
										},
										"nativeSrc": "9948:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "9948:15:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "9979:1:33",
													"nodeType": "YulLiteral",
													"src": "9979:1:33",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "9982:4:33",
													"nodeType": "YulLiteral",
													"src": "9982:4:33",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "9972:6:33",
												"nodeType": "YulIdentifier",
												"src": "9972:6:33"
											},
											"nativeSrc": "9972:15:33",
											"nodeType": "YulFunctionCall",
											"src": "9972:15:33"
										},
										"nativeSrc": "9972:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "9972:15:33"
									}
								]
							},
							"name": "panic_error_0x11",
							"nativeSrc": "9866:127:33",
							"nodeType": "YulFunctionDefinition",
							"src": "9866:127:33"
						},
						{
							"body": {
								"nativeSrc": "10046:77:33",
								"nodeType": "YulBlock",
								"src": "10046:77:33",
								"statements": [
									{
										"nativeSrc": "10056:16:33",
										"nodeType": "YulAssignment",
										"src": "10056:16:33",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "10067:1:33",
													"nodeType": "YulIdentifier",
													"src": "10067:1:33"
												},
												{
													"name": "y",
													"nativeSrc": "10070:1:33",
													"nodeType": "YulIdentifier",
													"src": "10070:1:33"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "10063:3:33",
												"nodeType": "YulIdentifier",
												"src": "10063:3:33"
											},
											"nativeSrc": "10063:9:33",
											"nodeType": "YulFunctionCall",
											"src": "10063:9:33"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "10056:3:33",
												"nodeType": "YulIdentifier",
												"src": "10056:3:33"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "10095:22:33",
											"nodeType": "YulBlock",
											"src": "10095:22:33",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "10097:16:33",
															"nodeType": "YulIdentifier",
															"src": "10097:16:33"
														},
														"nativeSrc": "10097:18:33",
														"nodeType": "YulFunctionCall",
														"src": "10097:18:33"
													},
													"nativeSrc": "10097:18:33",
													"nodeType": "YulExpressionStatement",
													"src": "10097:18:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "10087:1:33",
													"nodeType": "YulIdentifier",
													"src": "10087:1:33"
												},
												{
													"name": "sum",
													"nativeSrc": "10090:3:33",
													"nodeType": "YulIdentifier",
													"src": "10090:3:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "10084:2:33",
												"nodeType": "YulIdentifier",
												"src": "10084:2:33"
											},
											"nativeSrc": "10084:10:33",
											"nodeType": "YulFunctionCall",
											"src": "10084:10:33"
										},
										"nativeSrc": "10081:36:33",
										"nodeType": "YulIf",
										"src": "10081:36:33"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nativeSrc": "9998:125:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "10029:1:33",
									"nodeType": "YulTypedName",
									"src": "10029:1:33",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "10032:1:33",
									"nodeType": "YulTypedName",
									"src": "10032:1:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "10038:3:33",
									"nodeType": "YulTypedName",
									"src": "10038:3:33",
									"type": ""
								}
							],
							"src": "9998:125:33"
						},
						{
							"body": {
								"nativeSrc": "10177:79:33",
								"nodeType": "YulBlock",
								"src": "10177:79:33",
								"statements": [
									{
										"nativeSrc": "10187:17:33",
										"nodeType": "YulAssignment",
										"src": "10187:17:33",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "10199:1:33",
													"nodeType": "YulIdentifier",
													"src": "10199:1:33"
												},
												{
													"name": "y",
													"nativeSrc": "10202:1:33",
													"nodeType": "YulIdentifier",
													"src": "10202:1:33"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "10195:3:33",
												"nodeType": "YulIdentifier",
												"src": "10195:3:33"
											},
											"nativeSrc": "10195:9:33",
											"nodeType": "YulFunctionCall",
											"src": "10195:9:33"
										},
										"variableNames": [
											{
												"name": "diff",
												"nativeSrc": "10187:4:33",
												"nodeType": "YulIdentifier",
												"src": "10187:4:33"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "10228:22:33",
											"nodeType": "YulBlock",
											"src": "10228:22:33",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "10230:16:33",
															"nodeType": "YulIdentifier",
															"src": "10230:16:33"
														},
														"nativeSrc": "10230:18:33",
														"nodeType": "YulFunctionCall",
														"src": "10230:18:33"
													},
													"nativeSrc": "10230:18:33",
													"nodeType": "YulExpressionStatement",
													"src": "10230:18:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "diff",
													"nativeSrc": "10219:4:33",
													"nodeType": "YulIdentifier",
													"src": "10219:4:33"
												},
												{
													"name": "x",
													"nativeSrc": "10225:1:33",
													"nodeType": "YulIdentifier",
													"src": "10225:1:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "10216:2:33",
												"nodeType": "YulIdentifier",
												"src": "10216:2:33"
											},
											"nativeSrc": "10216:11:33",
											"nodeType": "YulFunctionCall",
											"src": "10216:11:33"
										},
										"nativeSrc": "10213:37:33",
										"nodeType": "YulIf",
										"src": "10213:37:33"
									}
								]
							},
							"name": "checked_sub_t_uint256",
							"nativeSrc": "10128:128:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "10159:1:33",
									"nodeType": "YulTypedName",
									"src": "10159:1:33",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "10162:1:33",
									"nodeType": "YulTypedName",
									"src": "10162:1:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "diff",
									"nativeSrc": "10168:4:33",
									"nodeType": "YulTypedName",
									"src": "10168:4:33",
									"type": ""
								}
							],
							"src": "10128:128:33"
						},
						{
							"body": {
								"nativeSrc": "10293:95:33",
								"nodeType": "YulBlock",
								"src": "10293:95:33",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "10310:1:33",
													"nodeType": "YulLiteral",
													"src": "10310:1:33",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "10317:3:33",
															"nodeType": "YulLiteral",
															"src": "10317:3:33",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "10322:10:33",
															"nodeType": "YulLiteral",
															"src": "10322:10:33",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "10313:3:33",
														"nodeType": "YulIdentifier",
														"src": "10313:3:33"
													},
													"nativeSrc": "10313:20:33",
													"nodeType": "YulFunctionCall",
													"src": "10313:20:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10303:6:33",
												"nodeType": "YulIdentifier",
												"src": "10303:6:33"
											},
											"nativeSrc": "10303:31:33",
											"nodeType": "YulFunctionCall",
											"src": "10303:31:33"
										},
										"nativeSrc": "10303:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "10303:31:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "10350:1:33",
													"nodeType": "YulLiteral",
													"src": "10350:1:33",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "10353:4:33",
													"nodeType": "YulLiteral",
													"src": "10353:4:33",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10343:6:33",
												"nodeType": "YulIdentifier",
												"src": "10343:6:33"
											},
											"nativeSrc": "10343:15:33",
											"nodeType": "YulFunctionCall",
											"src": "10343:15:33"
										},
										"nativeSrc": "10343:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "10343:15:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "10374:1:33",
													"nodeType": "YulLiteral",
													"src": "10374:1:33",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "10377:4:33",
													"nodeType": "YulLiteral",
													"src": "10377:4:33",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "10367:6:33",
												"nodeType": "YulIdentifier",
												"src": "10367:6:33"
											},
											"nativeSrc": "10367:15:33",
											"nodeType": "YulFunctionCall",
											"src": "10367:15:33"
										},
										"nativeSrc": "10367:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "10367:15:33"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "10261:127:33",
							"nodeType": "YulFunctionDefinition",
							"src": "10261:127:33"
						},
						{
							"body": {
								"nativeSrc": "10578:232:33",
								"nodeType": "YulBlock",
								"src": "10578:232:33",
								"statements": [
									{
										"nativeSrc": "10588:27:33",
										"nodeType": "YulAssignment",
										"src": "10588:27:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10600:9:33",
													"nodeType": "YulIdentifier",
													"src": "10600:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "10611:3:33",
													"nodeType": "YulLiteral",
													"src": "10611:3:33",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "10596:3:33",
												"nodeType": "YulIdentifier",
												"src": "10596:3:33"
											},
											"nativeSrc": "10596:19:33",
											"nodeType": "YulFunctionCall",
											"src": "10596:19:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "10588:4:33",
												"nodeType": "YulIdentifier",
												"src": "10588:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10631:9:33",
													"nodeType": "YulIdentifier",
													"src": "10631:9:33"
												},
												{
													"name": "value0",
													"nativeSrc": "10642:6:33",
													"nodeType": "YulIdentifier",
													"src": "10642:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10624:6:33",
												"nodeType": "YulIdentifier",
												"src": "10624:6:33"
											},
											"nativeSrc": "10624:25:33",
											"nodeType": "YulFunctionCall",
											"src": "10624:25:33"
										},
										"nativeSrc": "10624:25:33",
										"nodeType": "YulExpressionStatement",
										"src": "10624:25:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10669:9:33",
															"nodeType": "YulIdentifier",
															"src": "10669:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "10680:2:33",
															"nodeType": "YulLiteral",
															"src": "10680:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10665:3:33",
														"nodeType": "YulIdentifier",
														"src": "10665:3:33"
													},
													"nativeSrc": "10665:18:33",
													"nodeType": "YulFunctionCall",
													"src": "10665:18:33"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "10689:6:33",
															"nodeType": "YulIdentifier",
															"src": "10689:6:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "10705:3:33",
																			"nodeType": "YulLiteral",
																			"src": "10705:3:33",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "10710:1:33",
																			"nodeType": "YulLiteral",
																			"src": "10710:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "10701:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "10701:3:33"
																	},
																	"nativeSrc": "10701:11:33",
																	"nodeType": "YulFunctionCall",
																	"src": "10701:11:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "10714:1:33",
																	"nodeType": "YulLiteral",
																	"src": "10714:1:33",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "10697:3:33",
																"nodeType": "YulIdentifier",
																"src": "10697:3:33"
															},
															"nativeSrc": "10697:19:33",
															"nodeType": "YulFunctionCall",
															"src": "10697:19:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "10685:3:33",
														"nodeType": "YulIdentifier",
														"src": "10685:3:33"
													},
													"nativeSrc": "10685:32:33",
													"nodeType": "YulFunctionCall",
													"src": "10685:32:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10658:6:33",
												"nodeType": "YulIdentifier",
												"src": "10658:6:33"
											},
											"nativeSrc": "10658:60:33",
											"nodeType": "YulFunctionCall",
											"src": "10658:60:33"
										},
										"nativeSrc": "10658:60:33",
										"nodeType": "YulExpressionStatement",
										"src": "10658:60:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10738:9:33",
															"nodeType": "YulIdentifier",
															"src": "10738:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "10749:2:33",
															"nodeType": "YulLiteral",
															"src": "10749:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10734:3:33",
														"nodeType": "YulIdentifier",
														"src": "10734:3:33"
													},
													"nativeSrc": "10734:18:33",
													"nodeType": "YulFunctionCall",
													"src": "10734:18:33"
												},
												{
													"name": "value2",
													"nativeSrc": "10754:6:33",
													"nodeType": "YulIdentifier",
													"src": "10754:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10727:6:33",
												"nodeType": "YulIdentifier",
												"src": "10727:6:33"
											},
											"nativeSrc": "10727:34:33",
											"nodeType": "YulFunctionCall",
											"src": "10727:34:33"
										},
										"nativeSrc": "10727:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "10727:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10781:9:33",
															"nodeType": "YulIdentifier",
															"src": "10781:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "10792:2:33",
															"nodeType": "YulLiteral",
															"src": "10792:2:33",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10777:3:33",
														"nodeType": "YulIdentifier",
														"src": "10777:3:33"
													},
													"nativeSrc": "10777:18:33",
													"nodeType": "YulFunctionCall",
													"src": "10777:18:33"
												},
												{
													"name": "value3",
													"nativeSrc": "10797:6:33",
													"nodeType": "YulIdentifier",
													"src": "10797:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10770:6:33",
												"nodeType": "YulIdentifier",
												"src": "10770:6:33"
											},
											"nativeSrc": "10770:34:33",
											"nodeType": "YulFunctionCall",
											"src": "10770:34:33"
										},
										"nativeSrc": "10770:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "10770:34:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "10393:417:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "10523:9:33",
									"nodeType": "YulTypedName",
									"src": "10523:9:33",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "10534:6:33",
									"nodeType": "YulTypedName",
									"src": "10534:6:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "10542:6:33",
									"nodeType": "YulTypedName",
									"src": "10542:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "10550:6:33",
									"nodeType": "YulTypedName",
									"src": "10550:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "10558:6:33",
									"nodeType": "YulTypedName",
									"src": "10558:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "10569:4:33",
									"nodeType": "YulTypedName",
									"src": "10569:4:33",
									"type": ""
								}
							],
							"src": "10393:417:33"
						},
						{
							"body": {
								"nativeSrc": "11056:350:33",
								"nodeType": "YulBlock",
								"src": "11056:350:33",
								"statements": [
									{
										"nativeSrc": "11066:27:33",
										"nodeType": "YulAssignment",
										"src": "11066:27:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "11078:9:33",
													"nodeType": "YulIdentifier",
													"src": "11078:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "11089:3:33",
													"nodeType": "YulLiteral",
													"src": "11089:3:33",
													"type": "",
													"value": "192"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "11074:3:33",
												"nodeType": "YulIdentifier",
												"src": "11074:3:33"
											},
											"nativeSrc": "11074:19:33",
											"nodeType": "YulFunctionCall",
											"src": "11074:19:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "11066:4:33",
												"nodeType": "YulIdentifier",
												"src": "11066:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "11109:9:33",
													"nodeType": "YulIdentifier",
													"src": "11109:9:33"
												},
												{
													"name": "value0",
													"nativeSrc": "11120:6:33",
													"nodeType": "YulIdentifier",
													"src": "11120:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11102:6:33",
												"nodeType": "YulIdentifier",
												"src": "11102:6:33"
											},
											"nativeSrc": "11102:25:33",
											"nodeType": "YulFunctionCall",
											"src": "11102:25:33"
										},
										"nativeSrc": "11102:25:33",
										"nodeType": "YulExpressionStatement",
										"src": "11102:25:33"
									},
									{
										"nativeSrc": "11136:29:33",
										"nodeType": "YulVariableDeclaration",
										"src": "11136:29:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "11154:3:33",
															"nodeType": "YulLiteral",
															"src": "11154:3:33",
															"type": "",
															"value": "160"
														},
														{
															"kind": "number",
															"nativeSrc": "11159:1:33",
															"nodeType": "YulLiteral",
															"src": "11159:1:33",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "11150:3:33",
														"nodeType": "YulIdentifier",
														"src": "11150:3:33"
													},
													"nativeSrc": "11150:11:33",
													"nodeType": "YulFunctionCall",
													"src": "11150:11:33"
												},
												{
													"kind": "number",
													"nativeSrc": "11163:1:33",
													"nodeType": "YulLiteral",
													"src": "11163:1:33",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "11146:3:33",
												"nodeType": "YulIdentifier",
												"src": "11146:3:33"
											},
											"nativeSrc": "11146:19:33",
											"nodeType": "YulFunctionCall",
											"src": "11146:19:33"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "11140:2:33",
												"nodeType": "YulTypedName",
												"src": "11140:2:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "11185:9:33",
															"nodeType": "YulIdentifier",
															"src": "11185:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "11196:2:33",
															"nodeType": "YulLiteral",
															"src": "11196:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11181:3:33",
														"nodeType": "YulIdentifier",
														"src": "11181:3:33"
													},
													"nativeSrc": "11181:18:33",
													"nodeType": "YulFunctionCall",
													"src": "11181:18:33"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "11205:6:33",
															"nodeType": "YulIdentifier",
															"src": "11205:6:33"
														},
														{
															"name": "_1",
															"nativeSrc": "11213:2:33",
															"nodeType": "YulIdentifier",
															"src": "11213:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "11201:3:33",
														"nodeType": "YulIdentifier",
														"src": "11201:3:33"
													},
													"nativeSrc": "11201:15:33",
													"nodeType": "YulFunctionCall",
													"src": "11201:15:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11174:6:33",
												"nodeType": "YulIdentifier",
												"src": "11174:6:33"
											},
											"nativeSrc": "11174:43:33",
											"nodeType": "YulFunctionCall",
											"src": "11174:43:33"
										},
										"nativeSrc": "11174:43:33",
										"nodeType": "YulExpressionStatement",
										"src": "11174:43:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "11237:9:33",
															"nodeType": "YulIdentifier",
															"src": "11237:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "11248:2:33",
															"nodeType": "YulLiteral",
															"src": "11248:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11233:3:33",
														"nodeType": "YulIdentifier",
														"src": "11233:3:33"
													},
													"nativeSrc": "11233:18:33",
													"nodeType": "YulFunctionCall",
													"src": "11233:18:33"
												},
												{
													"arguments": [
														{
															"name": "value2",
															"nativeSrc": "11257:6:33",
															"nodeType": "YulIdentifier",
															"src": "11257:6:33"
														},
														{
															"name": "_1",
															"nativeSrc": "11265:2:33",
															"nodeType": "YulIdentifier",
															"src": "11265:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "11253:3:33",
														"nodeType": "YulIdentifier",
														"src": "11253:3:33"
													},
													"nativeSrc": "11253:15:33",
													"nodeType": "YulFunctionCall",
													"src": "11253:15:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11226:6:33",
												"nodeType": "YulIdentifier",
												"src": "11226:6:33"
											},
											"nativeSrc": "11226:43:33",
											"nodeType": "YulFunctionCall",
											"src": "11226:43:33"
										},
										"nativeSrc": "11226:43:33",
										"nodeType": "YulExpressionStatement",
										"src": "11226:43:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "11289:9:33",
															"nodeType": "YulIdentifier",
															"src": "11289:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "11300:2:33",
															"nodeType": "YulLiteral",
															"src": "11300:2:33",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11285:3:33",
														"nodeType": "YulIdentifier",
														"src": "11285:3:33"
													},
													"nativeSrc": "11285:18:33",
													"nodeType": "YulFunctionCall",
													"src": "11285:18:33"
												},
												{
													"name": "value3",
													"nativeSrc": "11305:6:33",
													"nodeType": "YulIdentifier",
													"src": "11305:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11278:6:33",
												"nodeType": "YulIdentifier",
												"src": "11278:6:33"
											},
											"nativeSrc": "11278:34:33",
											"nodeType": "YulFunctionCall",
											"src": "11278:34:33"
										},
										"nativeSrc": "11278:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "11278:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "11332:9:33",
															"nodeType": "YulIdentifier",
															"src": "11332:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "11343:3:33",
															"nodeType": "YulLiteral",
															"src": "11343:3:33",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11328:3:33",
														"nodeType": "YulIdentifier",
														"src": "11328:3:33"
													},
													"nativeSrc": "11328:19:33",
													"nodeType": "YulFunctionCall",
													"src": "11328:19:33"
												},
												{
													"name": "value4",
													"nativeSrc": "11349:6:33",
													"nodeType": "YulIdentifier",
													"src": "11349:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11321:6:33",
												"nodeType": "YulIdentifier",
												"src": "11321:6:33"
											},
											"nativeSrc": "11321:35:33",
											"nodeType": "YulFunctionCall",
											"src": "11321:35:33"
										},
										"nativeSrc": "11321:35:33",
										"nodeType": "YulExpressionStatement",
										"src": "11321:35:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "11376:9:33",
															"nodeType": "YulIdentifier",
															"src": "11376:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "11387:3:33",
															"nodeType": "YulLiteral",
															"src": "11387:3:33",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11372:3:33",
														"nodeType": "YulIdentifier",
														"src": "11372:3:33"
													},
													"nativeSrc": "11372:19:33",
													"nodeType": "YulFunctionCall",
													"src": "11372:19:33"
												},
												{
													"name": "value5",
													"nativeSrc": "11393:6:33",
													"nodeType": "YulIdentifier",
													"src": "11393:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11365:6:33",
												"nodeType": "YulIdentifier",
												"src": "11365:6:33"
											},
											"nativeSrc": "11365:35:33",
											"nodeType": "YulFunctionCall",
											"src": "11365:35:33"
										},
										"nativeSrc": "11365:35:33",
										"nodeType": "YulExpressionStatement",
										"src": "11365:35:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "10815:591:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "10985:9:33",
									"nodeType": "YulTypedName",
									"src": "10985:9:33",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "10996:6:33",
									"nodeType": "YulTypedName",
									"src": "10996:6:33",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "11004:6:33",
									"nodeType": "YulTypedName",
									"src": "11004:6:33",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "11012:6:33",
									"nodeType": "YulTypedName",
									"src": "11012:6:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "11020:6:33",
									"nodeType": "YulTypedName",
									"src": "11020:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "11028:6:33",
									"nodeType": "YulTypedName",
									"src": "11028:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "11036:6:33",
									"nodeType": "YulTypedName",
									"src": "11036:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "11047:4:33",
									"nodeType": "YulTypedName",
									"src": "11047:4:33",
									"type": ""
								}
							],
							"src": "10815:591:33"
						},
						{
							"body": {
								"nativeSrc": "11540:175:33",
								"nodeType": "YulBlock",
								"src": "11540:175:33",
								"statements": [
									{
										"nativeSrc": "11550:26:33",
										"nodeType": "YulAssignment",
										"src": "11550:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "11562:9:33",
													"nodeType": "YulIdentifier",
													"src": "11562:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "11573:2:33",
													"nodeType": "YulLiteral",
													"src": "11573:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "11558:3:33",
												"nodeType": "YulIdentifier",
												"src": "11558:3:33"
											},
											"nativeSrc": "11558:18:33",
											"nodeType": "YulFunctionCall",
											"src": "11558:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "11550:4:33",
												"nodeType": "YulIdentifier",
												"src": "11550:4:33"
											}
										]
									},
									{
										"nativeSrc": "11585:29:33",
										"nodeType": "YulVariableDeclaration",
										"src": "11585:29:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "11603:3:33",
															"nodeType": "YulLiteral",
															"src": "11603:3:33",
															"type": "",
															"value": "160"
														},
														{
															"kind": "number",
															"nativeSrc": "11608:1:33",
															"nodeType": "YulLiteral",
															"src": "11608:1:33",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "11599:3:33",
														"nodeType": "YulIdentifier",
														"src": "11599:3:33"
													},
													"nativeSrc": "11599:11:33",
													"nodeType": "YulFunctionCall",
													"src": "11599:11:33"
												},
												{
													"kind": "number",
													"nativeSrc": "11612:1:33",
													"nodeType": "YulLiteral",
													"src": "11612:1:33",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "11595:3:33",
												"nodeType": "YulIdentifier",
												"src": "11595:3:33"
											},
											"nativeSrc": "11595:19:33",
											"nodeType": "YulFunctionCall",
											"src": "11595:19:33"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "11589:2:33",
												"nodeType": "YulTypedName",
												"src": "11589:2:33",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "11630:9:33",
													"nodeType": "YulIdentifier",
													"src": "11630:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "11645:6:33",
															"nodeType": "YulIdentifier",
															"src": "11645:6:33"
														},
														{
															"name": "_1",
															"nativeSrc": "11653:2:33",
															"nodeType": "YulIdentifier",
															"src": "11653:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "11641:3:33",
														"nodeType": "YulIdentifier",
														"src": "11641:3:33"
													},
													"nativeSrc": "11641:15:33",
													"nodeType": "YulFunctionCall",
													"src": "11641:15:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11623:6:33",
												"nodeType": "YulIdentifier",
												"src": "11623:6:33"
											},
											"nativeSrc": "11623:34:33",
											"nodeType": "YulFunctionCall",
											"src": "11623:34:33"
										},
										"nativeSrc": "11623:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "11623:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "11677:9:33",
															"nodeType": "YulIdentifier",
															"src": "11677:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "11688:2:33",
															"nodeType": "YulLiteral",
															"src": "11688:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11673:3:33",
														"nodeType": "YulIdentifier",
														"src": "11673:3:33"
													},
													"nativeSrc": "11673:18:33",
													"nodeType": "YulFunctionCall",
													"src": "11673:18:33"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "11697:6:33",
															"nodeType": "YulIdentifier",
															"src": "11697:6:33"
														},
														{
															"name": "_1",
															"nativeSrc": "11705:2:33",
															"nodeType": "YulIdentifier",
															"src": "11705:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "11693:3:33",
														"nodeType": "YulIdentifier",
														"src": "11693:3:33"
													},
													"nativeSrc": "11693:15:33",
													"nodeType": "YulFunctionCall",
													"src": "11693:15:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11666:6:33",
												"nodeType": "YulIdentifier",
												"src": "11666:6:33"
											},
											"nativeSrc": "11666:43:33",
											"nodeType": "YulFunctionCall",
											"src": "11666:43:33"
										},
										"nativeSrc": "11666:43:33",
										"nodeType": "YulExpressionStatement",
										"src": "11666:43:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
							"nativeSrc": "11411:304:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "11501:9:33",
									"nodeType": "YulTypedName",
									"src": "11501:9:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "11512:6:33",
									"nodeType": "YulTypedName",
									"src": "11512:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "11520:6:33",
									"nodeType": "YulTypedName",
									"src": "11520:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "11531:4:33",
									"nodeType": "YulTypedName",
									"src": "11531:4:33",
									"type": ""
								}
							],
							"src": "11411:304:33"
						},
						{
							"body": {
								"nativeSrc": "11768:134:33",
								"nodeType": "YulBlock",
								"src": "11768:134:33",
								"statements": [
									{
										"nativeSrc": "11778:29:33",
										"nodeType": "YulVariableDeclaration",
										"src": "11778:29:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "11796:3:33",
															"nodeType": "YulLiteral",
															"src": "11796:3:33",
															"type": "",
															"value": "208"
														},
														{
															"kind": "number",
															"nativeSrc": "11801:1:33",
															"nodeType": "YulLiteral",
															"src": "11801:1:33",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "11792:3:33",
														"nodeType": "YulIdentifier",
														"src": "11792:3:33"
													},
													"nativeSrc": "11792:11:33",
													"nodeType": "YulFunctionCall",
													"src": "11792:11:33"
												},
												{
													"kind": "number",
													"nativeSrc": "11805:1:33",
													"nodeType": "YulLiteral",
													"src": "11805:1:33",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "11788:3:33",
												"nodeType": "YulIdentifier",
												"src": "11788:3:33"
											},
											"nativeSrc": "11788:19:33",
											"nodeType": "YulFunctionCall",
											"src": "11788:19:33"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "11782:2:33",
												"nodeType": "YulTypedName",
												"src": "11782:2:33",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "11816:34:33",
										"nodeType": "YulAssignment",
										"src": "11816:34:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "x",
															"nativeSrc": "11831:1:33",
															"nodeType": "YulIdentifier",
															"src": "11831:1:33"
														},
														{
															"name": "_1",
															"nativeSrc": "11834:2:33",
															"nodeType": "YulIdentifier",
															"src": "11834:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "11827:3:33",
														"nodeType": "YulIdentifier",
														"src": "11827:3:33"
													},
													"nativeSrc": "11827:10:33",
													"nodeType": "YulFunctionCall",
													"src": "11827:10:33"
												},
												{
													"arguments": [
														{
															"name": "y",
															"nativeSrc": "11843:1:33",
															"nodeType": "YulIdentifier",
															"src": "11843:1:33"
														},
														{
															"name": "_1",
															"nativeSrc": "11846:2:33",
															"nodeType": "YulIdentifier",
															"src": "11846:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "11839:3:33",
														"nodeType": "YulIdentifier",
														"src": "11839:3:33"
													},
													"nativeSrc": "11839:10:33",
													"nodeType": "YulFunctionCall",
													"src": "11839:10:33"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "11823:3:33",
												"nodeType": "YulIdentifier",
												"src": "11823:3:33"
											},
											"nativeSrc": "11823:27:33",
											"nodeType": "YulFunctionCall",
											"src": "11823:27:33"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "11816:3:33",
												"nodeType": "YulIdentifier",
												"src": "11816:3:33"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "11874:22:33",
											"nodeType": "YulBlock",
											"src": "11874:22:33",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "11876:16:33",
															"nodeType": "YulIdentifier",
															"src": "11876:16:33"
														},
														"nativeSrc": "11876:18:33",
														"nodeType": "YulFunctionCall",
														"src": "11876:18:33"
													},
													"nativeSrc": "11876:18:33",
													"nodeType": "YulExpressionStatement",
													"src": "11876:18:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "sum",
													"nativeSrc": "11865:3:33",
													"nodeType": "YulIdentifier",
													"src": "11865:3:33"
												},
												{
													"name": "_1",
													"nativeSrc": "11870:2:33",
													"nodeType": "YulIdentifier",
													"src": "11870:2:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "11862:2:33",
												"nodeType": "YulIdentifier",
												"src": "11862:2:33"
											},
											"nativeSrc": "11862:11:33",
											"nodeType": "YulFunctionCall",
											"src": "11862:11:33"
										},
										"nativeSrc": "11859:37:33",
										"nodeType": "YulIf",
										"src": "11859:37:33"
									}
								]
							},
							"name": "checked_add_t_uint208",
							"nativeSrc": "11720:182:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "11751:1:33",
									"nodeType": "YulTypedName",
									"src": "11751:1:33",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "11754:1:33",
									"nodeType": "YulTypedName",
									"src": "11754:1:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "11760:3:33",
									"nodeType": "YulTypedName",
									"src": "11760:3:33",
									"type": ""
								}
							],
							"src": "11720:182:33"
						},
						{
							"body": {
								"nativeSrc": "11956:136:33",
								"nodeType": "YulBlock",
								"src": "11956:136:33",
								"statements": [
									{
										"nativeSrc": "11966:29:33",
										"nodeType": "YulVariableDeclaration",
										"src": "11966:29:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "11984:3:33",
															"nodeType": "YulLiteral",
															"src": "11984:3:33",
															"type": "",
															"value": "208"
														},
														{
															"kind": "number",
															"nativeSrc": "11989:1:33",
															"nodeType": "YulLiteral",
															"src": "11989:1:33",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "11980:3:33",
														"nodeType": "YulIdentifier",
														"src": "11980:3:33"
													},
													"nativeSrc": "11980:11:33",
													"nodeType": "YulFunctionCall",
													"src": "11980:11:33"
												},
												{
													"kind": "number",
													"nativeSrc": "11993:1:33",
													"nodeType": "YulLiteral",
													"src": "11993:1:33",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "11976:3:33",
												"nodeType": "YulIdentifier",
												"src": "11976:3:33"
											},
											"nativeSrc": "11976:19:33",
											"nodeType": "YulFunctionCall",
											"src": "11976:19:33"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "11970:2:33",
												"nodeType": "YulTypedName",
												"src": "11970:2:33",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "12004:35:33",
										"nodeType": "YulAssignment",
										"src": "12004:35:33",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "x",
															"nativeSrc": "12020:1:33",
															"nodeType": "YulIdentifier",
															"src": "12020:1:33"
														},
														{
															"name": "_1",
															"nativeSrc": "12023:2:33",
															"nodeType": "YulIdentifier",
															"src": "12023:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "12016:3:33",
														"nodeType": "YulIdentifier",
														"src": "12016:3:33"
													},
													"nativeSrc": "12016:10:33",
													"nodeType": "YulFunctionCall",
													"src": "12016:10:33"
												},
												{
													"arguments": [
														{
															"name": "y",
															"nativeSrc": "12032:1:33",
															"nodeType": "YulIdentifier",
															"src": "12032:1:33"
														},
														{
															"name": "_1",
															"nativeSrc": "12035:2:33",
															"nodeType": "YulIdentifier",
															"src": "12035:2:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "12028:3:33",
														"nodeType": "YulIdentifier",
														"src": "12028:3:33"
													},
													"nativeSrc": "12028:10:33",
													"nodeType": "YulFunctionCall",
													"src": "12028:10:33"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "12012:3:33",
												"nodeType": "YulIdentifier",
												"src": "12012:3:33"
											},
											"nativeSrc": "12012:27:33",
											"nodeType": "YulFunctionCall",
											"src": "12012:27:33"
										},
										"variableNames": [
											{
												"name": "diff",
												"nativeSrc": "12004:4:33",
												"nodeType": "YulIdentifier",
												"src": "12004:4:33"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "12064:22:33",
											"nodeType": "YulBlock",
											"src": "12064:22:33",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "12066:16:33",
															"nodeType": "YulIdentifier",
															"src": "12066:16:33"
														},
														"nativeSrc": "12066:18:33",
														"nodeType": "YulFunctionCall",
														"src": "12066:18:33"
													},
													"nativeSrc": "12066:18:33",
													"nodeType": "YulExpressionStatement",
													"src": "12066:18:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "diff",
													"nativeSrc": "12054:4:33",
													"nodeType": "YulIdentifier",
													"src": "12054:4:33"
												},
												{
													"name": "_1",
													"nativeSrc": "12060:2:33",
													"nodeType": "YulIdentifier",
													"src": "12060:2:33"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "12051:2:33",
												"nodeType": "YulIdentifier",
												"src": "12051:2:33"
											},
											"nativeSrc": "12051:12:33",
											"nodeType": "YulFunctionCall",
											"src": "12051:12:33"
										},
										"nativeSrc": "12048:38:33",
										"nodeType": "YulIf",
										"src": "12048:38:33"
									}
								]
							},
							"name": "checked_sub_t_uint208",
							"nativeSrc": "11907:185:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "11938:1:33",
									"nodeType": "YulTypedName",
									"src": "11938:1:33",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "11941:1:33",
									"nodeType": "YulTypedName",
									"src": "11941:1:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "diff",
									"nativeSrc": "11947:4:33",
									"nodeType": "YulTypedName",
									"src": "11947:4:33",
									"type": ""
								}
							],
							"src": "11907:185:33"
						},
						{
							"body": {
								"nativeSrc": "12254:188:33",
								"nodeType": "YulBlock",
								"src": "12254:188:33",
								"statements": [
									{
										"nativeSrc": "12264:26:33",
										"nodeType": "YulAssignment",
										"src": "12264:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12276:9:33",
													"nodeType": "YulIdentifier",
													"src": "12276:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "12287:2:33",
													"nodeType": "YulLiteral",
													"src": "12287:2:33",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "12272:3:33",
												"nodeType": "YulIdentifier",
												"src": "12272:3:33"
											},
											"nativeSrc": "12272:18:33",
											"nodeType": "YulFunctionCall",
											"src": "12272:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "12264:4:33",
												"nodeType": "YulIdentifier",
												"src": "12264:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12306:9:33",
													"nodeType": "YulIdentifier",
													"src": "12306:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "12321:6:33",
															"nodeType": "YulIdentifier",
															"src": "12321:6:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "12337:3:33",
																			"nodeType": "YulLiteral",
																			"src": "12337:3:33",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "12342:1:33",
																			"nodeType": "YulLiteral",
																			"src": "12342:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "12333:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "12333:3:33"
																	},
																	"nativeSrc": "12333:11:33",
																	"nodeType": "YulFunctionCall",
																	"src": "12333:11:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "12346:1:33",
																	"nodeType": "YulLiteral",
																	"src": "12346:1:33",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "12329:3:33",
																"nodeType": "YulIdentifier",
																"src": "12329:3:33"
															},
															"nativeSrc": "12329:19:33",
															"nodeType": "YulFunctionCall",
															"src": "12329:19:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "12317:3:33",
														"nodeType": "YulIdentifier",
														"src": "12317:3:33"
													},
													"nativeSrc": "12317:32:33",
													"nodeType": "YulFunctionCall",
													"src": "12317:32:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12299:6:33",
												"nodeType": "YulIdentifier",
												"src": "12299:6:33"
											},
											"nativeSrc": "12299:51:33",
											"nodeType": "YulFunctionCall",
											"src": "12299:51:33"
										},
										"nativeSrc": "12299:51:33",
										"nodeType": "YulExpressionStatement",
										"src": "12299:51:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "12370:9:33",
															"nodeType": "YulIdentifier",
															"src": "12370:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "12381:2:33",
															"nodeType": "YulLiteral",
															"src": "12381:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "12366:3:33",
														"nodeType": "YulIdentifier",
														"src": "12366:3:33"
													},
													"nativeSrc": "12366:18:33",
													"nodeType": "YulFunctionCall",
													"src": "12366:18:33"
												},
												{
													"name": "value1",
													"nativeSrc": "12386:6:33",
													"nodeType": "YulIdentifier",
													"src": "12386:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12359:6:33",
												"nodeType": "YulIdentifier",
												"src": "12359:6:33"
											},
											"nativeSrc": "12359:34:33",
											"nodeType": "YulFunctionCall",
											"src": "12359:34:33"
										},
										"nativeSrc": "12359:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "12359:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "12413:9:33",
															"nodeType": "YulIdentifier",
															"src": "12413:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "12424:2:33",
															"nodeType": "YulLiteral",
															"src": "12424:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "12409:3:33",
														"nodeType": "YulIdentifier",
														"src": "12409:3:33"
													},
													"nativeSrc": "12409:18:33",
													"nodeType": "YulFunctionCall",
													"src": "12409:18:33"
												},
												{
													"name": "value2",
													"nativeSrc": "12429:6:33",
													"nodeType": "YulIdentifier",
													"src": "12429:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12402:6:33",
												"nodeType": "YulIdentifier",
												"src": "12402:6:33"
											},
											"nativeSrc": "12402:34:33",
											"nodeType": "YulFunctionCall",
											"src": "12402:34:33"
										},
										"nativeSrc": "12402:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "12402:34:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "12097:345:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "12207:9:33",
									"nodeType": "YulTypedName",
									"src": "12207:9:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "12218:6:33",
									"nodeType": "YulTypedName",
									"src": "12218:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "12226:6:33",
									"nodeType": "YulTypedName",
									"src": "12226:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "12234:6:33",
									"nodeType": "YulTypedName",
									"src": "12234:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "12245:4:33",
									"nodeType": "YulTypedName",
									"src": "12245:4:33",
									"type": ""
								}
							],
							"src": "12097:345:33"
						},
						{
							"body": {
								"nativeSrc": "12583:130:33",
								"nodeType": "YulBlock",
								"src": "12583:130:33",
								"statements": [
									{
										"nativeSrc": "12593:26:33",
										"nodeType": "YulAssignment",
										"src": "12593:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12605:9:33",
													"nodeType": "YulIdentifier",
													"src": "12605:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "12616:2:33",
													"nodeType": "YulLiteral",
													"src": "12616:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "12601:3:33",
												"nodeType": "YulIdentifier",
												"src": "12601:3:33"
											},
											"nativeSrc": "12601:18:33",
											"nodeType": "YulFunctionCall",
											"src": "12601:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "12593:4:33",
												"nodeType": "YulIdentifier",
												"src": "12593:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12635:9:33",
													"nodeType": "YulIdentifier",
													"src": "12635:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "12650:6:33",
															"nodeType": "YulIdentifier",
															"src": "12650:6:33"
														},
														{
															"kind": "number",
															"nativeSrc": "12658:4:33",
															"nodeType": "YulLiteral",
															"src": "12658:4:33",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "12646:3:33",
														"nodeType": "YulIdentifier",
														"src": "12646:3:33"
													},
													"nativeSrc": "12646:17:33",
													"nodeType": "YulFunctionCall",
													"src": "12646:17:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12628:6:33",
												"nodeType": "YulIdentifier",
												"src": "12628:6:33"
											},
											"nativeSrc": "12628:36:33",
											"nodeType": "YulFunctionCall",
											"src": "12628:36:33"
										},
										"nativeSrc": "12628:36:33",
										"nodeType": "YulExpressionStatement",
										"src": "12628:36:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "12684:9:33",
															"nodeType": "YulIdentifier",
															"src": "12684:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "12695:2:33",
															"nodeType": "YulLiteral",
															"src": "12695:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "12680:3:33",
														"nodeType": "YulIdentifier",
														"src": "12680:3:33"
													},
													"nativeSrc": "12680:18:33",
													"nodeType": "YulFunctionCall",
													"src": "12680:18:33"
												},
												{
													"name": "value1",
													"nativeSrc": "12700:6:33",
													"nodeType": "YulIdentifier",
													"src": "12700:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12673:6:33",
												"nodeType": "YulIdentifier",
												"src": "12673:6:33"
											},
											"nativeSrc": "12673:34:33",
											"nodeType": "YulFunctionCall",
											"src": "12673:34:33"
										},
										"nativeSrc": "12673:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "12673:34:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed",
							"nativeSrc": "12447:266:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "12544:9:33",
									"nodeType": "YulTypedName",
									"src": "12544:9:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "12555:6:33",
									"nodeType": "YulTypedName",
									"src": "12555:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "12563:6:33",
									"nodeType": "YulTypedName",
									"src": "12563:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "12574:4:33",
									"nodeType": "YulTypedName",
									"src": "12574:4:33",
									"type": ""
								}
							],
							"src": "12447:266:33"
						},
						{
							"body": {
								"nativeSrc": "12847:145:33",
								"nodeType": "YulBlock",
								"src": "12847:145:33",
								"statements": [
									{
										"nativeSrc": "12857:26:33",
										"nodeType": "YulAssignment",
										"src": "12857:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12869:9:33",
													"nodeType": "YulIdentifier",
													"src": "12869:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "12880:2:33",
													"nodeType": "YulLiteral",
													"src": "12880:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "12865:3:33",
												"nodeType": "YulIdentifier",
												"src": "12865:3:33"
											},
											"nativeSrc": "12865:18:33",
											"nodeType": "YulFunctionCall",
											"src": "12865:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "12857:4:33",
												"nodeType": "YulIdentifier",
												"src": "12857:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12899:9:33",
													"nodeType": "YulIdentifier",
													"src": "12899:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "12914:6:33",
															"nodeType": "YulIdentifier",
															"src": "12914:6:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "12930:3:33",
																			"nodeType": "YulLiteral",
																			"src": "12930:3:33",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "12935:1:33",
																			"nodeType": "YulLiteral",
																			"src": "12935:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "12926:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "12926:3:33"
																	},
																	"nativeSrc": "12926:11:33",
																	"nodeType": "YulFunctionCall",
																	"src": "12926:11:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "12939:1:33",
																	"nodeType": "YulLiteral",
																	"src": "12939:1:33",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "12922:3:33",
																"nodeType": "YulIdentifier",
																"src": "12922:3:33"
															},
															"nativeSrc": "12922:19:33",
															"nodeType": "YulFunctionCall",
															"src": "12922:19:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "12910:3:33",
														"nodeType": "YulIdentifier",
														"src": "12910:3:33"
													},
													"nativeSrc": "12910:32:33",
													"nodeType": "YulFunctionCall",
													"src": "12910:32:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12892:6:33",
												"nodeType": "YulIdentifier",
												"src": "12892:6:33"
											},
											"nativeSrc": "12892:51:33",
											"nodeType": "YulFunctionCall",
											"src": "12892:51:33"
										},
										"nativeSrc": "12892:51:33",
										"nodeType": "YulExpressionStatement",
										"src": "12892:51:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "12963:9:33",
															"nodeType": "YulIdentifier",
															"src": "12963:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "12974:2:33",
															"nodeType": "YulLiteral",
															"src": "12974:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "12959:3:33",
														"nodeType": "YulIdentifier",
														"src": "12959:3:33"
													},
													"nativeSrc": "12959:18:33",
													"nodeType": "YulFunctionCall",
													"src": "12959:18:33"
												},
												{
													"name": "value1",
													"nativeSrc": "12979:6:33",
													"nodeType": "YulIdentifier",
													"src": "12979:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12952:6:33",
												"nodeType": "YulIdentifier",
												"src": "12952:6:33"
											},
											"nativeSrc": "12952:34:33",
											"nodeType": "YulFunctionCall",
											"src": "12952:34:33"
										},
										"nativeSrc": "12952:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "12952:34:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
							"nativeSrc": "12718:274:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "12808:9:33",
									"nodeType": "YulTypedName",
									"src": "12808:9:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "12819:6:33",
									"nodeType": "YulTypedName",
									"src": "12819:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "12827:6:33",
									"nodeType": "YulTypedName",
									"src": "12827:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "12838:4:33",
									"nodeType": "YulTypedName",
									"src": "12838:4:33",
									"type": ""
								}
							],
							"src": "12718:274:33"
						},
						{
							"body": {
								"nativeSrc": "13210:276:33",
								"nodeType": "YulBlock",
								"src": "13210:276:33",
								"statements": [
									{
										"nativeSrc": "13220:27:33",
										"nodeType": "YulAssignment",
										"src": "13220:27:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "13232:9:33",
													"nodeType": "YulIdentifier",
													"src": "13232:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "13243:3:33",
													"nodeType": "YulLiteral",
													"src": "13243:3:33",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "13228:3:33",
												"nodeType": "YulIdentifier",
												"src": "13228:3:33"
											},
											"nativeSrc": "13228:19:33",
											"nodeType": "YulFunctionCall",
											"src": "13228:19:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "13220:4:33",
												"nodeType": "YulIdentifier",
												"src": "13220:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "13263:9:33",
													"nodeType": "YulIdentifier",
													"src": "13263:9:33"
												},
												{
													"name": "value0",
													"nativeSrc": "13274:6:33",
													"nodeType": "YulIdentifier",
													"src": "13274:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13256:6:33",
												"nodeType": "YulIdentifier",
												"src": "13256:6:33"
											},
											"nativeSrc": "13256:25:33",
											"nodeType": "YulFunctionCall",
											"src": "13256:25:33"
										},
										"nativeSrc": "13256:25:33",
										"nodeType": "YulExpressionStatement",
										"src": "13256:25:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13301:9:33",
															"nodeType": "YulIdentifier",
															"src": "13301:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "13312:2:33",
															"nodeType": "YulLiteral",
															"src": "13312:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13297:3:33",
														"nodeType": "YulIdentifier",
														"src": "13297:3:33"
													},
													"nativeSrc": "13297:18:33",
													"nodeType": "YulFunctionCall",
													"src": "13297:18:33"
												},
												{
													"name": "value1",
													"nativeSrc": "13317:6:33",
													"nodeType": "YulIdentifier",
													"src": "13317:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13290:6:33",
												"nodeType": "YulIdentifier",
												"src": "13290:6:33"
											},
											"nativeSrc": "13290:34:33",
											"nodeType": "YulFunctionCall",
											"src": "13290:34:33"
										},
										"nativeSrc": "13290:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "13290:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13344:9:33",
															"nodeType": "YulIdentifier",
															"src": "13344:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "13355:2:33",
															"nodeType": "YulLiteral",
															"src": "13355:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13340:3:33",
														"nodeType": "YulIdentifier",
														"src": "13340:3:33"
													},
													"nativeSrc": "13340:18:33",
													"nodeType": "YulFunctionCall",
													"src": "13340:18:33"
												},
												{
													"name": "value2",
													"nativeSrc": "13360:6:33",
													"nodeType": "YulIdentifier",
													"src": "13360:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13333:6:33",
												"nodeType": "YulIdentifier",
												"src": "13333:6:33"
											},
											"nativeSrc": "13333:34:33",
											"nodeType": "YulFunctionCall",
											"src": "13333:34:33"
										},
										"nativeSrc": "13333:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "13333:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13387:9:33",
															"nodeType": "YulIdentifier",
															"src": "13387:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "13398:2:33",
															"nodeType": "YulLiteral",
															"src": "13398:2:33",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13383:3:33",
														"nodeType": "YulIdentifier",
														"src": "13383:3:33"
													},
													"nativeSrc": "13383:18:33",
													"nodeType": "YulFunctionCall",
													"src": "13383:18:33"
												},
												{
													"name": "value3",
													"nativeSrc": "13403:6:33",
													"nodeType": "YulIdentifier",
													"src": "13403:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13376:6:33",
												"nodeType": "YulIdentifier",
												"src": "13376:6:33"
											},
											"nativeSrc": "13376:34:33",
											"nodeType": "YulFunctionCall",
											"src": "13376:34:33"
										},
										"nativeSrc": "13376:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "13376:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13430:9:33",
															"nodeType": "YulIdentifier",
															"src": "13430:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "13441:3:33",
															"nodeType": "YulLiteral",
															"src": "13441:3:33",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13426:3:33",
														"nodeType": "YulIdentifier",
														"src": "13426:3:33"
													},
													"nativeSrc": "13426:19:33",
													"nodeType": "YulFunctionCall",
													"src": "13426:19:33"
												},
												{
													"arguments": [
														{
															"name": "value4",
															"nativeSrc": "13451:6:33",
															"nodeType": "YulIdentifier",
															"src": "13451:6:33"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "13467:3:33",
																			"nodeType": "YulLiteral",
																			"src": "13467:3:33",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "13472:1:33",
																			"nodeType": "YulLiteral",
																			"src": "13472:1:33",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "13463:3:33",
																		"nodeType": "YulIdentifier",
																		"src": "13463:3:33"
																	},
																	"nativeSrc": "13463:11:33",
																	"nodeType": "YulFunctionCall",
																	"src": "13463:11:33"
																},
																{
																	"kind": "number",
																	"nativeSrc": "13476:1:33",
																	"nodeType": "YulLiteral",
																	"src": "13476:1:33",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "13459:3:33",
																"nodeType": "YulIdentifier",
																"src": "13459:3:33"
															},
															"nativeSrc": "13459:19:33",
															"nodeType": "YulFunctionCall",
															"src": "13459:19:33"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "13447:3:33",
														"nodeType": "YulIdentifier",
														"src": "13447:3:33"
													},
													"nativeSrc": "13447:32:33",
													"nodeType": "YulFunctionCall",
													"src": "13447:32:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13419:6:33",
												"nodeType": "YulIdentifier",
												"src": "13419:6:33"
											},
											"nativeSrc": "13419:61:33",
											"nodeType": "YulFunctionCall",
											"src": "13419:61:33"
										},
										"nativeSrc": "13419:61:33",
										"nodeType": "YulExpressionStatement",
										"src": "13419:61:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
							"nativeSrc": "12997:489:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "13147:9:33",
									"nodeType": "YulTypedName",
									"src": "13147:9:33",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "13158:6:33",
									"nodeType": "YulTypedName",
									"src": "13158:6:33",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "13166:6:33",
									"nodeType": "YulTypedName",
									"src": "13166:6:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "13174:6:33",
									"nodeType": "YulTypedName",
									"src": "13174:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "13182:6:33",
									"nodeType": "YulTypedName",
									"src": "13182:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "13190:6:33",
									"nodeType": "YulTypedName",
									"src": "13190:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "13201:4:33",
									"nodeType": "YulTypedName",
									"src": "13201:4:33",
									"type": ""
								}
							],
							"src": "12997:489:33"
						},
						{
							"body": {
								"nativeSrc": "13523:95:33",
								"nodeType": "YulBlock",
								"src": "13523:95:33",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "13540:1:33",
													"nodeType": "YulLiteral",
													"src": "13540:1:33",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "13547:3:33",
															"nodeType": "YulLiteral",
															"src": "13547:3:33",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "13552:10:33",
															"nodeType": "YulLiteral",
															"src": "13552:10:33",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "13543:3:33",
														"nodeType": "YulIdentifier",
														"src": "13543:3:33"
													},
													"nativeSrc": "13543:20:33",
													"nodeType": "YulFunctionCall",
													"src": "13543:20:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13533:6:33",
												"nodeType": "YulIdentifier",
												"src": "13533:6:33"
											},
											"nativeSrc": "13533:31:33",
											"nodeType": "YulFunctionCall",
											"src": "13533:31:33"
										},
										"nativeSrc": "13533:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "13533:31:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "13580:1:33",
													"nodeType": "YulLiteral",
													"src": "13580:1:33",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "13583:4:33",
													"nodeType": "YulLiteral",
													"src": "13583:4:33",
													"type": "",
													"value": "0x12"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13573:6:33",
												"nodeType": "YulIdentifier",
												"src": "13573:6:33"
											},
											"nativeSrc": "13573:15:33",
											"nodeType": "YulFunctionCall",
											"src": "13573:15:33"
										},
										"nativeSrc": "13573:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "13573:15:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "13604:1:33",
													"nodeType": "YulLiteral",
													"src": "13604:1:33",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "13607:4:33",
													"nodeType": "YulLiteral",
													"src": "13607:4:33",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "13597:6:33",
												"nodeType": "YulIdentifier",
												"src": "13597:6:33"
											},
											"nativeSrc": "13597:15:33",
											"nodeType": "YulFunctionCall",
											"src": "13597:15:33"
										},
										"nativeSrc": "13597:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "13597:15:33"
									}
								]
							},
							"name": "panic_error_0x12",
							"nativeSrc": "13491:127:33",
							"nodeType": "YulFunctionDefinition",
							"src": "13491:127:33"
						},
						{
							"body": {
								"nativeSrc": "13752:119:33",
								"nodeType": "YulBlock",
								"src": "13752:119:33",
								"statements": [
									{
										"nativeSrc": "13762:26:33",
										"nodeType": "YulAssignment",
										"src": "13762:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "13774:9:33",
													"nodeType": "YulIdentifier",
													"src": "13774:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "13785:2:33",
													"nodeType": "YulLiteral",
													"src": "13785:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "13770:3:33",
												"nodeType": "YulIdentifier",
												"src": "13770:3:33"
											},
											"nativeSrc": "13770:18:33",
											"nodeType": "YulFunctionCall",
											"src": "13770:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "13762:4:33",
												"nodeType": "YulIdentifier",
												"src": "13762:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "13804:9:33",
													"nodeType": "YulIdentifier",
													"src": "13804:9:33"
												},
												{
													"name": "value0",
													"nativeSrc": "13815:6:33",
													"nodeType": "YulIdentifier",
													"src": "13815:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13797:6:33",
												"nodeType": "YulIdentifier",
												"src": "13797:6:33"
											},
											"nativeSrc": "13797:25:33",
											"nodeType": "YulFunctionCall",
											"src": "13797:25:33"
										},
										"nativeSrc": "13797:25:33",
										"nodeType": "YulExpressionStatement",
										"src": "13797:25:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13842:9:33",
															"nodeType": "YulIdentifier",
															"src": "13842:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "13853:2:33",
															"nodeType": "YulLiteral",
															"src": "13853:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13838:3:33",
														"nodeType": "YulIdentifier",
														"src": "13838:3:33"
													},
													"nativeSrc": "13838:18:33",
													"nodeType": "YulFunctionCall",
													"src": "13838:18:33"
												},
												{
													"name": "value1",
													"nativeSrc": "13858:6:33",
													"nodeType": "YulIdentifier",
													"src": "13858:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13831:6:33",
												"nodeType": "YulIdentifier",
												"src": "13831:6:33"
											},
											"nativeSrc": "13831:34:33",
											"nodeType": "YulFunctionCall",
											"src": "13831:34:33"
										},
										"nativeSrc": "13831:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "13831:34:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "13623:248:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "13713:9:33",
									"nodeType": "YulTypedName",
									"src": "13713:9:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "13724:6:33",
									"nodeType": "YulTypedName",
									"src": "13724:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "13732:6:33",
									"nodeType": "YulTypedName",
									"src": "13732:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "13743:4:33",
									"nodeType": "YulTypedName",
									"src": "13743:4:33",
									"type": ""
								}
							],
							"src": "13623:248:33"
						},
						{
							"body": {
								"nativeSrc": "14012:130:33",
								"nodeType": "YulBlock",
								"src": "14012:130:33",
								"statements": [
									{
										"nativeSrc": "14022:26:33",
										"nodeType": "YulAssignment",
										"src": "14022:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "14034:9:33",
													"nodeType": "YulIdentifier",
													"src": "14034:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "14045:2:33",
													"nodeType": "YulLiteral",
													"src": "14045:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "14030:3:33",
												"nodeType": "YulIdentifier",
												"src": "14030:3:33"
											},
											"nativeSrc": "14030:18:33",
											"nodeType": "YulFunctionCall",
											"src": "14030:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "14022:4:33",
												"nodeType": "YulIdentifier",
												"src": "14022:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "14064:9:33",
													"nodeType": "YulIdentifier",
													"src": "14064:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "14079:6:33",
															"nodeType": "YulIdentifier",
															"src": "14079:6:33"
														},
														{
															"kind": "number",
															"nativeSrc": "14087:4:33",
															"nodeType": "YulLiteral",
															"src": "14087:4:33",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "14075:3:33",
														"nodeType": "YulIdentifier",
														"src": "14075:3:33"
													},
													"nativeSrc": "14075:17:33",
													"nodeType": "YulFunctionCall",
													"src": "14075:17:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14057:6:33",
												"nodeType": "YulIdentifier",
												"src": "14057:6:33"
											},
											"nativeSrc": "14057:36:33",
											"nodeType": "YulFunctionCall",
											"src": "14057:36:33"
										},
										"nativeSrc": "14057:36:33",
										"nodeType": "YulExpressionStatement",
										"src": "14057:36:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "14113:9:33",
															"nodeType": "YulIdentifier",
															"src": "14113:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "14124:2:33",
															"nodeType": "YulLiteral",
															"src": "14124:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "14109:3:33",
														"nodeType": "YulIdentifier",
														"src": "14109:3:33"
													},
													"nativeSrc": "14109:18:33",
													"nodeType": "YulFunctionCall",
													"src": "14109:18:33"
												},
												{
													"name": "value1",
													"nativeSrc": "14129:6:33",
													"nodeType": "YulIdentifier",
													"src": "14129:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14102:6:33",
												"nodeType": "YulIdentifier",
												"src": "14102:6:33"
											},
											"nativeSrc": "14102:34:33",
											"nodeType": "YulFunctionCall",
											"src": "14102:34:33"
										},
										"nativeSrc": "14102:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "14102:34:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_rational_32_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed",
							"nativeSrc": "13876:266:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "13973:9:33",
									"nodeType": "YulTypedName",
									"src": "13973:9:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "13984:6:33",
									"nodeType": "YulTypedName",
									"src": "13984:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "13992:6:33",
									"nodeType": "YulTypedName",
									"src": "13992:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "14003:4:33",
									"nodeType": "YulTypedName",
									"src": "14003:4:33",
									"type": ""
								}
							],
							"src": "13876:266:33"
						},
						{
							"body": {
								"nativeSrc": "14328:217:33",
								"nodeType": "YulBlock",
								"src": "14328:217:33",
								"statements": [
									{
										"nativeSrc": "14338:27:33",
										"nodeType": "YulAssignment",
										"src": "14338:27:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "14350:9:33",
													"nodeType": "YulIdentifier",
													"src": "14350:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "14361:3:33",
													"nodeType": "YulLiteral",
													"src": "14361:3:33",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "14346:3:33",
												"nodeType": "YulIdentifier",
												"src": "14346:3:33"
											},
											"nativeSrc": "14346:19:33",
											"nodeType": "YulFunctionCall",
											"src": "14346:19:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "14338:4:33",
												"nodeType": "YulIdentifier",
												"src": "14338:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "14381:9:33",
													"nodeType": "YulIdentifier",
													"src": "14381:9:33"
												},
												{
													"name": "value0",
													"nativeSrc": "14392:6:33",
													"nodeType": "YulIdentifier",
													"src": "14392:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14374:6:33",
												"nodeType": "YulIdentifier",
												"src": "14374:6:33"
											},
											"nativeSrc": "14374:25:33",
											"nodeType": "YulFunctionCall",
											"src": "14374:25:33"
										},
										"nativeSrc": "14374:25:33",
										"nodeType": "YulExpressionStatement",
										"src": "14374:25:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "14419:9:33",
															"nodeType": "YulIdentifier",
															"src": "14419:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "14430:2:33",
															"nodeType": "YulLiteral",
															"src": "14430:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "14415:3:33",
														"nodeType": "YulIdentifier",
														"src": "14415:3:33"
													},
													"nativeSrc": "14415:18:33",
													"nodeType": "YulFunctionCall",
													"src": "14415:18:33"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "14439:6:33",
															"nodeType": "YulIdentifier",
															"src": "14439:6:33"
														},
														{
															"kind": "number",
															"nativeSrc": "14447:4:33",
															"nodeType": "YulLiteral",
															"src": "14447:4:33",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "14435:3:33",
														"nodeType": "YulIdentifier",
														"src": "14435:3:33"
													},
													"nativeSrc": "14435:17:33",
													"nodeType": "YulFunctionCall",
													"src": "14435:17:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14408:6:33",
												"nodeType": "YulIdentifier",
												"src": "14408:6:33"
											},
											"nativeSrc": "14408:45:33",
											"nodeType": "YulFunctionCall",
											"src": "14408:45:33"
										},
										"nativeSrc": "14408:45:33",
										"nodeType": "YulExpressionStatement",
										"src": "14408:45:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "14473:9:33",
															"nodeType": "YulIdentifier",
															"src": "14473:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "14484:2:33",
															"nodeType": "YulLiteral",
															"src": "14484:2:33",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "14469:3:33",
														"nodeType": "YulIdentifier",
														"src": "14469:3:33"
													},
													"nativeSrc": "14469:18:33",
													"nodeType": "YulFunctionCall",
													"src": "14469:18:33"
												},
												{
													"name": "value2",
													"nativeSrc": "14489:6:33",
													"nodeType": "YulIdentifier",
													"src": "14489:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14462:6:33",
												"nodeType": "YulIdentifier",
												"src": "14462:6:33"
											},
											"nativeSrc": "14462:34:33",
											"nodeType": "YulFunctionCall",
											"src": "14462:34:33"
										},
										"nativeSrc": "14462:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "14462:34:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "14516:9:33",
															"nodeType": "YulIdentifier",
															"src": "14516:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "14527:2:33",
															"nodeType": "YulLiteral",
															"src": "14527:2:33",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "14512:3:33",
														"nodeType": "YulIdentifier",
														"src": "14512:3:33"
													},
													"nativeSrc": "14512:18:33",
													"nodeType": "YulFunctionCall",
													"src": "14512:18:33"
												},
												{
													"name": "value3",
													"nativeSrc": "14532:6:33",
													"nodeType": "YulIdentifier",
													"src": "14532:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14505:6:33",
												"nodeType": "YulIdentifier",
												"src": "14505:6:33"
											},
											"nativeSrc": "14505:34:33",
											"nodeType": "YulFunctionCall",
											"src": "14505:34:33"
										},
										"nativeSrc": "14505:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "14505:34:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
							"nativeSrc": "14147:398:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "14273:9:33",
									"nodeType": "YulTypedName",
									"src": "14273:9:33",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "14284:6:33",
									"nodeType": "YulTypedName",
									"src": "14284:6:33",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "14292:6:33",
									"nodeType": "YulTypedName",
									"src": "14292:6:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "14300:6:33",
									"nodeType": "YulTypedName",
									"src": "14300:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "14308:6:33",
									"nodeType": "YulTypedName",
									"src": "14308:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "14319:4:33",
									"nodeType": "YulTypedName",
									"src": "14319:4:33",
									"type": ""
								}
							],
							"src": "14147:398:33"
						},
						{
							"body": {
								"nativeSrc": "14582:95:33",
								"nodeType": "YulBlock",
								"src": "14582:95:33",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14599:1:33",
													"nodeType": "YulLiteral",
													"src": "14599:1:33",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "14606:3:33",
															"nodeType": "YulLiteral",
															"src": "14606:3:33",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "14611:10:33",
															"nodeType": "YulLiteral",
															"src": "14611:10:33",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "14602:3:33",
														"nodeType": "YulIdentifier",
														"src": "14602:3:33"
													},
													"nativeSrc": "14602:20:33",
													"nodeType": "YulFunctionCall",
													"src": "14602:20:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14592:6:33",
												"nodeType": "YulIdentifier",
												"src": "14592:6:33"
											},
											"nativeSrc": "14592:31:33",
											"nodeType": "YulFunctionCall",
											"src": "14592:31:33"
										},
										"nativeSrc": "14592:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "14592:31:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14639:1:33",
													"nodeType": "YulLiteral",
													"src": "14639:1:33",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "14642:4:33",
													"nodeType": "YulLiteral",
													"src": "14642:4:33",
													"type": "",
													"value": "0x21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14632:6:33",
												"nodeType": "YulIdentifier",
												"src": "14632:6:33"
											},
											"nativeSrc": "14632:15:33",
											"nodeType": "YulFunctionCall",
											"src": "14632:15:33"
										},
										"nativeSrc": "14632:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "14632:15:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14663:1:33",
													"nodeType": "YulLiteral",
													"src": "14663:1:33",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "14666:4:33",
													"nodeType": "YulLiteral",
													"src": "14666:4:33",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "14656:6:33",
												"nodeType": "YulIdentifier",
												"src": "14656:6:33"
											},
											"nativeSrc": "14656:15:33",
											"nodeType": "YulFunctionCall",
											"src": "14656:15:33"
										},
										"nativeSrc": "14656:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "14656:15:33"
									}
								]
							},
							"name": "panic_error_0x21",
							"nativeSrc": "14550:127:33",
							"nodeType": "YulFunctionDefinition",
							"src": "14550:127:33"
						},
						{
							"body": {
								"nativeSrc": "14714:95:33",
								"nodeType": "YulBlock",
								"src": "14714:95:33",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14731:1:33",
													"nodeType": "YulLiteral",
													"src": "14731:1:33",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "14738:3:33",
															"nodeType": "YulLiteral",
															"src": "14738:3:33",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "14743:10:33",
															"nodeType": "YulLiteral",
															"src": "14743:10:33",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "14734:3:33",
														"nodeType": "YulIdentifier",
														"src": "14734:3:33"
													},
													"nativeSrc": "14734:20:33",
													"nodeType": "YulFunctionCall",
													"src": "14734:20:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14724:6:33",
												"nodeType": "YulIdentifier",
												"src": "14724:6:33"
											},
											"nativeSrc": "14724:31:33",
											"nodeType": "YulFunctionCall",
											"src": "14724:31:33"
										},
										"nativeSrc": "14724:31:33",
										"nodeType": "YulExpressionStatement",
										"src": "14724:31:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14771:1:33",
													"nodeType": "YulLiteral",
													"src": "14771:1:33",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "14774:4:33",
													"nodeType": "YulLiteral",
													"src": "14774:4:33",
													"type": "",
													"value": "0x32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14764:6:33",
												"nodeType": "YulIdentifier",
												"src": "14764:6:33"
											},
											"nativeSrc": "14764:15:33",
											"nodeType": "YulFunctionCall",
											"src": "14764:15:33"
										},
										"nativeSrc": "14764:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "14764:15:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14795:1:33",
													"nodeType": "YulLiteral",
													"src": "14795:1:33",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "14798:4:33",
													"nodeType": "YulLiteral",
													"src": "14798:4:33",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "14788:6:33",
												"nodeType": "YulIdentifier",
												"src": "14788:6:33"
											},
											"nativeSrc": "14788:15:33",
											"nodeType": "YulFunctionCall",
											"src": "14788:15:33"
										},
										"nativeSrc": "14788:15:33",
										"nodeType": "YulExpressionStatement",
										"src": "14788:15:33"
									}
								]
							},
							"name": "panic_error_0x32",
							"nativeSrc": "14682:127:33",
							"nodeType": "YulFunctionDefinition",
							"src": "14682:127:33"
						},
						{
							"body": {
								"nativeSrc": "14860:171:33",
								"nodeType": "YulBlock",
								"src": "14860:171:33",
								"statements": [
									{
										"body": {
											"nativeSrc": "14891:111:33",
											"nodeType": "YulBlock",
											"src": "14891:111:33",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "14912:1:33",
																"nodeType": "YulLiteral",
																"src": "14912:1:33",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "14919:3:33",
																		"nodeType": "YulLiteral",
																		"src": "14919:3:33",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14924:10:33",
																		"nodeType": "YulLiteral",
																		"src": "14924:10:33",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "14915:3:33",
																	"nodeType": "YulIdentifier",
																	"src": "14915:3:33"
																},
																"nativeSrc": "14915:20:33",
																"nodeType": "YulFunctionCall",
																"src": "14915:20:33"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "14905:6:33",
															"nodeType": "YulIdentifier",
															"src": "14905:6:33"
														},
														"nativeSrc": "14905:31:33",
														"nodeType": "YulFunctionCall",
														"src": "14905:31:33"
													},
													"nativeSrc": "14905:31:33",
													"nodeType": "YulExpressionStatement",
													"src": "14905:31:33"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "14956:1:33",
																"nodeType": "YulLiteral",
																"src": "14956:1:33",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nativeSrc": "14959:4:33",
																"nodeType": "YulLiteral",
																"src": "14959:4:33",
																"type": "",
																"value": "0x12"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "14949:6:33",
															"nodeType": "YulIdentifier",
															"src": "14949:6:33"
														},
														"nativeSrc": "14949:15:33",
														"nodeType": "YulFunctionCall",
														"src": "14949:15:33"
													},
													"nativeSrc": "14949:15:33",
													"nodeType": "YulExpressionStatement",
													"src": "14949:15:33"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "14984:1:33",
																"nodeType": "YulLiteral",
																"src": "14984:1:33",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "14987:4:33",
																"nodeType": "YulLiteral",
																"src": "14987:4:33",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "14977:6:33",
															"nodeType": "YulIdentifier",
															"src": "14977:6:33"
														},
														"nativeSrc": "14977:15:33",
														"nodeType": "YulFunctionCall",
														"src": "14977:15:33"
													},
													"nativeSrc": "14977:15:33",
													"nodeType": "YulExpressionStatement",
													"src": "14977:15:33"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "14880:1:33",
													"nodeType": "YulIdentifier",
													"src": "14880:1:33"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "14873:6:33",
												"nodeType": "YulIdentifier",
												"src": "14873:6:33"
											},
											"nativeSrc": "14873:9:33",
											"nodeType": "YulFunctionCall",
											"src": "14873:9:33"
										},
										"nativeSrc": "14870:132:33",
										"nodeType": "YulIf",
										"src": "14870:132:33"
									},
									{
										"nativeSrc": "15011:14:33",
										"nodeType": "YulAssignment",
										"src": "15011:14:33",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "15020:1:33",
													"nodeType": "YulIdentifier",
													"src": "15020:1:33"
												},
												{
													"name": "y",
													"nativeSrc": "15023:1:33",
													"nodeType": "YulIdentifier",
													"src": "15023:1:33"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "15016:3:33",
												"nodeType": "YulIdentifier",
												"src": "15016:3:33"
											},
											"nativeSrc": "15016:9:33",
											"nodeType": "YulFunctionCall",
											"src": "15016:9:33"
										},
										"variableNames": [
											{
												"name": "r",
												"nativeSrc": "15011:1:33",
												"nodeType": "YulIdentifier",
												"src": "15011:1:33"
											}
										]
									}
								]
							},
							"name": "checked_div_t_uint256",
							"nativeSrc": "14814:217:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "14845:1:33",
									"nodeType": "YulTypedName",
									"src": "14845:1:33",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "14848:1:33",
									"nodeType": "YulTypedName",
									"src": "14848:1:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "r",
									"nativeSrc": "14854:1:33",
									"nodeType": "YulTypedName",
									"src": "14854:1:33",
									"type": ""
								}
							],
							"src": "14814:217:33"
						},
						{
							"body": {
								"nativeSrc": "15173:130:33",
								"nodeType": "YulBlock",
								"src": "15173:130:33",
								"statements": [
									{
										"nativeSrc": "15183:26:33",
										"nodeType": "YulAssignment",
										"src": "15183:26:33",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "15195:9:33",
													"nodeType": "YulIdentifier",
													"src": "15195:9:33"
												},
												{
													"kind": "number",
													"nativeSrc": "15206:2:33",
													"nodeType": "YulLiteral",
													"src": "15206:2:33",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "15191:3:33",
												"nodeType": "YulIdentifier",
												"src": "15191:3:33"
											},
											"nativeSrc": "15191:18:33",
											"nodeType": "YulFunctionCall",
											"src": "15191:18:33"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "15183:4:33",
												"nodeType": "YulIdentifier",
												"src": "15183:4:33"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "15225:9:33",
													"nodeType": "YulIdentifier",
													"src": "15225:9:33"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "15240:6:33",
															"nodeType": "YulIdentifier",
															"src": "15240:6:33"
														},
														{
															"kind": "number",
															"nativeSrc": "15248:4:33",
															"nodeType": "YulLiteral",
															"src": "15248:4:33",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "15236:3:33",
														"nodeType": "YulIdentifier",
														"src": "15236:3:33"
													},
													"nativeSrc": "15236:17:33",
													"nodeType": "YulFunctionCall",
													"src": "15236:17:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "15218:6:33",
												"nodeType": "YulIdentifier",
												"src": "15218:6:33"
											},
											"nativeSrc": "15218:36:33",
											"nodeType": "YulFunctionCall",
											"src": "15218:36:33"
										},
										"nativeSrc": "15218:36:33",
										"nodeType": "YulExpressionStatement",
										"src": "15218:36:33"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "15274:9:33",
															"nodeType": "YulIdentifier",
															"src": "15274:9:33"
														},
														{
															"kind": "number",
															"nativeSrc": "15285:2:33",
															"nodeType": "YulLiteral",
															"src": "15285:2:33",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "15270:3:33",
														"nodeType": "YulIdentifier",
														"src": "15270:3:33"
													},
													"nativeSrc": "15270:18:33",
													"nodeType": "YulFunctionCall",
													"src": "15270:18:33"
												},
												{
													"name": "value1",
													"nativeSrc": "15290:6:33",
													"nodeType": "YulIdentifier",
													"src": "15290:6:33"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "15263:6:33",
												"nodeType": "YulIdentifier",
												"src": "15263:6:33"
											},
											"nativeSrc": "15263:34:33",
											"nodeType": "YulFunctionCall",
											"src": "15263:34:33"
										},
										"nativeSrc": "15263:34:33",
										"nodeType": "YulExpressionStatement",
										"src": "15263:34:33"
									}
								]
							},
							"name": "abi_encode_tuple_t_rational_208_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed",
							"nativeSrc": "15036:267:33",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "15134:9:33",
									"nodeType": "YulTypedName",
									"src": "15134:9:33",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "15145:6:33",
									"nodeType": "YulTypedName",
									"src": "15145:6:33",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "15153:6:33",
									"nodeType": "YulTypedName",
									"src": "15153:6:33",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "15164:4:33",
									"nodeType": "YulTypedName",
									"src": "15164:4:33",
									"type": ""
								}
							],
							"src": "15036:267:33"
						}
					]
				},
				"contents": "{\n    { }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_contract$_IERC3156FlashBorrower_$797t_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_2, 32)\n        value4 := length\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        let _1 := 32\n        mstore(add(headStart, 32), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, 32)\n        let srcPtr := add(value6, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffff))\n    }\n    function abi_decode_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_uint8(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := abi_decode_uint8(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_uint32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, and(value_1, 0xffffffff))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_struct$_Checkpoint208_$7180_memory_ptr__to_t_struct$_Checkpoint208_$7180_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(mload(value0), 0xffffffffffff))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), sub(shl(208, 1), 1)))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_uint256_t_uint48__to_t_uint256_t_uint48__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        mstore(add(headStart, 160), value5)\n        calldatacopy(add(headStart, 192), value4, value5)\n        mstore(add(add(headStart, value5), 192), 0)\n        tail := add(add(headStart, and(add(value5, 31), not(31))), 192)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function checked_add_t_uint208(x, y) -> sum\n    {\n        let _1 := sub(shl(208, 1), 1)\n        sum := add(and(x, _1), and(y, _1))\n        if gt(sum, _1) { panic_error_0x11() }\n    }\n    function checked_sub_t_uint208(x, y) -> diff\n    {\n        let _1 := sub(shl(208, 1), 1)\n        diff := sub(and(x, _1), and(y, _1))\n        if gt(diff, _1) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_rational_32_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_rational_208_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n}",
				"id": 33,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {
			"3447": [
				{
					"length": 32,
					"start": 3602
				}
			],
			"3449": [
				{
					"length": 32,
					"start": 3560
				}
			],
			"3451": [
				{
					"length": 32,
					"start": 3518
				}
			],
			"3453": [
				{
					"length": 32,
					"start": 3683
				}
			],
			"3455": [
				{
					"length": 32,
					"start": 3723
				}
			],
			"3458": [
				{
					"length": 32,
					"start": 4612
				}
			],
			"3461": [
				{
					"length": 32,
					"start": 4657
				}
			]
		},
		"linkReferences": {},
		"object": "608060405234801561000f575f80fd5b5060043610610208575f3560e01c806370a082311161011f57806395d89b41116100a9578063d505accf11610079578063d505accf14610485578063d9d98ce414610498578063dd62ed3e146104ab578063f1127ed8146104e3578063f2fde38b14610522575f80fd5b806395d89b41146104445780639ab24eb01461044c578063a9059cbb1461045f578063c3cda52014610472575f80fd5b80638456cb59116100ef5780638456cb59146103d957806384b0196e146103e15780638da5cb5b146103fc5780638e539e8c1461041257806391ddadf414610425575f80fd5b806370a0823114610383578063715018a6146103ab57806379cc6790146103b35780637ecebe00146103c6575f80fd5b806340c10f19116101a05780635c19a95c116101705780635c19a95c146103175780635c975abb1461032a5780635cffe9de14610335578063613255ab146103485780636fcfff451461035b575f80fd5b806340c10f19146102a657806342966c68146102b95780634bf5d7e9146102cc578063587cde1e146102d4575f80fd5b8063313ce567116101db578063313ce567146102725780633644e515146102815780633a46b1a8146102895780633f4ba83a1461029c575f80fd5b806306fdde031461020c578063095ea7b31461022a57806318160ddd1461024d57806323b872dd1461025f575b5f80fd5b610214610535565b6040516102219190611f82565b60405180910390f35b61023d610238366004611fa8565b6105c5565b6040519015158152602001610221565b6002545b604051908152602001610221565b61023d61026d366004611fd2565b6105de565b60405160128152602001610221565b610251610601565b610251610297366004611fa8565b61060f565b6102a4610693565b005b6102a46102b4366004611fa8565b6106a5565b6102a46102c7366004612010565b6106bb565b6102146106c8565b6102ff6102e2366004612027565b6001600160a01b039081165f908152600960205260409020541690565b6040516001600160a01b039091168152602001610221565b6102a4610325366004612027565b610740565b60055460ff1661023d565b61023d610343366004612042565b61074b565b610251610356366004612027565b6108bd565b61036e610369366004612027565b6108e2565b60405163ffffffff9091168152602001610221565b610251610391366004612027565b6001600160a01b03165f9081526020819052604090205490565b6102a46108ec565b6102a46103c1366004611fa8565b6108fd565b6102516103d4366004612027565b610912565b6102a461091c565b6103e961092c565b60405161022197969594939291906120d9565b60055461010090046001600160a01b03166102ff565b610251610420366004612010565b61096e565b61042d6109d7565b60405165ffffffffffff9091168152602001610221565b6102146109e0565b61025161045a366004612027565b6109ef565b61023d61046d366004611fa8565b610a1e565b6102a4610480366004612185565b610a2b565b6102a46104933660046121db565b610ae7565b6102516104a6366004611fa8565b610c1d565b6102516104b9366004612244565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6104f66104f136600461227b565b610c5b565b60408051825165ffffffffffff1681526020928301516001600160d01b03169281019290925201610221565b6102a4610530366004612027565b610c78565b606060038054610544906122af565b80601f0160208091040260200160405190810160405280929190818152602001828054610570906122af565b80156105bb5780601f10610592576101008083540402835291602001916105bb565b820191905f5260205f20905b81548152906001019060200180831161059e57829003601f168201915b5050505050905090565b5f336105d2818585610cc8565b60019150505b92915050565b5f336105eb858285610cda565b6105f6858585610d55565b506001949350505050565b5f61060a610db2565b905090565b5f806106196109d7565b90508065ffffffffffff16831061065957604051637669fc0f60e11b81526004810184905265ffffffffffff821660248201526044015b60405180910390fd5b61068261066584610edb565b6001600160a01b0386165f908152600a6020526040902090610f11565b6001600160d01b0316949350505050565b61069b610fc1565b6106a3610ff4565b565b6106ad610fc1565b6106b78282611046565b5050565b6106c5338261107a565b50565b60606106d26110ae565b65ffffffffffff166106e26109d7565b65ffffffffffff1614610708576040516301bfc1c560e61b815260040160405180910390fd5b5060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b336106b781836110b8565b5f80610756866108bd565b90508085111561077c5760405163fd9a760960e01b815260048101829052602401610650565b5f6107878787610c1d565b90506107938887611046565b6040516323e30c8b60e01b81527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038a16906323e30c8b906107eb9033908c908c9088908d908d906004016122e7565b6020604051808303815f875af1158015610807573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061082b9190612341565b146108535760405162678c5b60e81b81526001600160a01b0389166004820152602401610650565b5f6108688930610863858b61236c565b610cda565b81158061087c57506001600160a01b038116155b15610899576108948961088f848a61236c565b61107a565b6108ae565b6108a3898861107a565b6108ae898284610d55565b50600198975050505050505050565b5f6001600160a01b03821630146108d4575f6105d8565b6002546105d8905f1961237f565b5f6105d882611129565b6108f4610fc1565b6106a35f61114a565b610908823383610cda565b6106b7828261107a565b5f6105d8826111a3565b610924610fc1565b6106a36111c0565b5f6060805f805f606061093d6111fd565b61094561122a565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b5f806109786109d7565b90508065ffffffffffff1683106109b357604051637669fc0f60e11b81526004810184905265ffffffffffff82166024820152604401610650565b6109c76109bf84610edb565b600b90610f11565b6001600160d01b03169392505050565b5f61060a6110ae565b606060048054610544906122af565b6001600160a01b0381165f908152600a60205260408120610a0f90611257565b6001600160d01b031692915050565b5f336105d2818585610d55565b83421115610a4f57604051632341d78760e11b815260048101859052602401610650565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590525f90610ac890610ac09060a00160405160208183030381529060405280519060200120611286565b8585856112b2565b9050610ad481876112de565b610ade81886110b8565b50505050505050565b83421115610b0b5760405163313c898160e11b815260048101859052602401610650565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b568c6001600160a01b03165f90815260086020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f610bb082611286565b90505f610bbf828787876112b2565b9050896001600160a01b0316816001600160a01b031614610c06576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610650565b610c118a8a8a610cc8565b50505050505050505050565b5f6001600160a01b0383163014610c5257604051635ad3edc960e11b81526001600160a01b0384166004820152602401610650565b5f5b9392505050565b604080518082019091525f8082526020820152610c548383611330565b610c80610fc1565b6001600160a01b038116610ca957604051631e4fbdf760e01b81525f6004820152602401610650565b6106c58161114a565b5f610c548284612392565b5f610c5482846123b9565b610cd58383836001611364565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198114610d4f5781811015610d4157604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610650565b610d4f84848484035f611364565b50505050565b6001600160a01b038316610d7e57604051634b637e8f60e11b81525f6004820152602401610650565b6001600160a01b038216610da75760405163ec442f0560e01b81525f6004820152602401610650565b610cd5838383611436565b5f306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610e0a57507f000000000000000000000000000000000000000000000000000000000000000046145b15610e3457507f000000000000000000000000000000000000000000000000000000000000000090565b61060a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b5f65ffffffffffff821115610f0d576040516306dfcc6560e41b81526030600482015260248101839052604401610650565b5090565b81545f9081816005811115610f6d575f610f2a84611441565b610f34908561237f565b5f8881526020902090915081015465ffffffffffff9081169087161015610f5d57809150610f6b565b610f6881600161236c565b92505b505b5f610f7a87878585611525565b90508015610fb457610f9e87610f9160018461237f565b5f91825260209091200190565b54600160301b90046001600160d01b0316610fb6565b5f5b979650505050505050565b6005546001600160a01b036101009091041633146106a35760405163118cdaa760e01b8152336004820152602401610650565b610ffc611584565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03821661106f5760405163ec442f0560e01b81525f6004820152602401610650565b6106b75f8383611436565b6001600160a01b0382166110a357604051634b637e8f60e11b81525f6004820152602401610650565b6106b7825f83611436565b5f61060a43610edb565b6001600160a01b038281165f8181526009602052604080822080548686166001600160a01b0319821681179092559151919094169392849290917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610cd58183611124866115a7565b6115c4565b6001600160a01b0381165f908152600a60205260408120546105d89061172d565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0381165f908152600860205260408120546105d8565b6111c861175d565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110293390565b606061060a7f00000000000000000000000000000000000000000000000000000000000000006006611781565b606061060a7f00000000000000000000000000000000000000000000000000000000000000006007611781565b80545f908015610c525761127083610f9160018461237f565b54600160301b90046001600160d01b0316610c54565b5f6105d8611292610db2565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f806112c28888888861182a565b9250925092506112d282826118f2565b50909695505050505050565b6001600160a01b0382165f908152600860205260409020805460018101909155818114610cd5576040516301d4b62360e61b81526001600160a01b038416600482015260248101829052604401610650565b604080518082019091525f80825260208201526001600160a01b0383165f908152600a60205260409020610c5490836119aa565b6001600160a01b03841661138d5760405163e602df0560e01b81525f6004820152602401610650565b6001600160a01b0383166113b657604051634a1406b160e11b81525f6004820152602401610650565b6001600160a01b038085165f9081526001602090815260408083209387168352929052208290558015610d4f57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161142891815260200190565b60405180910390a350505050565b610cd5838383611a17565b5f815f0361145057505f919050565b5f600161145c84611a7d565b901c6001901b90506001818481611475576114756123d9565b048201901c9050600181848161148d5761148d6123d9565b048201901c905060018184816114a5576114a56123d9565b048201901c905060018184816114bd576114bd6123d9565b048201901c905060018184816114d5576114d56123d9565b048201901c905060018184816114ed576114ed6123d9565b048201901c90506001818481611505576115056123d9565b048201901c9050610c548182858161151f5761151f6123d9565b04611b10565b5f5b8183101561157c575f61153a8484611b25565b5f8781526020902090915065ffffffffffff86169082015465ffffffffffff16111561156857809250611576565b61157381600161236c565b93505b50611527565b509392505050565b60055460ff166106a357604051638dfc202b60e01b815260040160405180910390fd5b6001600160a01b0381165f908152602081905260408120546105d8565b816001600160a01b0316836001600160a01b0316141580156115e557505f81115b15610cd5576001600160a01b0383161561168c576001600160a01b0383165f908152600a60205260408120819061162790610cbd61162286611b3f565b611b72565b6001600160d01b031691506001600160d01b03169150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611681929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610cd5576001600160a01b0382165f908152600a6020526040812081906116c490610cb261162286611b3f565b6001600160d01b031691506001600160d01b03169150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405161171e929190918252602082015260400190565b60405180910390a25050505050565b5f63ffffffff821115610f0d576040516306dfcc6560e41b81526020600482015260248101839052604401610650565b60055460ff16156106a35760405163d93c066560e01b815260040160405180910390fd5b606060ff831461179b5761179483611baa565b90506105d8565b8180546117a7906122af565b80601f01602080910402602001604051908101604052809291908181526020018280546117d3906122af565b801561181e5780601f106117f55761010080835404028352916020019161181e565b820191905f5260205f20905b81548152906001019060200180831161180157829003601f168201915b505050505090506105d8565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561186357505f915060039050826118e8565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156118b4573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b0381166118df57505f9250600191508290506118e8565b92505f91508190505b9450945094915050565b5f826003811115611905576119056123ed565b0361190e575050565b6001826003811115611922576119226123ed565b036119405760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611954576119546123ed565b036119755760405163fce698f760e01b815260048101829052602401610650565b6003826003811115611989576119896123ed565b036106b7576040516335e2f38360e21b815260048101829052602401610650565b604080518082019091525f8082526020820152825f018263ffffffff16815481106119d7576119d7612401565b5f9182526020918290206040805180820190915291015465ffffffffffff81168252600160301b90046001600160d01b0316918101919091529392505050565b611a22838383611be7565b6001600160a01b038316611a72575f611a3a60025490565b90506001600160d01b0380821115611a6f57604051630e58ae9360e11b81526004810183905260248101829052604401610650565b50505b610cd5838383611bfa565b5f80608083901c15611a9157608092831c92015b604083901c15611aa357604092831c92015b602083901c15611ab557602092831c92015b601083901c15611ac757601092831c92015b600883901c15611ad957600892831c92015b600483901c15611aeb57600492831c92015b600283901c15611afd57600292831c92015b600183901c156105d85760010192915050565b5f818310611b1e5781610c54565b5090919050565b5f611b336002848418612415565b610c549084841661236c565b5f6001600160d01b03821115610f0d576040516306dfcc6560e41b815260d0600482015260248101839052604401610650565b5f80611b9d611b7f6109d7565b611b95611b8b88611257565b868863ffffffff16565b879190611c6f565b915091505b935093915050565b60605f611bb683611c7c565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b611bef61175d565b610cd5838383611ca3565b6001600160a01b038316611c1c57611c19600b610cb261162284611b3f565b50505b6001600160a01b038216611c3e57611c3b600b610cbd61162284611b3f565b50505b6001600160a01b038381165f90815260096020526040808220548584168352912054610cd5929182169116836115c4565b5f80611b9d858585611dc9565b5f60ff8216601f8111156105d857604051632cd44ac360e21b815260040160405180910390fd5b6001600160a01b038316611ccd578060025f828254611cc2919061236c565b90915550611d3d9050565b6001600160a01b0383165f9081526020819052604090205481811015611d1f5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610650565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216611d5957600280548290039055611d77565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611dbc91815260200190565b60405180910390a3505050565b82545f9081908015611ee5575f611de587610f9160018561237f565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b031660208401529192509087161015611e3957604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff808816911603611e855784611e5c88610f9160018661237f565b80546001600160d01b0392909216600160301b0265ffffffffffff909216919091179055611ed5565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d555f8d81529190912094519151909216600160301b029216919091179101555b602001519250839150611ba29050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a815291822095519251909316600160301b029190931617920191909155905081611ba2565b5f81518084525f5b81811015611f6357602081850181015186830182015201611f47565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610c546020830184611f3f565b6001600160a01b03811681146106c5575f80fd5b5f8060408385031215611fb9575f80fd5b8235611fc481611f94565b946020939093013593505050565b5f805f60608486031215611fe4575f80fd5b8335611fef81611f94565b92506020840135611fff81611f94565b929592945050506040919091013590565b5f60208284031215612020575f80fd5b5035919050565b5f60208284031215612037575f80fd5b8135610c5481611f94565b5f805f805f60808688031215612056575f80fd5b853561206181611f94565b9450602086013561207181611f94565b935060408601359250606086013567ffffffffffffffff80821115612094575f80fd5b818801915088601f8301126120a7575f80fd5b8135818111156120b5575f80fd5b8960208285010111156120c6575f80fd5b9699959850939650602001949392505050565b60ff60f81b881681525f602060e060208401526120f960e084018a611f3f565b838103604085015261210b818a611f3f565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825260208088019350909101905f5b8181101561215e57835183529284019291840191600101612142565b50909c9b505050505050505050505050565b803560ff81168114612180575f80fd5b919050565b5f805f805f8060c0878903121561219a575f80fd5b86356121a581611f94565b955060208701359450604087013593506121c160608801612170565b92506080870135915060a087013590509295509295509295565b5f805f805f805f60e0888a0312156121f1575f80fd5b87356121fc81611f94565b9650602088013561220c81611f94565b9550604088013594506060880135935061222860808901612170565b925060a0880135915060c0880135905092959891949750929550565b5f8060408385031215612255575f80fd5b823561226081611f94565b9150602083013561227081611f94565b809150509250929050565b5f806040838503121561228c575f80fd5b823561229781611f94565b9150602083013563ffffffff81168114612270575f80fd5b600181811c908216806122c357607f821691505b6020821081036122e157634e487b7160e01b5f52602260045260245ffd5b50919050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290525f828460c08401375f60c0848401015260c0601f19601f8501168301019050979650505050505050565b5f60208284031215612351575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156105d8576105d8612358565b818103818111156105d8576105d8612358565b6001600160d01b038181168382160190808211156123b2576123b2612358565b5092915050565b6001600160d01b038281168282160390808211156123b2576123b2612358565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f8261242f57634e487b7160e01b5f52601260045260245ffd5b50049056fea2646970667358221220d0fd295cce8691226fd804a3f9c21cf8904112a09c97bc80f3d89c67f522e07b64736f6c63430008160033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x208 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0xA9 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x79 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x485 JUMPI DUP1 PUSH4 0xD9D98CE4 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x4AB JUMPI DUP1 PUSH4 0xF1127ED8 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x522 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x444 JUMPI DUP1 PUSH4 0x9AB24EB0 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x45F JUMPI DUP1 PUSH4 0xC3CDA520 EQ PUSH2 0x472 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 GT PUSH2 0xEF JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x3D9 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x3E1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3FC JUMPI DUP1 PUSH4 0x8E539E8C EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0x91DDADF4 EQ PUSH2 0x425 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x383 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3AB JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x3C6 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40C10F19 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x5C19A95C GT PUSH2 0x170 JUMPI DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x317 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x32A JUMPI DUP1 PUSH4 0x5CFFE9DE EQ PUSH2 0x335 JUMPI DUP1 PUSH4 0x613255AB EQ PUSH2 0x348 JUMPI DUP1 PUSH4 0x6FCFFF45 EQ PUSH2 0x35B JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2A6 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0x4BF5D7E9 EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0x587CDE1E EQ PUSH2 0x2D4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x1DB JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0x3A46B1A8 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x29C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x25F JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x214 PUSH2 0x535 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221 SWAP2 SWAP1 PUSH2 0x1F82 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23D PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0x5C5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x221 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x221 JUMP JUMPDEST PUSH2 0x23D PUSH2 0x26D CALLDATASIZE PUSH1 0x4 PUSH2 0x1FD2 JUMP JUMPDEST PUSH2 0x5DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x221 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x601 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0x60F JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x693 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2A4 PUSH2 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0x6A5 JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2010 JUMP JUMPDEST PUSH2 0x6BB JUMP JUMPDEST PUSH2 0x214 PUSH2 0x6C8 JUMP JUMPDEST PUSH2 0x2FF PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x221 JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x325 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x740 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND PUSH2 0x23D JUMP JUMPDEST PUSH2 0x23D PUSH2 0x343 CALLDATASIZE PUSH1 0x4 PUSH2 0x2042 JUMP JUMPDEST PUSH2 0x74B JUMP JUMPDEST PUSH2 0x251 PUSH2 0x356 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x8BD JUMP JUMPDEST PUSH2 0x36E PUSH2 0x369 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x8E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x221 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x391 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x8EC JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0x8FD JUMP JUMPDEST PUSH2 0x251 PUSH2 0x3D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x912 JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x91C JUMP JUMPDEST PUSH2 0x3E9 PUSH2 0x92C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x20D9 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2FF JUMP JUMPDEST PUSH2 0x251 PUSH2 0x420 CALLDATASIZE PUSH1 0x4 PUSH2 0x2010 JUMP JUMPDEST PUSH2 0x96E JUMP JUMPDEST PUSH2 0x42D PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x221 JUMP JUMPDEST PUSH2 0x214 PUSH2 0x9E0 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x45A CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x9EF JUMP JUMPDEST PUSH2 0x23D PUSH2 0x46D CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0xA1E JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x480 CALLDATASIZE PUSH1 0x4 PUSH2 0x2185 JUMP JUMPDEST PUSH2 0xA2B JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x493 CALLDATASIZE PUSH1 0x4 PUSH2 0x21DB JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x4A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0xC1D JUMP JUMPDEST PUSH2 0x251 PUSH2 0x4B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2244 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x4F6 PUSH2 0x4F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x227B JUMP JUMPDEST PUSH2 0xC5B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x221 JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x530 CALLDATASIZE PUSH1 0x4 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0xC78 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x544 SWAP1 PUSH2 0x22AF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x570 SWAP1 PUSH2 0x22AF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5BB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x592 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5BB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x59E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x5D2 DUP2 DUP6 DUP6 PUSH2 0xCC8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x5EB DUP6 DUP3 DUP6 PUSH2 0xCDA JUMP JUMPDEST PUSH2 0x5F6 DUP6 DUP6 DUP6 PUSH2 0xD55 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x60A PUSH2 0xDB2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x619 PUSH2 0x9D7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH6 0xFFFFFFFFFFFF AND DUP4 LT PUSH2 0x659 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7669FC0F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH6 0xFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x682 PUSH2 0x665 DUP5 PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 PUSH2 0xF11 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x69B PUSH2 0xFC1 JUMP JUMPDEST PUSH2 0x6A3 PUSH2 0xFF4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6AD PUSH2 0xFC1 JUMP JUMPDEST PUSH2 0x6B7 DUP3 DUP3 PUSH2 0x1046 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6C5 CALLER DUP3 PUSH2 0x107A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6D2 PUSH2 0x10AE JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x6E2 PUSH2 0x9D7 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND EQ PUSH2 0x708 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1BFC1C5 PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x6D6F64653D626C6F636B6E756D6265722666726F6D3D64656661756C74000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST CALLER PUSH2 0x6B7 DUP2 DUP4 PUSH2 0x10B8 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x756 DUP7 PUSH2 0x8BD JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0x77C JUMPI PUSH1 0x40 MLOAD PUSH4 0xFD9A7609 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH0 PUSH2 0x787 DUP8 DUP8 PUSH2 0xC1D JUMP JUMPDEST SWAP1 POP PUSH2 0x793 DUP9 DUP8 PUSH2 0x1046 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23E30C8B PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x23E30C8B SWAP1 PUSH2 0x7EB SWAP1 CALLER SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x22E7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x807 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x82B SWAP2 SWAP1 PUSH2 0x2341 JUMP JUMPDEST EQ PUSH2 0x853 JUMPI PUSH1 0x40 MLOAD PUSH3 0x678C5B PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH0 PUSH2 0x868 DUP10 ADDRESS PUSH2 0x863 DUP6 DUP12 PUSH2 0x236C JUMP JUMPDEST PUSH2 0xCDA JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x87C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0x899 JUMPI PUSH2 0x894 DUP10 PUSH2 0x88F DUP5 DUP11 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x107A JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST PUSH2 0x8A3 DUP10 DUP9 PUSH2 0x107A JUMP JUMPDEST PUSH2 0x8AE DUP10 DUP3 DUP5 PUSH2 0xD55 JUMP JUMPDEST POP PUSH1 0x1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ PUSH2 0x8D4 JUMPI PUSH0 PUSH2 0x5D8 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x5D8 SWAP1 PUSH0 NOT PUSH2 0x237F JUMP JUMPDEST PUSH0 PUSH2 0x5D8 DUP3 PUSH2 0x1129 JUMP JUMPDEST PUSH2 0x8F4 PUSH2 0xFC1 JUMP JUMPDEST PUSH2 0x6A3 PUSH0 PUSH2 0x114A JUMP JUMPDEST PUSH2 0x908 DUP3 CALLER DUP4 PUSH2 0xCDA JUMP JUMPDEST PUSH2 0x6B7 DUP3 DUP3 PUSH2 0x107A JUMP JUMPDEST PUSH0 PUSH2 0x5D8 DUP3 PUSH2 0x11A3 JUMP JUMPDEST PUSH2 0x924 PUSH2 0xFC1 JUMP JUMPDEST PUSH2 0x6A3 PUSH2 0x11C0 JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x93D PUSH2 0x11FD JUMP JUMPDEST PUSH2 0x945 PUSH2 0x122A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x978 PUSH2 0x9D7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH6 0xFFFFFFFFFFFF AND DUP4 LT PUSH2 0x9B3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7669FC0F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH6 0xFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0x9C7 PUSH2 0x9BF DUP5 PUSH2 0xEDB JUMP JUMPDEST PUSH1 0xB SWAP1 PUSH2 0xF11 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x60A PUSH2 0x10AE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x544 SWAP1 PUSH2 0x22AF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xA0F SWAP1 PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x5D2 DUP2 DUP6 DUP6 PUSH2 0xD55 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xA4F JUMPI PUSH1 0x40 MLOAD PUSH4 0x2341D787 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xE48329057BFD03D55E49B547132E39CFFD9C1820AD7B9D4C5307691425D15ADF PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH0 SWAP1 PUSH2 0xAC8 SWAP1 PUSH2 0xAC0 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x1286 JUMP JUMPDEST DUP6 DUP6 DUP6 PUSH2 0x12B2 JUMP JUMPDEST SWAP1 POP PUSH2 0xAD4 DUP2 DUP8 PUSH2 0x12DE JUMP JUMPDEST PUSH2 0xADE DUP2 DUP9 PUSH2 0x10B8 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xB0B JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xB56 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0xBB0 DUP3 PUSH2 0x1286 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xBBF DUP3 DUP8 DUP8 DUP8 PUSH2 0x12B2 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC06 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0xC11 DUP11 DUP11 DUP11 PUSH2 0xCC8 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ PUSH2 0xC52 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5AD3EDC9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xC54 DUP4 DUP4 PUSH2 0x1330 JUMP JUMPDEST PUSH2 0xC80 PUSH2 0xFC1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xCA9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0x6C5 DUP2 PUSH2 0x114A JUMP JUMPDEST PUSH0 PUSH2 0xC54 DUP3 DUP5 PUSH2 0x2392 JUMP JUMPDEST PUSH0 PUSH2 0xC54 DUP3 DUP5 PUSH2 0x23B9 JUMP JUMPDEST PUSH2 0xCD5 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1364 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0xD4F JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xD41 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0xD4F DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x1364 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xD7E JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xDA7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0xCD5 DUP4 DUP4 DUP4 PUSH2 0x1436 JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0xE0A JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0xE34 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x60A PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP2 SLOAD PUSH0 SWAP1 DUP2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0xF6D JUMPI PUSH0 PUSH2 0xF2A DUP5 PUSH2 0x1441 JUMP JUMPDEST PUSH2 0xF34 SWAP1 DUP6 PUSH2 0x237F JUMP JUMPDEST PUSH0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP2 ADD SLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP8 AND LT ISZERO PUSH2 0xF5D JUMPI DUP1 SWAP2 POP PUSH2 0xF6B JUMP JUMPDEST PUSH2 0xF68 DUP2 PUSH1 0x1 PUSH2 0x236C JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST PUSH0 PUSH2 0xF7A DUP8 DUP8 DUP6 DUP6 PUSH2 0x1525 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xFB4 JUMPI PUSH2 0xF9E DUP8 PUSH2 0xF91 PUSH1 0x1 DUP5 PUSH2 0x237F JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH2 0xFB6 JUMP JUMPDEST PUSH0 JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0xFFC PUSH2 0x1584 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x106F JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0x6B7 PUSH0 DUP4 DUP4 PUSH2 0x1436 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x10A3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0x6B7 DUP3 PUSH0 DUP4 PUSH2 0x1436 JUMP JUMPDEST PUSH0 PUSH2 0x60A NUMBER PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD DUP7 DUP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP5 AND SWAP4 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 PUSH32 0x3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F SWAP2 SWAP1 LOG4 PUSH2 0xCD5 DUP2 DUP4 PUSH2 0x1124 DUP7 PUSH2 0x15A7 JUMP JUMPDEST PUSH2 0x15C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x5D8 SWAP1 PUSH2 0x172D JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH2 0x100 DUP2 DUP2 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT DUP6 AND OR SWAP1 SWAP5 SSTORE PUSH1 0x40 MLOAD SWAP4 SWAP1 SWAP3 DIV AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x5D8 JUMP JUMPDEST PUSH2 0x11C8 PUSH2 0x175D JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1029 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x60A PUSH32 0x0 PUSH1 0x6 PUSH2 0x1781 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x60A PUSH32 0x0 PUSH1 0x7 PUSH2 0x1781 JUMP JUMPDEST DUP1 SLOAD PUSH0 SWAP1 DUP1 ISZERO PUSH2 0xC52 JUMPI PUSH2 0x1270 DUP4 PUSH2 0xF91 PUSH1 0x1 DUP5 PUSH2 0x237F JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH2 0xC54 JUMP JUMPDEST PUSH0 PUSH2 0x5D8 PUSH2 0x1292 PUSH2 0xDB2 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x12C2 DUP9 DUP9 DUP9 DUP9 PUSH2 0x182A JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x12D2 DUP3 DUP3 PUSH2 0x18F2 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE DUP2 DUP2 EQ PUSH2 0xCD5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1D4B623 PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xC54 SWAP1 DUP4 PUSH2 0x19AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x138D JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x13B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0xD4F JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1428 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0xCD5 DUP4 DUP4 DUP4 PUSH2 0x1A17 JUMP JUMPDEST PUSH0 DUP2 PUSH0 SUB PUSH2 0x1450 JUMPI POP PUSH0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH2 0x145C DUP5 PUSH2 0x1A7D JUMP JUMPDEST SWAP1 SHR PUSH1 0x1 SWAP1 SHL SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x1475 JUMPI PUSH2 0x1475 PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x148D JUMPI PUSH2 0x148D PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x14A5 JUMPI PUSH2 0x14A5 PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x14BD JUMPI PUSH2 0x14BD PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x14D5 JUMPI PUSH2 0x14D5 PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x14ED JUMPI PUSH2 0x14ED PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP5 DUP2 PUSH2 0x1505 JUMPI PUSH2 0x1505 PUSH2 0x23D9 JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH2 0xC54 DUP2 DUP3 DUP6 DUP2 PUSH2 0x151F JUMPI PUSH2 0x151F PUSH2 0x23D9 JUMP JUMPDEST DIV PUSH2 0x1B10 JUMP JUMPDEST PUSH0 JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x157C JUMPI PUSH0 PUSH2 0x153A DUP5 DUP5 PUSH2 0x1B25 JUMP JUMPDEST PUSH0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH6 0xFFFFFFFFFFFF DUP7 AND SWAP1 DUP3 ADD SLOAD PUSH6 0xFFFFFFFFFFFF AND GT ISZERO PUSH2 0x1568 JUMPI DUP1 SWAP3 POP PUSH2 0x1576 JUMP JUMPDEST PUSH2 0x1573 DUP2 PUSH1 0x1 PUSH2 0x236C JUMP JUMPDEST SWAP4 POP JUMPDEST POP PUSH2 0x1527 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x5D8 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x15E5 JUMPI POP PUSH0 DUP2 GT JUMPDEST ISZERO PUSH2 0xCD5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x168C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x1627 SWAP1 PUSH2 0xCBD PUSH2 0x1622 DUP7 PUSH2 0x1B3F JUMP JUMPDEST PUSH2 0x1B72 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1681 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xCD5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x16C4 SWAP1 PUSH2 0xCB2 PUSH2 0x1622 DUP7 PUSH2 0x1B3F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x171E SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0x179B JUMPI PUSH2 0x1794 DUP4 PUSH2 0x1BAA JUMP JUMPDEST SWAP1 POP PUSH2 0x5D8 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x17A7 SWAP1 PUSH2 0x22AF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x17D3 SWAP1 PUSH2 0x22AF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x181E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x17F5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x181E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1801 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x5D8 JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0x1863 JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0x18E8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18B4 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x18DF JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0x18E8 JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1905 JUMPI PUSH2 0x1905 PUSH2 0x23ED JUMP JUMPDEST SUB PUSH2 0x190E JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1922 JUMPI PUSH2 0x1922 PUSH2 0x23ED JUMP JUMPDEST SUB PUSH2 0x1940 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1954 JUMPI PUSH2 0x1954 PUSH2 0x23ED JUMP JUMPDEST SUB PUSH2 0x1975 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1989 JUMPI PUSH2 0x1989 PUSH2 0x23ED JUMP JUMPDEST SUB PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH0 ADD DUP3 PUSH4 0xFFFFFFFF AND DUP2 SLOAD DUP2 LT PUSH2 0x19D7 JUMPI PUSH2 0x19D7 PUSH2 0x2401 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1A22 DUP4 DUP4 DUP4 PUSH2 0x1BE7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1A72 JUMPI PUSH0 PUSH2 0x1A3A PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1A6F JUMPI PUSH1 0x40 MLOAD PUSH4 0xE58AE93 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST POP POP JUMPDEST PUSH2 0xCD5 DUP4 DUP4 DUP4 PUSH2 0x1BFA JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x80 DUP4 SWAP1 SHR ISZERO PUSH2 0x1A91 JUMPI PUSH1 0x80 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x40 DUP4 SWAP1 SHR ISZERO PUSH2 0x1AA3 JUMPI PUSH1 0x40 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x20 DUP4 SWAP1 SHR ISZERO PUSH2 0x1AB5 JUMPI PUSH1 0x20 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x10 DUP4 SWAP1 SHR ISZERO PUSH2 0x1AC7 JUMPI PUSH1 0x10 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x8 DUP4 SWAP1 SHR ISZERO PUSH2 0x1AD9 JUMPI PUSH1 0x8 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x4 DUP4 SWAP1 SHR ISZERO PUSH2 0x1AEB JUMPI PUSH1 0x4 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x2 DUP4 SWAP1 SHR ISZERO PUSH2 0x1AFD JUMPI PUSH1 0x2 SWAP3 DUP4 SHR SWAP3 ADD JUMPDEST PUSH1 0x1 DUP4 SWAP1 SHR ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 DUP4 LT PUSH2 0x1B1E JUMPI DUP2 PUSH2 0xC54 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1B33 PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x2415 JUMP JUMPDEST PUSH2 0xC54 SWAP1 DUP5 DUP5 AND PUSH2 0x236C JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP3 GT ISZERO PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0xD0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x650 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1B9D PUSH2 0x1B7F PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0x1B95 PUSH2 0x1B8B DUP9 PUSH2 0x1257 JUMP JUMPDEST DUP7 DUP9 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 SWAP2 SWAP1 PUSH2 0x1C6F JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x1BB6 DUP4 PUSH2 0x1C7C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x1BEF PUSH2 0x175D JUMP JUMPDEST PUSH2 0xCD5 DUP4 DUP4 DUP4 PUSH2 0x1CA3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1C1C JUMPI PUSH2 0x1C19 PUSH1 0xB PUSH2 0xCB2 PUSH2 0x1622 DUP5 PUSH2 0x1B3F JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1C3E JUMPI PUSH2 0x1C3B PUSH1 0xB PUSH2 0xCBD PUSH2 0x1622 DUP5 PUSH2 0x1B3F JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP6 DUP5 AND DUP4 MSTORE SWAP2 KECCAK256 SLOAD PUSH2 0xCD5 SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP4 PUSH2 0x15C4 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1B9D DUP6 DUP6 DUP6 PUSH2 0x1DC9 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1CCD JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1CC2 SWAP2 SWAP1 PUSH2 0x236C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x1D3D SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1D1F JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x650 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1D59 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x1D77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1DBC SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH2 0x1EE5 JUMPI PUSH0 PUSH2 0x1DE5 DUP8 PUSH2 0xF91 PUSH1 0x1 DUP6 PUSH2 0x237F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP1 DUP3 AND DUP1 DUP5 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH1 0x20 DUP5 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP8 AND LT ISZERO PUSH2 0x1E39 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2520601D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH6 0xFFFFFFFFFFFF DUP1 DUP9 AND SWAP2 AND SUB PUSH2 0x1E85 JUMPI DUP5 PUSH2 0x1E5C DUP9 PUSH2 0xF91 PUSH1 0x1 DUP7 PUSH2 0x237F JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1ED5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP1 DUP9 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP9 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP12 SLOAD PUSH1 0x1 DUP2 ADD DUP14 SSTORE PUSH0 DUP14 DUP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x30 SHL MUL SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 ADD SSTORE JUMPDEST PUSH1 0x20 ADD MLOAD SWAP3 POP DUP4 SWAP2 POP PUSH2 0x1BA2 SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 ADD DUP11 SSTORE PUSH0 DUP11 DUP2 MSTORE SWAP2 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x30 SHL MUL SWAP2 SWAP1 SWAP4 AND OR SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP DUP2 PUSH2 0x1BA2 JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1F63 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1F47 JUMP JUMPDEST POP PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xC54 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1F3F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6C5 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FB9 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1FC4 DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1FE4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1FEF DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1FFF DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2020 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2037 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xC54 DUP2 PUSH2 0x1F94 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2056 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2061 DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x2071 DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2094 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x20A7 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x20B5 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x20C6 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH0 PUSH1 0x20 PUSH1 0xE0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x20F9 PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0x1F3F JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x210B DUP2 DUP11 PUSH2 0x1F3F JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP9 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x215E JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2142 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2180 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x219A JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x21A5 DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x21C1 PUSH1 0x60 DUP9 ADD PUSH2 0x2170 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x21F1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x21FC DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x220C DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2228 PUSH1 0x80 DUP10 ADD PUSH2 0x2170 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2255 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2260 DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2270 DUP2 PUSH2 0x1F94 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x228C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2297 DUP2 PUSH2 0x1F94 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2270 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x22C3 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x22E1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP3 MSTORE DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH0 DUP3 DUP5 PUSH1 0xC0 DUP5 ADD CALLDATACOPY PUSH0 PUSH1 0xC0 DUP5 DUP5 ADD ADD MSTORE PUSH1 0xC0 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP4 ADD ADD SWAP1 POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2351 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x5D8 JUMPI PUSH2 0x5D8 PUSH2 0x2358 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x5D8 JUMPI PUSH2 0x5D8 PUSH2 0x2358 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x23B2 JUMPI PUSH2 0x23B2 PUSH2 0x2358 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x23B2 JUMPI PUSH2 0x23B2 PUSH2 0x2358 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0x242F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD0 REVERT 0x29 0x5C 0xCE DUP7 SWAP2 0x22 PUSH16 0xD804A3F9C21CF8904112A09C97BC80F3 0xD8 SWAP13 PUSH8 0xF522E07B64736F6C PUSH4 0x43000816 STOP CALLER ",
		"sourceMap": "581:968:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89:9;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;:::i;:::-;;:::i;:::-;;;1288:14:33;;1281:22;1263:41;;1251:2;1236:18;4293:186:9;1123:187:33;3144:97:9;3222:12;;3144:97;;;1461:25:33;;;1449:2;1434:18;3144:97:9;1315:177:33;5039:244:9;;;;;;:::i;:::-;;:::i;3002:82::-;;;3075:2;2100:36:33;;2088:2;2073:18;3002:82:9;1958:184:33;2656:112:14;;;:::i;3922:364:2:-;;;;;;:::i;:::-;;:::i;958:63:32:-;;;:::i;:::-;;1027:93;;;;;;:::i;:::-;;:::i;618:87:11:-;;;;;;:::i;:::-;;:::i;3040:272:2:-;;;:::i;5539:117::-;;;;;;:::i;:::-;-1:-1:-1;;;;;5630:19:2;;;5604:7;5630:19;;;:10;:19;;;;;;;;5539:117;;;;-1:-1:-1;;;;;2930:32:33;;;2912:51;;2900:2;2885:18;5539:117:2;2766:203:33;5738:138:2;;;;;;:::i;:::-;;:::i;1850:84:20:-;1920:7;;;;1850:84;;4784:962:12;;;;;;:::i;:::-;;:::i;1934:161::-;;;;;;:::i;:::-;;:::i;3208:126:15:-;;;;;;:::i;:::-;;:::i;:::-;;;4118:10:33;4106:23;;;4088:42;;4076:2;4061:18;3208:126:15;3944:192:33;3299:116:9;;;;;;:::i;:::-;-1:-1:-1;;;;;3390:18:9;3364:7;3390:18;;;;;;;;;;;;3299:116;2293:101:0;;;:::i;1021:158:11:-;;;;;;:::i;:::-;;:::i;1377:170:32:-;;;;;;:::i;:::-;;:::i;893:59::-;;;:::i;5144:557:25:-;;;:::i;:::-;;;;;;;;;;;;;:::i;1638:85:0:-;1710:6;;;;;-1:-1:-1;;;;;1710:6:0;1638:85;;4922:341:2;;;;;;:::i;:::-;;:::i;2789:96::-;;;:::i;:::-;;;5579:14:33;5567:27;;;5549:46;;5537:2;5522:18;2789:96:2;5405:196:33;2276:93:9;;;:::i;3402:135:2:-;;;;;;:::i;:::-;;:::i;3610:178:9:-;;;;;;:::i;:::-;;:::i;5954:554:2:-;;;;;;:::i;:::-;;:::i;1680:672:14:-;;;;;;:::i;:::-;;:::i;2460:232:12:-;;;;;;:::i;:::-;;:::i;3846:140:9:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3952:18:9;;;3926:7;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3846:140;3411:163:15;;;;;;:::i;:::-;;:::i;:::-;;;;8150:13:33;;8165:14;8146:34;8128:53;;8241:4;8229:17;;;8223:24;-1:-1:-1;;;;;8219:50:33;8197:20;;;8190:80;;;;8101:18;3411:163:15;7920:356:33;2543:215:0;;;;;;:::i;:::-;;:::i;2074:89:9:-;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;735:10:18;4420:31:9;735:10:18;4436:7:9;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;;:::o;5039:244::-;5126:4;735:10:18;5182:37:9;5198:4;735:10:18;5213:5:9;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;-1:-1:-1;5272:4:9;;5039:244;-1:-1:-1;;;;5039:244:9:o;2656:112:14:-;2715:7;2741:20;:18;:20::i;:::-;2734:27;;2656:112;:::o;3922:364:2:-;4009:7;4028:23;4054:7;:5;:7::i;:::-;4028:33;;4088:16;4075:29;;:9;:29;4071:115;;4127:48;;-1:-1:-1;;;4127:48:2;;;;;8838:25:33;;;8911:14;8899:27;;8879:18;;;8872:55;8811:18;;4127:48:2;;;;;;;;4071:115;4202:77;4250:28;4268:9;4250:17;:28::i;:::-;-1:-1:-1;;;;;4202:29:2;;;;;;:20;:29;;;;;;:47;:77::i;:::-;-1:-1:-1;;;;;4195:84:2;;3922:364;-1:-1:-1;;;;3922:364:2:o;958:63:32:-;1531:13:0;:11;:13::i;:::-;1004:10:32::1;:8;:10::i;:::-;958:63::o:0;1027:93::-;1531:13:0;:11;:13::i;:::-;1096:17:32::1;1102:2;1106:6;1096:5;:17::i;:::-;1027:93:::0;;:::o;618:87:11:-;672:26;735:10:18;692:5:11;672;:26::i;:::-;618:87;:::o;3040:272:2:-;3091:13;3180:18;:16;:18::i;:::-;3169:29;;:7;:5;:7::i;:::-;:29;;;3165:93;;3221:26;;-1:-1:-1;;;3221:26:2;;;;;;;;;;;3165:93;-1:-1:-1;3267:38:2;;;;;;;;;;;;;;;;;;3040:272::o;5738:138::-;735:10:18;5840:29:2;735:10:18;5859:9:2;5840;:29::i;4784:962:12:-;4948:4;4964:15;4982:19;4995:5;4982:12;:19::i;:::-;4964:37;;5023:7;5015:5;:15;5011:84;;;5053:31;;-1:-1:-1;;;5053:31:12;;;;;1461:25:33;;;1434:18;;5053:31:12;1315:177:33;5011:84:12;5104:11;5118:22;5127:5;5134;5118:8;:22::i;:::-;5104:36;;5150:31;5164:8;5175:5;5150;:31::i;:::-;5195:59;;-1:-1:-1;;;5195:59:12;;1038:45;;-1:-1:-1;;;;;5195:20:12;;;;;:59;;735:10:18;;5230:5:12;;5237;;5244:3;;5249:4;;;;5195:59;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:75;5191:154;;5293:41;;-1:-1:-1;;;5293:41:12;;-1:-1:-1;;;;;2930:32:33;;5293:41:12;;;2912:51:33;2885:18;;5293:41:12;2766:203:33;5191:154:12;5354:24;5410:62;5434:8;5453:4;5460:11;5468:3;5460:5;:11;:::i;:::-;5410:15;:62::i;:::-;5486:8;;;:42;;-1:-1:-1;;;;;;5498:30:12;;;5486:42;5482:237;;;5544:37;5558:8;5569:11;5577:3;5569:5;:11;:::i;:::-;5544:5;:37::i;:::-;5482:237;;;5612:31;5626:8;5637:5;5612;:31::i;:::-;5657:51;5675:8;5686:16;5704:3;5657:9;:51::i;:::-;-1:-1:-1;5735:4:12;;4784:962;-1:-1:-1;;;;;;;;4784:962:12:o;1934:161::-;2000:7;-1:-1:-1;;;;;2026:22:12;;2043:4;2026:22;:62;;2087:1;2026:62;;;3222:12:9;;2051:33:12;;-1:-1:-1;;2051:33:12;:::i;3208:126:15:-;3278:6;3303:24;3319:7;3303:15;:24::i;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;1021:158:11:-:0;1096:45;1112:7;735:10:18;1135:5:11;1096:15;:45::i;:::-;1151:21;1157:7;1166:5;1151;:21::i;1377:170:32:-;1491:7;1521:19;1534:5;1521:12;:19::i;893:59::-;1531:13:0;:11;:13::i;:::-;937:8:32::1;:6;:8::i;5144:557:25:-:0;5242:13;5269:18;5301:21;5336:15;5365:25;5404:12;5430:27;5533:13;:11;:13::i;:::-;5560:16;:14;:16::i;:::-;5668;;;5652:1;5668:16;;;;;;;;;-1:-1:-1;;;5482:212:25;;;-1:-1:-1;5482:212:25;;-1:-1:-1;5590:13:25;;-1:-1:-1;5625:4:25;;-1:-1:-1;5652:1:25;-1:-1:-1;5668:16:25;-1:-1:-1;5482:212:25;-1:-1:-1;5144:557:25:o;4922:341:2:-;4998:7;5017:23;5043:7;:5;:7::i;:::-;5017:33;;5077:16;5064:29;;:9;:29;5060:115;;5116:48;;-1:-1:-1;;;5116:48:2;;;;;8838:25:33;;;8911:14;8899:27;;8879:18;;;8872:55;8811:18;;5116:48:2;8666:267:33;5060:115:2;5191:65;5227:28;5245:9;5227:17;:28::i;:::-;5191:17;;:35;:65::i;:::-;-1:-1:-1;;;;;5184:72:2;;4922:341;-1:-1:-1;;;4922:341:2:o;2789:96::-;2835:6;2860:18;:16;:18::i;2276:93:9:-;2323:13;2355:7;2348:14;;;;;:::i;3402:135:2:-;-1:-1:-1;;;;;3492:29:2;;3466:7;3492:29;;;:20;:29;;;;;:38;;:36;:38::i;:::-;-1:-1:-1;;;;;3485:45:2;;3402:135;-1:-1:-1;;3402:135:2:o;3610:178:9:-;3679:4;735:10:18;3733:27:9;735:10:18;3750:2:9;3754:5;3733:9;:27::i;5954:554:2:-;6159:6;6141:15;:24;6137:91;;;6188:29;;-1:-1:-1;;;6188:29:2;;;;;1461:25:33;;;1434:18;;6188:29:2;1315:177:33;6137:91:2;6308:57;;;2063:71;6308:57;;;10624:25:33;-1:-1:-1;;;;;10685:32:33;;10665:18;;;10658:60;;;;10734:18;;;10727:34;;;10777:18;;;10770:34;;;6237:14:2;;6254:168;;6281:86;;10596:19:33;;6308:57:2;;;;;;;;;;;;6298:68;;;;;;6281:16;:86::i;:::-;6381:1;6396;6411;6254:13;:168::i;:::-;6237:185;;6432:31;6449:6;6457:5;6432:16;:31::i;:::-;6473:28;6483:6;6491:9;6473;:28::i;:::-;6127:381;5954:554;;;;;;:::o;1680:672:14:-;1901:8;1883:15;:26;1879:97;;;1932:33;;-1:-1:-1;;;1932:33:14;;;;;1461:25:33;;;1434:18;;1932:33:14;1315:177:33;1879:97:14;1986:18;1022:95;2045:5;2052:7;2061:5;2068:16;2078:5;-1:-1:-1;;;;;1121:14:19;819:7;1121:14;;;:7;:14;;;;;:16;;;;;;;;;759:395;2068:16:14;2017:78;;;;;;11102:25:33;;;;-1:-1:-1;;;;;11201:15:33;;;11181:18;;;11174:43;11253:15;;;;11233:18;;;11226:43;11285:18;;;11278:34;11328:19;;;11321:35;11372:19;;;11365:35;;;11074:19;;2017:78:14;;;;;;;;;;;;2007:89;;;;;;1986:110;;2107:12;2122:28;2139:10;2122:16;:28::i;:::-;2107:43;;2161:14;2178:28;2192:4;2198:1;2201;2204;2178:13;:28::i;:::-;2161:45;;2230:5;-1:-1:-1;;;;;2220:15:14;:6;-1:-1:-1;;;;;2220:15:14;;2216:88;;2258:35;;-1:-1:-1;;;2258:35:14;;-1:-1:-1;;;;;11641:15:33;;;2258:35:14;;;11623:34:33;11693:15;;11673:18;;;11666:43;11558:18;;2258:35:14;11411:304:33;2216:88:14;2314:31;2323:5;2330:7;2339:5;2314:8;:31::i;:::-;1869:483;;;1680:672;;;;;;;:::o;2460:232:12:-;2537:7;-1:-1:-1;;;;;2560:22:12;;2577:4;2560:22;2556:90;;2605:30;;-1:-1:-1;;;2605:30:12;;-1:-1:-1;;;;;2930:32:33;;2605:30:12;;;2912:51:33;2885:18;;2605:30:12;2766:203:33;2556:90:12;3160:7;2662:23;2655:30;2460:232;-1:-1:-1;;;2460:232:12:o;3411:163:15:-;-1:-1:-1;;;;;;;;;;;;;;;;;3541:26:15;3554:7;3563:3;3541:12;:26::i;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;2912:51:33::0;2885:18;;2672:31:0::1;2766:203:33::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;9277:96:2:-:0;9335:7;9361:5;9365:1;9361;:5;:::i;9379:101::-;9442:7;9468:5;9472:1;9468;:5;:::i;8989:128:9:-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;10663:477::-;-1:-1:-1;;;;;3952:18:9;;;10762:24;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10828:37:9;;10824:310;;10904:5;10885:16;:24;10881:130;;;10936:60;;-1:-1:-1;;;10936:60:9;;-1:-1:-1;;;;;12317:32:33;;10936:60:9;;;12299:51:33;12366:18;;;12359:34;;;12409:18;;;12402:34;;;12272:18;;10936:60:9;12097:345:33;10881:130:9;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10752:388;10663:477;;;:::o;5656:300::-;-1:-1:-1;;;;;5739:18:9;;5735:86;;5780:30;;-1:-1:-1;;;5780:30:9;;5807:1;5780:30;;;2912:51:33;2885:18;;5780:30:9;2766:203:33;5735:86:9;-1:-1:-1;;;;;5834:16:9;;5830:86;;5873:32;;-1:-1:-1;;;5873:32:9;;5902:1;5873:32;;;2912:51:33;2885:18;;5873:32:9;2766:203:33;5830:86:9;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;3845:262:25:-;3898:7;3929:4;-1:-1:-1;;;;;3938:11:25;3921:28;;:63;;;;;3970:14;3953:13;:31;3921:63;3917:184;;;-1:-1:-1;4007:22:25;;3845:262::o;3917:184::-;4067:23;4204:80;;;2079:95;4204:80;;;13256:25:33;4226:11:25;13297:18:33;;;13290:34;;;;4239:14:25;13340:18:33;;;13333:34;4255:13:25;13383:18:33;;;13376:34;4278:4:25;13426:19:33;;;13419:61;4168:7:25;;13228:19:33;;4204:80:25;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;14291:213:28;14347:6;14377:16;14369:24;;14365:103;;;14416:41;;-1:-1:-1;;;14416:41:28;;14447:2;14416:41;;;12628:36:33;12680:18;;;12673:34;;;12601:18;;14416:41:28;12447:266:33;14365:103:28;-1:-1:-1;14491:5:28;14291:213::o;9441:606:30:-;9559:24;;9526:7;;;9559:24;9658:1;9652:7;;9648:234;;;9675:11;9695:14;9705:3;9695:9;:14::i;:::-;9689:20;;:3;:20;:::i;:::-;14209:28;14272:20;;;14337:4;14324:18;;9675:34;;-1:-1:-1;14320:28:30;;9733:42;;;;;9727:48;;;;9723:149;;;9802:3;9795:10;;9723:149;;;9850:7;:3;9856:1;9850:7;:::i;:::-;9844:13;;9723:149;9661:221;9648:234;9892:11;9906:53;9925:4;9944:3;9949;9954:4;9906:18;:53::i;:::-;9892:67;-1:-1:-1;9977:8:30;;:63;;9992:41;10006:4;10025:7;10031:1;10025:3;:7;:::i;:::-;14209:28;14272:20;;;14337:4;14324:18;;;14320:28;;14099:265;9992:41;:48;-1:-1:-1;;;9992:48:30;;-1:-1:-1;;;;;9992:48:30;9977:63;;;9988:1;9977:63;9970:70;9441:606;-1:-1:-1;;;;;;;9441:606:30:o;1796:162:0:-;1710:6;;-1:-1:-1;;;;;1710:6:0;;;;;735:10:18;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:18;1901:40:0;;;2912:51:33;2885:18;;1901:40:0;2766:203:33;2710:117:20;1721:16;:14;:16::i;:::-;2768:7:::1;:15:::0;;-1:-1:-1;;2768:15:20::1;::::0;;2798:22:::1;735:10:18::0;2807:12:20::1;2798:22;::::0;-1:-1:-1;;;;;2930:32:33;;;2912:51;;2900:2;2885:18;2798:22:20::1;;;;;;;2710:117::o:0;7721:208:9:-;-1:-1:-1;;;;;7791:21:9;;7787:91;;7835:32;;-1:-1:-1;;;7835:32:9;;7864:1;7835:32;;;2912:51:33;2885:18;;7835:32:9;2766:203:33;7787:91:9;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;8247:206::-;-1:-1:-1;;;;;8317:21:9;;8313:89;;8361:30;;-1:-1:-1;;;8361:30:9;;8388:1;8361:30;;;2912:51:33;2885:18;;8361:30:9;2766:203:33;8313:89:9;8411:35;8419:7;8436:1;8440:5;8411:7;:35::i;931:109:31:-;977:6;1002:31;1020:12;1002:17;:31::i;6686:312:2:-;-1:-1:-1;;;;;5630:19:2;;;6768;5630;;;:10;:19;;;;;;;;6818:31;;;-1:-1:-1;;;;;;6818:31:2;;;;;;;6865:48;;5630:19;;;;;6818:31;5630:19;;;;6865:48;;6768:19;6865:48;6923:68;6942:11;6955:9;6966:24;6982:7;6966:15;:24::i;:::-;6923:18;:68::i;8572:162::-;-1:-1:-1;;;;;8688:29:2;;8645:6;8688:29;;;:20;:29;;;;;11096:24:30;8670:57:2;;:17;:57::i;2912:187:0:-;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;3004:6;3020:17;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;2406:143:14:-;-1:-1:-1;;;;;624:14:19;;2497:7:14;624:14:19;;;:7;:14;;;;;;2523:19:14;538:107:19;2463:115:20;1474:19;:17;:19::i;:::-;2522:7:::1;:14:::0;;-1:-1:-1;;2522:14:20::1;2532:4;2522:14;::::0;;2551:20:::1;2558:12;735:10:18::0;;656:96;6021:126:25;6067:13;6099:41;:5;6126:13;6099:26;:41::i;6473:135::-;6522:13;6554:47;:8;6584:16;6554:29;:47::i;10167:206:30:-;10262:24;;10229:7;;10303:8;;:63;;10318:41;10332:4;10351:7;10357:1;10351:3;:7;:::i;10318:41::-;:48;-1:-1:-1;;;10318:48:30;;-1:-1:-1;;;;;10318:48:30;10303:63;;4917:176:25;4994:7;5020:66;5053:20;:18;:20::i;:::-;5075:10;3555:4:26;3549:11;-1:-1:-1;;;3573:23:26;;3625:4;3616:14;;3609:39;;;;3677:4;3668:14;;3661:34;3733:4;3718:20;;;3353:401;6803:260:24;6888:7;6908:17;6927:18;6947:16;6967:25;6978:4;6984:1;6987;6990;6967:10;:25::i;:::-;6907:85;;;;;;7002:28;7014:5;7021:8;7002:11;:28::i;:::-;-1:-1:-1;7047:9:24;;6803:260;-1:-1:-1;;;;;;6803:260:24:o;1265:222:19:-;-1:-1:-1;;;;;1121:14:19;;1348:15;1121:14;;;:7;:14;;;;;:16;;;;;;;;1396;;;1392:89;;1435:35;;-1:-1:-1;;;1435:35:19;;-1:-1:-1;;;;;12910:32:33;;1435:35:19;;;12892:51:33;12959:18;;;12952:34;;;12865:18;;1435:35:19;12718:274:33;8811:199:2;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;8966:29:2;;;;;;:20;:29;;;;;:37;;8999:3;8966:32;:37::i;9949:432:9:-;-1:-1:-1;;;;;10061:19:9;;10057:89;;10103:32;;-1:-1:-1;;;10103:32:9;;10132:1;10103:32;;;2912:51:33;2885:18;;10103:32:9;2766:203:33;10057:89:9;-1:-1:-1;;;;;10159:21:9;;10155:90;;10203:31;;-1:-1:-1;;;10203:31:9;;10231:1;10203:31;;;2912:51:33;2885:18;;10203:31:9;2766:203:33;10155:90:9;-1:-1:-1;;;;;10254:18:9;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10299:76;;;;10349:7;-1:-1:-1;;;;;10333:31:9;10342:5;-1:-1:-1;;;;;10333:31:9;;10358:5;10333:31;;;;1461:25:33;;1449:2;1434:18;;1315:177;10333:31:9;;;;;;;;9949:432;;;;:::o;1194:177:32:-;1334:30;1348:4;1354:2;1358:5;1334:13;:30::i;8587:1642:27:-;8635:7;8658:1;8663;8658:6;8654:45;;-1:-1:-1;8687:1:27;;8587:1642;-1:-1:-1;8587:1642:27:o;8654:45::-;9378:14;9412:1;9401:7;9406:1;9401:4;:7::i;:::-;:12;;9395:1;:19;;9378:36;;9873:1;9862:6;9858:1;:10;;;;;:::i;:::-;;9849:6;:19;9848:26;;9839:35;;9922:1;9911:6;9907:1;:10;;;;;:::i;:::-;;9898:6;:19;9897:26;;9888:35;;9971:1;9960:6;9956:1;:10;;;;;:::i;:::-;;9947:6;:19;9946:26;;9937:35;;10020:1;10009:6;10005:1;:10;;;;;:::i;:::-;;9996:6;:19;9995:26;;9986:35;;10069:1;10058:6;10054:1;:10;;;;;:::i;:::-;;10045:6;:19;10044:26;;10035:35;;10118:1;10107:6;10103:1;:10;;;;;:::i;:::-;;10094:6;:19;10093:26;;10084:35;;10167:1;10156:6;10152:1;:10;;;;;:::i;:::-;;10143:6;:19;10142:26;;10133:35;;10189:23;10193:6;10205;10201:1;:10;;;;;:::i;:::-;;10189:3;:23::i;12736:433:30:-;12893:7;12912:230;12925:4;12919:3;:10;12912:230;;;12945:11;12959:23;12972:3;12977:4;12959:12;:23::i;:::-;14209:28;14272:20;;;14337:4;14324:18;;12945:37;;-1:-1:-1;13000:35:30;;;;14320:28;;13000:29;;;:35;12996:136;;;13062:3;13055:10;;12996:136;;;13110:7;:3;13116:1;13110:7;:::i;:::-;13104:13;;12996:136;12931:211;12912:230;;;-1:-1:-1;13158:4:30;12736:433;-1:-1:-1;;;12736:433:30:o;2202:126:20:-;1920:7;;;;2260:62;;2296:15;;-1:-1:-1;;;2296:15:20;;;;;;;;;;;3000:133:15;-1:-1:-1;;;;;3390:18:9;;3082:7:15;3390:18:9;;;;;;;;;;;3108::15;3299:116:9;7717:780:2;7817:2;-1:-1:-1;;;;;7809:10:2;:4;-1:-1:-1;;;;;7809:10:2;;;:24;;;;;7832:1;7823:6;:10;7809:24;7805:686;;;-1:-1:-1;;;;;7853:18:2;;;7849:315;;-1:-1:-1;;;;;7957:26:2;;7892:16;7957:26;;;:20;:26;;;;;7892:16;;7930:150;;8005:9;8036:26;8055:6;8036:18;:26::i;:::-;7930:5;:150::i;:::-;-1:-1:-1;;;;;7891:189:2;;;-1:-1:-1;;;;;7891:189:2;;;8124:4;-1:-1:-1;;;;;8103:46:2;;8130:8;8140;8103:46;;;;;;13797:25:33;;;13853:2;13838:18;;13831:34;13785:2;13770:18;;13623:248;8103:46:2;;;;;;;;7873:291;;7849:315;-1:-1:-1;;;;;8181:16:2;;;8177:304;;-1:-1:-1;;;;;8283:24:2;;8218:16;8283:24;;;:20;:24;;;;;8218:16;;8256:143;;8329:4;8355:26;8374:6;8355:18;:26::i;8256:143::-;-1:-1:-1;;;;;8217:182:2;;;-1:-1:-1;;;;;8217:182:2;;;8443:2;-1:-1:-1;;;;;8422:44:2;;8447:8;8457;8422:44;;;;;;13797:25:33;;;13853:2;13838:18;;13831:34;13785:2;13770:18;;13623:248;8422:44:2;;;;;;;;8199:282;;7717:780;;;:::o;15291:213:28:-;15347:6;15377:16;15369:24;;15365:103;;;15416:41;;-1:-1:-1;;;15416:41:28;;15447:2;15416:41;;;12628:36:33;12680:18;;;12673:34;;;12601:18;;15416:41:28;12447:266:33;2002:128:20;1920:7;;;;2063:61;;;2098:15;;-1:-1:-1;;;2098:15:20;;;;;;;;;;;3385:267:21;3479:13;1390:66;3508:46;;3504:142;;3577:15;3586:5;3577:8;:15::i;:::-;3570:22;;;;3504:142;3630:5;3623:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5140:1530:24;5266:7;;;6199:66;6186:79;;6182:164;;;-1:-1:-1;6297:1:24;;-1:-1:-1;6301:30:24;;-1:-1:-1;6333:1:24;6281:54;;6182:164;6457:24;;;6440:14;6457:24;;;;;;;;;14374:25:33;;;14447:4;14435:17;;14415:18;;;14408:45;;;;14469:18;;;14462:34;;;14512:18;;;14505:34;;;6457:24:24;;14346:19:33;;6457:24:24;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6457:24:24;;-1:-1:-1;;6457:24:24;;;-1:-1:-1;;;;;;;6495:20:24;;6491:113;;-1:-1:-1;6547:1:24;;-1:-1:-1;6551:29:24;;-1:-1:-1;6547:1:24;;-1:-1:-1;6531:62:24;;6491:113;6622:6;-1:-1:-1;6630:20:24;;-1:-1:-1;6630:20:24;;-1:-1:-1;5140:1530:24;;;;;;;;;:::o;7196:532::-;7291:20;7282:5;:29;;;;;;;;:::i;:::-;;7278:444;;7196:532;;:::o;7278:444::-;7387:29;7378:5;:38;;;;;;;;:::i;:::-;;7374:348;;7439:23;;-1:-1:-1;;;7439:23:24;;;;;;;;;;;7374:348;7492:35;7483:5;:44;;;;;;;;:::i;:::-;;7479:243;;7550:46;;-1:-1:-1;;;7550:46:24;;;;;1461:25:33;;;1434:18;;7550:46:24;1315:177:33;7479:243:24;7626:30;7617:5;:39;;;;;;;;:::i;:::-;;7613:109;;7679:32;;-1:-1:-1;;;7679:32:24;;;;;1461:25:33;;;1434:18;;7679:32:24;1315:177:33;11199:138:30;-1:-1:-1;;;;;;;;;;;;;;;;;11308:4:30;:17;;11326:3;11308:22;;;;;;;;;;:::i;:::-;;;;;;;;;;11301:29;;;;;;;;;11308:22;;11301:29;;;;;;-1:-1:-1;;;11301:29:30;;-1:-1:-1;;;;;11301:29:30;;;;;;;;;11199:138;-1:-1:-1;;;11199:138:30:o;2327:413:15:-;2421:30;2435:4;2441:2;2445:5;2421:13;:30::i;:::-;-1:-1:-1;;;;;2465:18:15;;2461:226;;2499:14;2516:13;3222:12:9;;;3144:97;2516:13:15;2499:30;-1:-1:-1;;;;;;2587:12:15;;;2583:94;;;2626:36;;-1:-1:-1;;;2626:36:15;;;;;13797:25:33;;;13838:18;;;13831:34;;;13770:18;;2626:36:15;13623:248:33;2583:94:15;2485:202;;2461:226;2696:37;2717:4;2723:2;2727:5;2696:20;:37::i;10699:983:27:-;10751:7;;10835:3;10826:12;;;:16;10822:99;;10872:3;10862:13;;;;10893;10822:99;10947:2;10938:11;;;:15;10934:96;;10983:2;10973:12;;;;11003;10934:96;11056:2;11047:11;;;:15;11043:96;;11092:2;11082:12;;;;11112;11043:96;11165:2;11156:11;;;:15;11152:96;;11201:2;11191:12;;;;11221;11152:96;11274:1;11265:10;;;:14;11261:93;;11309:1;11299:11;;;;11328;11261:93;11380:1;11371:10;;;:14;11367:93;;11415:1;11405:11;;;;11434;11367:93;11486:1;11477:10;;;:14;11473:93;;11521:1;11511:11;;;;11540;11473:93;11592:1;11583:10;;;:14;11579:64;;11627:1;11617:11;11669:6;10699:983;-1:-1:-1;;10699:983:27:o;2557:104::-;2615:7;2645:1;2641;:5;:13;;2653:1;2641:13;;;-1:-1:-1;2649:1:27;;2557:104;-1:-1:-1;2557:104:27:o;2774:153::-;2836:7;2909:11;2919:1;2910:5;;;2909:11;:::i;:::-;2899:21;;2900:5;;;2899:21;:::i;4169:218:28:-;4226:7;-1:-1:-1;;;;;4249:25:28;;4245:105;;;4297:42;;-1:-1:-1;;;4297:42:28;;4328:3;4297:42;;;12628:36:33;12680:18;;;12673:34;;;12601:18;;4297:42:28;12447:266:33;9016:255:2;9183:7;9192;9218:46;9229:7;:5;:7::i;:::-;9238:25;9241:14;:5;:12;:14::i;:::-;9257:5;9238:2;:25;;:::i;:::-;9218:5;;:46;:10;:46::i;:::-;9211:53;;;;9016:255;;;;;;;:::o;2078:405:21:-;2137:13;2162:11;2176:16;2187:4;2176:10;:16::i;:::-;2300:14;;;2311:2;2300:14;;;;;;;;;2162:30;;-1:-1:-1;2280:17:21;;2300:14;;;;;;;;;-1:-1:-1;;;2390:16:21;;;-1:-1:-1;2435:4:21;2426:14;;2419:28;;;;-1:-1:-1;2390:16:21;2078:405::o;1112:145:13:-;1474:19:20;:17;:19::i;:::-;1220:30:13::1;1234:4;1240:2;1244:5;1220:13;:30::i;7232:399:2:-:0;-1:-1:-1;;;;;7335:18:2;;7331:107;;7369:58;7375:17;7394:4;7400:26;7419:6;7400:18;:26::i;7369:58::-;;;7331:107;-1:-1:-1;;;;;7451:16:2;;7447:110;;7483:63;7489:17;7508:9;7519:26;7538:6;7519:18;:26::i;7483:63::-;;;7447:110;-1:-1:-1;;;;;5630:19:2;;;5604:7;5630:19;;;:10;:19;;;;;;;;;;;;;;;7566:58;;5630:19;;;;;7617:6;7566:18;:58::i;8050:162:30:-;8132:7;;8167:38;8175:4;8194:3;8199:5;8167:7;:38::i;2555:245:21:-;2616:7;2688:4;2652:40;;2715:2;2706:11;;2702:69;;;2740:20;;-1:-1:-1;;;2740:20:21;;;;;;;;;;;6271:1107:9;-1:-1:-1;;;;;6360:18:9;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:9;;-1:-1:-1;6356:540:9;;-1:-1:-1;;;;;6570:15:9;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:9;;-1:-1:-1;;;;;12317:32:33;;6649:50:9;;;12299:51:33;12366:18;;;12359:34;;;12409:18;;;12402:34;;;12272:18;;6649:50:9;12097:345:33;6599:115:9;-1:-1:-1;;;;;6834:15:9;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:9;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:9;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:9;7355:4;-1:-1:-1;;;;;7346:25:9;;7365:5;7346:25;;;;1461::33;;1449:2;1434:18;;1315:177;7346:25:9;;;;;;;;6271:1107;;;:::o;11513:870:30:-;11646:11;;11604:7;;;;11672;;11668:709;;11747:25;11775:28;11789:4;11795:7;11801:1;11795:3;:7;:::i;11775:28::-;11747:56;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11747:56:30;;;-1:-1:-1;;;;;11747:56:30;;;;;;;-1:-1:-1;11877:15:30;;;-1:-1:-1;11873:91:30;;;11919:30;;-1:-1:-1;;;11919:30:30;;;;;;;;;;;11873:91;12027:9;;:16;;;;;;;12023:189;;12101:5;12063:28;12077:4;12083:7;12089:1;12083:3;:7;:::i;12063:28::-;:43;;-1:-1:-1;;;;;12063:43:30;;;;-1:-1:-1;;;12063:43:30;;;;;;;;;;;12023:189;;;12155:41;;;;;;;;;;;;;;;-1:-1:-1;;;;;12155:41:30;;;;;;;;;;12145:52;;;;;;;-1:-1:-1;12145:52:30;;;;;;;;;;;;;;-1:-1:-1;;;12145:52:30;;;;;;;;;;12023:189;12233:11;;;;-1:-1:-1;12246:5:30;;-1:-1:-1;12225:27:30;;-1:-1:-1;12225:27:30;11668:709;-1:-1:-1;;12293:41:30;;;;;;;;;;;;;;;-1:-1:-1;;;;;12293:41:30;;;;;;;;;;12283:52;;;;;;;-1:-1:-1;12283:52:30;;;;;;;;;;;;;-1:-1:-1;;;12283:52:30;;;;;;;;;;;;-1:-1:-1;;12327:5:30;12349:17;;14:423:33;56:3;94:5;88:12;121:6;116:3;109:19;146:1;156:162;170:6;167:1;164:13;156:162;;;232:4;288:13;;;284:22;;278:29;260:11;;;256:20;;249:59;185:12;156:162;;;160:3;363:1;356:4;347:6;342:3;338:16;334:27;327:38;426:4;419:2;415:7;410:2;402:6;398:15;394:29;389:3;385:39;381:50;374:57;;;14:423;;;;:::o;442:220::-;591:2;580:9;573:21;554:4;611:45;652:2;641:9;637:18;629:6;611:45;:::i;667:131::-;-1:-1:-1;;;;;742:31:33;;732:42;;722:70;;788:1;785;778:12;803:315;871:6;879;932:2;920:9;911:7;907:23;903:32;900:52;;;948:1;945;938:12;900:52;987:9;974:23;1006:31;1031:5;1006:31;:::i;:::-;1056:5;1108:2;1093:18;;;;1080:32;;-1:-1:-1;;;803:315:33:o;1497:456::-;1574:6;1582;1590;1643:2;1631:9;1622:7;1618:23;1614:32;1611:52;;;1659:1;1656;1649:12;1611:52;1698:9;1685:23;1717:31;1742:5;1717:31;:::i;:::-;1767:5;-1:-1:-1;1824:2:33;1809:18;;1796:32;1837:33;1796:32;1837:33;:::i;:::-;1497:456;;1889:7;;-1:-1:-1;;;1943:2:33;1928:18;;;;1915:32;;1497:456::o;2329:180::-;2388:6;2441:2;2429:9;2420:7;2416:23;2412:32;2409:52;;;2457:1;2454;2447:12;2409:52;-1:-1:-1;2480:23:33;;2329:180;-1:-1:-1;2329:180:33:o;2514:247::-;2573:6;2626:2;2614:9;2605:7;2601:23;2597:32;2594:52;;;2642:1;2639;2632:12;2594:52;2681:9;2668:23;2700:31;2725:5;2700:31;:::i;2974:965::-;3100:6;3108;3116;3124;3132;3185:3;3173:9;3164:7;3160:23;3156:33;3153:53;;;3202:1;3199;3192:12;3153:53;3241:9;3228:23;3260:31;3285:5;3260:31;:::i;:::-;3310:5;-1:-1:-1;3367:2:33;3352:18;;3339:32;3380:33;3339:32;3380:33;:::i;:::-;3432:7;-1:-1:-1;3486:2:33;3471:18;;3458:32;;-1:-1:-1;3541:2:33;3526:18;;3513:32;3564:18;3594:14;;;3591:34;;;3621:1;3618;3611:12;3591:34;3659:6;3648:9;3644:22;3634:32;;3704:7;3697:4;3693:2;3689:13;3685:27;3675:55;;3726:1;3723;3716:12;3675:55;3766:2;3753:16;3792:2;3784:6;3781:14;3778:34;;;3808:1;3805;3798:12;3778:34;3853:7;3848:2;3839:6;3835:2;3831:15;3827:24;3824:37;3821:57;;;3874:1;3871;3864:12;3821:57;2974:965;;;;-1:-1:-1;2974:965:33;;-1:-1:-1;3905:2:33;3897:11;;3927:6;2974:965;-1:-1:-1;;;2974:965:33:o;4141:1259::-;4547:3;4542;4538:13;4530:6;4526:26;4515:9;4508:45;4489:4;4572:2;4610:3;4605:2;4594:9;4590:18;4583:31;4637:46;4678:3;4667:9;4663:19;4655:6;4637:46;:::i;:::-;4731:9;4723:6;4719:22;4714:2;4703:9;4699:18;4692:50;4765:33;4791:6;4783;4765:33;:::i;:::-;4829:2;4814:18;;4807:34;;;-1:-1:-1;;;;;4878:32:33;;4872:3;4857:19;;4850:61;4898:3;4927:19;;4920:35;;;4992:22;;;4986:3;4971:19;;4964:51;5064:13;;5086:22;;;5136:2;5162:15;;;;-1:-1:-1;5124:15:33;;;;-1:-1:-1;5205:169:33;5219:6;5216:1;5213:13;5205:169;;;5280:13;;5268:26;;5349:15;;;;5314:12;;;;5241:1;5234:9;5205:169;;;-1:-1:-1;5391:3:33;;4141:1259;-1:-1:-1;;;;;;;;;;;;4141:1259:33:o;5606:156::-;5672:20;;5732:4;5721:16;;5711:27;;5701:55;;5752:1;5749;5742:12;5701:55;5606:156;;;:::o;5767:592::-;5869:6;5877;5885;5893;5901;5909;5962:3;5950:9;5941:7;5937:23;5933:33;5930:53;;;5979:1;5976;5969:12;5930:53;6018:9;6005:23;6037:31;6062:5;6037:31;:::i;:::-;6087:5;-1:-1:-1;6139:2:33;6124:18;;6111:32;;-1:-1:-1;6190:2:33;6175:18;;6162:32;;-1:-1:-1;6213:36:33;6245:2;6230:18;;6213:36;:::i;:::-;6203:46;;6296:3;6285:9;6281:19;6268:33;6258:43;;6348:3;6337:9;6333:19;6320:33;6310:43;;5767:592;;;;;;;;:::o;6364:734::-;6475:6;6483;6491;6499;6507;6515;6523;6576:3;6564:9;6555:7;6551:23;6547:33;6544:53;;;6593:1;6590;6583:12;6544:53;6632:9;6619:23;6651:31;6676:5;6651:31;:::i;:::-;6701:5;-1:-1:-1;6758:2:33;6743:18;;6730:32;6771:33;6730:32;6771:33;:::i;:::-;6823:7;-1:-1:-1;6877:2:33;6862:18;;6849:32;;-1:-1:-1;6928:2:33;6913:18;;6900:32;;-1:-1:-1;6951:37:33;6983:3;6968:19;;6951:37;:::i;:::-;6941:47;;7035:3;7024:9;7020:19;7007:33;6997:43;;7087:3;7076:9;7072:19;7059:33;7049:43;;6364:734;;;;;;;;;;:::o;7103:388::-;7171:6;7179;7232:2;7220:9;7211:7;7207:23;7203:32;7200:52;;;7248:1;7245;7238:12;7200:52;7287:9;7274:23;7306:31;7331:5;7306:31;:::i;:::-;7356:5;-1:-1:-1;7413:2:33;7398:18;;7385:32;7426:33;7385:32;7426:33;:::i;:::-;7478:7;7468:17;;;7103:388;;;;;:::o;7496:419::-;7563:6;7571;7624:2;7612:9;7603:7;7599:23;7595:32;7592:52;;;7640:1;7637;7630:12;7592:52;7679:9;7666:23;7698:31;7723:5;7698:31;:::i;:::-;7748:5;-1:-1:-1;7805:2:33;7790:18;;7777:32;7853:10;7840:24;;7828:37;;7818:65;;7879:1;7876;7869:12;8281:380;8360:1;8356:12;;;;8403;;;8424:61;;8478:4;8470:6;8466:17;8456:27;;8424:61;8531:2;8523:6;8520:14;8500:18;8497:38;8494:161;;8577:10;8572:3;8568:20;8565:1;8558:31;8612:4;8609:1;8602:15;8640:4;8637:1;8630:15;8494:161;;8281:380;;;:::o;8938:734::-;-1:-1:-1;;;;;9245:15:33;;;9227:34;;9297:15;;9292:2;9277:18;;9270:43;9344:2;9329:18;;9322:34;;;9387:2;9372:18;;9365:34;;;9207:3;9430;9415:19;;9408:32;;;9456:19;;9449:35;;;9170:4;9477:6;9527;9521:3;9506:19;;9493:49;9592:1;9586:3;9577:6;9566:9;9562:22;9558:32;9551:43;9662:3;9655:2;9651:7;9646:2;9638:6;9634:15;9630:29;9619:9;9615:45;9611:55;9603:63;;8938:734;;;;;;;;;:::o;9677:184::-;9747:6;9800:2;9788:9;9779:7;9775:23;9771:32;9768:52;;;9816:1;9813;9806:12;9768:52;-1:-1:-1;9839:16:33;;9677:184;-1:-1:-1;9677:184:33:o;9866:127::-;9927:10;9922:3;9918:20;9915:1;9908:31;9958:4;9955:1;9948:15;9982:4;9979:1;9972:15;9998:125;10063:9;;;10084:10;;;10081:36;;;10097:18;;:::i;10128:128::-;10195:9;;;10216:11;;;10213:37;;;10230:18;;:::i;11720:182::-;-1:-1:-1;;;;;11827:10:33;;;11839;;;11823:27;;11862:11;;;11859:37;;;11876:18;;:::i;:::-;11859:37;11720:182;;;;:::o;11907:185::-;-1:-1:-1;;;;;12028:10:33;;;12016;;;12012:27;;12051:12;;;12048:38;;;12066:18;;:::i;13491:127::-;13552:10;13547:3;13543:20;13540:1;13533:31;13583:4;13580:1;13573:15;13607:4;13604:1;13597:15;14550:127;14611:10;14606:3;14602:20;14599:1;14592:31;14642:4;14639:1;14632:15;14666:4;14663:1;14656:15;14682:127;14743:10;14738:3;14734:20;14731:1;14724:31;14774:4;14771:1;14764:15;14798:4;14795:1;14788:15;14814:217;14854:1;14880;14870:132;;14924:10;14919:3;14915:20;14912:1;14905:31;14959:4;14956:1;14949:15;14987:4;14984:1;14977:15;14870:132;-1:-1:-1;15016:9:33;;14814:217::o"
	},
	"Assembly": ".code\n  PUSH 160\t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 40\t\t\tcontract SumaSamms is ERC20, E...\n  MSTORE \t\t\tcontract SumaSamms is ERC20, E...\n  CALLVALUE \t\t\tconstructor(address initialOwn...\n  DUP1 \t\t\tconstructor(address initialOwn...\n  ISZERO \t\t\tconstructor(address initialOwn...\n  PUSH [tag] 1\t\t\tconstructor(address initialOwn...\n  JUMPI \t\t\tconstructor(address initialOwn...\n  PUSH 0\t\t\tconstructor(address initialOwn...\n  DUP1 \t\t\tconstructor(address initialOwn...\n  REVERT \t\t\tconstructor(address initialOwn...\ntag 1\t\t\tconstructor(address initialOwn...\n  JUMPDEST \t\t\tconstructor(address initialOwn...\n  POP \t\t\tconstructor(address initialOwn...\n  PUSH 40\t\t\tconstructor(address initialOwn...\n  MLOAD \t\t\tconstructor(address initialOwn...\n  PUSHSIZE \t\t\tconstructor(address initialOwn...\n  CODESIZE \t\t\tconstructor(address initialOwn...\n  SUB \t\t\tconstructor(address initialOwn...\n  DUP1 \t\t\tconstructor(address initialOwn...\n  PUSHSIZE \t\t\tconstructor(address initialOwn...\n  DUP4 \t\t\tconstructor(address initialOwn...\n  CODECOPY \t\t\tconstructor(address initialOwn...\n  DUP2 \t\t\tconstructor(address initialOwn...\n  ADD \t\t\tconstructor(address initialOwn...\n  PUSH 40\t\t\tconstructor(address initialOwn...\n  DUP2 \t\t\tconstructor(address initialOwn...\n  SWAP1 \t\t\tconstructor(address initialOwn...\n  MSTORE \t\t\tconstructor(address initialOwn...\n  PUSH [tag] 2\t\t\tconstructor(address initialOwn...\n  SWAP2 \t\t\tconstructor(address initialOwn...\n  PUSH [tag] 3\t\t\tconstructor(address initialOwn...\n  JUMP \t\t\tconstructor(address initialOwn...\ntag 2\t\t\tconstructor(address initialOwn...\n  JUMPDEST \t\t\tconstructor(address initialOwn...\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 9\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 53756D6153616D6D73\t\t\t\n  PUSH B8\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 31\t\t\t\n  PUSH F8\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  DUP4 \t\t\tinitialOwner\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 9\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 53756D6153616D6D73\t\t\t\n  PUSH B8\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 4\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 53534153\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH 3\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 11\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 12\t\t\t\n  JUMP \t\t\t\ntag 11\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH 4\t\t\t\n  PUSH [tag] 13\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 12\t\t\t\n  JUMP \t\t\t\ntag 13\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH 5\t\t\ts to, u\n  DUP1 \t\t\ts to, uint256 v\n  SLOAD \t\t\ts to, uint256 v\n  PUSH FF\t\t\t\n  NOT \t\t\t\n  AND \t\t\ts to, uint256 v\n  SWAP1 \t\t\ts to, uint256 v\n  SSTORE \t\t\ts to, uint256 v\n  POP \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\t    override(ERC20, ERC20P\n  AND \t\t\t    override(ERC20, ERC20P\n  PUSH [tag] 16\t\t\t        override(ERC20, ERC20P...\n  JUMPI \t\t\t        override(ERC20, ERC20P...\n  PUSH 40\t\t\t  {\\n        super._update(fro...\n  MLOAD \t\t\t  {\\n        super._update(fro...\n  PUSH 1E4FBDF7\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t  {\\n        super._update(fro...\n  MSTORE \t\t\t  {\\n        super._update(fro...\n  PUSH 0\t\t\to\n  PUSH 4\t\t\t  {\\n        super._update(fro...\n  DUP3 \t\t\t  {\\n        super._update(fro...\n  ADD \t\t\t  {\\n        super._update(fro...\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  ADD \t\t\t\ntag 17\t\t\t  {\\n        super._update(fro...\n  JUMPDEST \t\t\t  {\\n        super._update(fro...\n  PUSH 40\t\t\t  {\\n        super._update(fro...\n  MLOAD \t\t\t  {\\n        super._update(fro...\n  DUP1 \t\t\t  {\\n        super._update(fro...\n  SWAP2 \t\t\t  {\\n        super._update(fro...\n  SUB \t\t\t  {\\n        super._update(fro...\n  SWAP1 \t\t\t  {\\n        super._update(fro...\n  REVERT \t\t\t  {\\n        super._update(fro...\ntag 16\t\t\t        override(ERC20, ERC20P...\n  JUMPDEST \t\t\t        override(ERC20, ERC20P...\n  PUSH [tag] 19\t\t\t    function nonces(address ow...\n  DUP2 \t\t\t(address own\n  PUSH [tag] 20\t\t\t    function nonce\n  JUMP \t\t\t    function nonces(address ow...\ntag 19\t\t\t    function nonces(address ow...\n  JUMPDEST \t\t\t    function nonces(address ow...\n  POP \t\t\t\n  PUSH [tag] 22\t\t\t\n  DUP3 \t\t\t\n  PUSH 6\t\t\t\n  PUSH [tag] 23\t\t\t\n  JUMP \t\t\t\ntag 22\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 120\t\t\t\n  MSTORE \t\t\t\n  PUSH [tag] 24\t\t\t\n  DUP2 \t\t\t\n  PUSH 7\t\t\t\n  PUSH [tag] 23\t\t\t\n  JUMP \t\t\t\ntag 24\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 140\t\t\t\n  MSTORE \t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  KECCAK256 \t\t\t\n  PUSH E0\t\t\t\n  MSTORE \t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  KECCAK256 \t\t\t\n  PUSH 100\t\t\t\n  MSTORE \t\t\t\n  CHAINID \t\t\t\n  PUSH A0\t\t\t\n  MSTORE \t\t\t\n  PUSH [tag] 25\t\t\t\n  PUSH E0\t\t\t\n  MLOAD \t\t\t\n  PUSH 100\t\t\t\n  MLOAD \t\t\t\n  PUSH 40\t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  PUSH 8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F\t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  SWAP3 \t\t\t\n  SWAP1 \t\t\t\n  SWAP3 \t\t\t\n  MSTORE \t\t\t\n  PUSH 60\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  CHAINID \t\t\t\n  PUSH 80\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  ADDRESS \t\t\t\n  PUSH A0\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  PUSH C0\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  DUP4 \t\t\t\n  SUB \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  SWAP1 \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  KECCAK256 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 25\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 80\t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  ADDRESS \t\t\t\n  PUSH C0\t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  PUSH [tag] 29\t\t\t_mint(msg.sender, 1 * 10 ** de...\n  CALLER \t\t\tmsg.sender\n  PUSH [tag] 32\t\t\t10 ** decimals()\n  PUSH 12\t\t\t\n  PUSH A\t\t\t10\n  PUSH [tag] 33\t\t\t10 ** decimals()\n  JUMP \t\t\t10 ** decimals()\ntag 32\t\t\t10 ** decimals()\n  JUMPDEST \t\t\t10 ** decimals()\n  PUSH [tag] 34\t\t\t1 * 10 ** decimals()\n  SWAP1 \t\t\t1 * 10 ** decimals()\n  PUSH 1\t\t\t1\n  PUSH [tag] 35\t\t\t1 * 10 ** decimals()\n  JUMP \t\t\t1 * 10 ** decimals()\ntag 34\t\t\t1 * 10 ** decimals()\n  JUMPDEST \t\t\t1 * 10 ** decimals()\n  PUSH [tag] 36\t\t\t_mint\n  JUMP \t\t\t_mint(msg.sender, 1 * 10 ** de...\ntag 29\t\t\t_mint(msg.sender, 1 * 10 ** de...\n  JUMPDEST \t\t\t_mint(msg.sender, 1 * 10 ** de...\n  POP \t\t\tconstructor(address initialOwn...\n  PUSH [tag] 191\t\t\tcontract SumaSamms is ERC20, E...\n  JUMP \t\t\tcontract SumaSamms is ERC20, E...\ntag 20\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 5\t\t\t\n  DUP1 \t\t\t\n  SLOAD \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP4 \t\t\t\n  DUP2 \t\t\t\n  AND \t\t\t\n  PUSH 100\t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  MUL \t\t\t\n  PUSH 100\t\t\t\n  PUSH 1\t\t\t\n  PUSH A8\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  NOT \t\t\t\n  DUP6 \t\t\t\n  AND \t\t\t\n  OR \t\t\t\n  SWAP1 \t\t\t\n  SWAP5 \t\t\t\n  SSTORE \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  SWAP4 \t\t\t\n  SWAP1 \t\t\t\n  SWAP3 \t\t\t\n  DIV \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  DUP3 \t\t\t\n  SWAP1 \t\t\t\n  PUSH 8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0\t\t\t\n  SWAP1 \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  LOG3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 23\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP4 \t\t\t\n  MLOAD \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 40\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 41\t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 42\t\t\t\n  JUMP \t\t\t\ntag 41\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 43\t\t\t\n  JUMP \t\t\t\ntag 40\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 46\t\t\t\n  DUP5 \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 12\t\t\t\n  JUMP \t\t\t\ntag 46\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH FF\t\t\tes(address owner)\\n        pub...\n  SWAP1 \t\t\tes(address owner)\\n        pub...\n  POP \t\t\t\ntag 43\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 36\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 52\t\t\t\n  JUMPI \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH EC442F05\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 0\t\t\t\n  PUSH 4\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 17\t\t\t\n  JUMP \t\t\t\ntag 52\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 54\t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 55\t\t\t\n  JUMP \t\t\t\ntag 54\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 42\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 1F\t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 57\t\t\t\n  JUMPI \t\t\t\n  DUP3 \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 305A27A9\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 4\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 17\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 59\t\t\t\n  JUMP \t\t\t\ntag 57\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 60\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 61\t\t\t\n  JUMP \t\t\t\ntag 60\t\t\t\n  JUMPDEST \t\t\t\n  OR \t\t\t\n  SWAP4 \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 55\t\t\tfunction _update(address from,...\n  JUMPDEST \t\t\tfunction _update(address from,...\n  PUSH [tag] 64\t\t\tsuper._update(from, to, value)\n  DUP4 \t\t\tfrom\n  DUP4 \t\t\tto\n  DUP4 \t\t\tvalue\n  PUSH [tag] 65\t\t\tsuper._update\n  JUMP \t\t\tsuper._update(from, to, value)\ntag 64\t\t\tsuper._update(from, to, value)\n  JUMPDEST \t\t\tsuper._update(from, to, value)\n  POP \t\t\tfunction _update(address from,...\n  POP \t\t\tfunction _update(address from,...\n  POP \t\t\tfunction _update(address from,...\n  JUMP \t\t\tfunction _update(address from,...\ntag 65\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 67\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 68\t\t\t\n  JUMP \t\t\t\ntag 67\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 69\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 70\t\t\t\n  PUSH 2\t\t\t\n  SLOAD \t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 70\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 74\t\t\t\n  JUMPI \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH E58AE93\t\t\t\n  PUSH E1\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 4\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  DUP4 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  DUP3 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 44\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 17\t\t\t\n  JUMP \t\t\t\ntag 74\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 69\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 64\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 78\t\t\t\n  JUMP \t\t\t\ntag 68\t\t\t);\\n    }\\n\\n    // The follow...\n  JUMPDEST \t\t\t);\\n    }\\n\\n    // The follow...\n  PUSH [tag] 80\t\t\t        returns (ui\n  PUSH [tag] 81\t\t\t        returns (\n  JUMP \t\t\t        returns (ui\ntag 80\t\t\t        returns (ui\n  JUMPDEST \t\t\t        returns (ui\n  PUSH [tag] 64\t\t\trom, address to, uint256 value\n  DUP4 \t\t\to, u\n  DUP4 \t\t\tt2\n  DUP4 \t\t\t valu\n  PUSH [tag] 84\t\t\trom, address \n  JUMP \t\t\trom, address to, uint256 value\ntag 78\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 88\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 89\t\t\t\n  PUSH B\t\t\t\n  PUSH [tag] 18446744073709551797\t\t\t\n  PUSH [tag] 90\t\t\t\n  PUSH 20\t\t\t\n  SHL \t\t\t\n  OR \t\t\t\n  PUSH [tag] 91\t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 92\t\t\t\n  JUMP \t\t\t\ntag 91\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 93\t\t\t\n  JUMP \t\t\t\ntag 89\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 88\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 94\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 95\t\t\t\n  PUSH B\t\t\t\n  PUSH [tag] 18446744073709551798\t\t\t\n  PUSH [tag] 96\t\t\t\n  PUSH 20\t\t\t\n  SHL \t\t\t\n  OR \t\t\t\n  PUSH [tag] 91\t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 92\t\t\t\n  JUMP \t\t\t\ntag 95\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 94\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP4 \t\t\t\n  DUP2 \t\t\t\n  AND \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 9\t\t\t\n  PUSH 20\t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  KECCAK256 \t\t\t\n  SLOAD \t\t\t\n  DUP6 \t\t\t\n  DUP5 \t\t\t\n  AND \t\t\t\n  DUP4 \t\t\t\n  MSTORE \t\t\t\n  SWAP2 \t\t\t\n  KECCAK256 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 64\t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  AND \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 102\t\t\t\n  JUMP \t\t\t\ntag 81\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 5\t\t\t\n  SLOAD \t\t\t\n  PUSH FF\t\t\t\n  AND \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 106\t\t\t\n  JUMPI \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH D93C0665\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 4\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  REVERT \t\t\t\ntag 106\t\t\t\n  JUMPDEST \t\t\t\n  JUMP \t\t\t\ntag 84\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 108\t\t\t\n  JUMPI \t\t\t\n  DUP1 \t\t\t\n  PUSH 2\t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 109\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 110\t\t\t\n  JUMP \t\t\t\ntag 109\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  PUSH [tag] 111\t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 108\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  SWAP1 \t\t\t\n  KECCAK256 \t\t\t\n  SLOAD \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 112\t\t\t\n  JUMPI \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 391434E3\t\t\t\n  PUSH E2\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP6 \t\t\t\n  AND \t\t\t\n  PUSH 4\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  DUP3 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 44\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  DUP4 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 64\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 17\t\t\t\n  JUMP \t\t\t\ntag 112\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP5 \t\t\t\n  AND \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  SWAP1 \t\t\t\n  KECCAK256 \t\t\t\n  SWAP1 \t\t\t\n  DUP3 \t\t\t\n  SWAP1 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\ntag 111\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 115\t\t\t\n  JUMPI \t\t\t\n  PUSH 2\t\t\t\n  DUP1 \t\t\t\n  SLOAD \t\t\t\n  DUP3 \t\t\t\n  SWAP1 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\n  PUSH [tag] 116\t\t\t\n  JUMP \t\t\t\ntag 115\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  SWAP1 \t\t\t\n  KECCAK256 \t\t\t\n  DUP1 \t\t\t\n  SLOAD \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\ntag 116\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  DUP4 \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n  DUP4 \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 117\t\t\t\n  SWAP2 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 117\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  LOG3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 90\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 120\t\t\t\n  DUP3 \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 121\t\t\t\n  JUMP \t\t\t\ntag 120\t\t\t\n  JUMPDEST \t\t\t\n  SWAP4 \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 92\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 123\t\t\t\n  JUMPI \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 6DFCC65\t\t\t\n  PUSH E4\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH D0\t\t\t\n  PUSH 4\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  DUP4 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 44\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 17\t\t\t\n  JUMP \t\t\t\ntag 123\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 93\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP1 \t\t\t\n  PUSH [tag] 127\t\t\t\n  PUSH [tag] 128\t\t\t\n  PUSH [tag] 129\t\t\t\n  JUMP \t\t\t\ntag 128\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 130\t\t\t\n  PUSH [tag] 131\t\t\t\n  DUP9 \t\t\t\n  PUSH [tag] 132\t\t\t\n  JUMP \t\t\t\ntag 131\t\t\t\n  JUMPDEST \t\t\t\n  DUP7 \t\t\t\n  DUP9 \t\t\t\n  PUSH 20\t\t\t\n  SHR \t\t\t\n  JUMP \t\t\t\ntag 130\t\t\t\n  JUMPDEST \t\t\t\n  DUP8 \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 133\t\t\t\n  JUMP \t\t\t\ntag 127\t\t\t\n  JUMPDEST \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\ntag 126\t\t\t\n  JUMPDEST \t\t\t\n  SWAP4 \t\t\t\n  POP \t\t\t\n  SWAP4 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 96\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 120\t\t\t\n  DUP3 \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 136\t\t\t\n  JUMP \t\t\t\ntag 102\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  DUP4 \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  EQ \t\t\t\n  ISZERO \t\t\t\n  DUP1 \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 139\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  GT \t\t\t\ntag 139\t\t\t\n  JUMPDEST \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 64\t\t\t\n  JUMPI \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 141\t\t\t\n  JUMPI \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH A\t\t\t\n  PUSH 20\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  DUP3 \t\t\t\n  KECCAK256 \t\t\t\n  DUP3 \t\t\t\n  SWAP2 \t\t\t\n  PUSH [tag] 142\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 96\t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  PUSH [tag] 18446744073709551798\t\t\t\n  OR \t\t\t\n  PUSH [tag] 91\t\t\t\n  DUP7 \t\t\t\n  PUSH [tag] 92\t\t\t\n  JUMP \t\t\t\ntag 142\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  DUP5 \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  PUSH 0\t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  PUSH data F6C9A2FA34B6CB85A7E5838C28EBAA0801A385B177CF814C28625BC2CCD304FA\t\t\t\n  DUP4 \t\t\t\n  CODECOPY \t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  SWAP2 \t\t\t\n  MSTORE \t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 144\t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 144\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  LOG2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 141\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 64\t\t\t\n  JUMPI \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH A\t\t\t\n  PUSH 20\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  DUP3 \t\t\t\n  KECCAK256 \t\t\t\n  DUP3 \t\t\t\n  SWAP2 \t\t\t\n  PUSH [tag] 146\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 90\t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  PUSH [tag] 18446744073709551797\t\t\t\n  OR \t\t\t\n  PUSH [tag] 91\t\t\t\n  DUP7 \t\t\t\n  PUSH [tag] 92\t\t\t\n  JUMP \t\t\t\ntag 146\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  DUP4 \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  PUSH 0\t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  PUSH data F6C9A2FA34B6CB85A7E5838C28EBAA0801A385B177CF814C28625BC2CCD304FA\t\t\t\n  DUP4 \t\t\t\n  CODECOPY \t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  SWAP2 \t\t\t\n  MSTORE \t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 148\t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 148\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  LOG2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 129\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 151\t\t\t\n  PUSH [tag] 152\t\t\t\n  JUMP \t\t\t\ntag 151\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 132\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  SLOAD \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP1 \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 154\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 155\t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 156\t\t\t\n  PUSH 1\t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 157\t\t\t\n  JUMP \t\t\t\ntag 156\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  SWAP2 \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  KECCAK256 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 155\t\t\t\n  JUMPDEST \t\t\t\n  SLOAD \t\t\t\n  PUSH 1000000000000\t\t\t\n  SWAP1 \t\t\t\n  DIV \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  PUSH [tag] 120\t\t\t\n  JUMP \t\t\t\ntag 154\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  SWAP4 \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 133\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP1 \t\t\t\n  PUSH [tag] 127\t\t\t\n  DUP6 \t\t\t\n  DUP6 \t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 162\t\t\t\n  JUMP \t\t\t\ntag 152\t\t\t      _pause();\\n    }\\n\\n    ...\n  JUMPDEST \t\t\t      _pause();\\n    }\\n\\n    ...\n  PUSH 0\t\t\tpublic\n  PUSH [tag] 151\t\t\t  _unpause();\\n    }\\n\\n    fu...\n  NUMBER \t\t\t}\\n\\n    funct\n  PUSH [tag] 165\t\t\t  _unpause();\\n   \n  JUMP \t\t\t  _unpause();\\n    }\\n\\n    fu...\ntag 162\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  SLOAD \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  DUP1 \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 168\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 169\t\t\t\n  DUP8 \t\t\t\n  PUSH [tag] 156\t\t\t\n  PUSH 1\t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 157\t\t\t\n  JUMP \t\t\t\ntag 169\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 40\t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  MSTORE \t\t\t\n  SWAP1 \t\t\t\n  SLOAD \t\t\t\n  PUSH FFFFFFFFFFFF\t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  DUP1 \t\t\t\n  DUP5 \t\t\t\n  MSTORE \t\t\t\n  PUSH 1000000000000\t\t\t\n  SWAP1 \t\t\t\n  SWAP3 \t\t\t\n  DIV \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  AND \t\t\t\n  PUSH 20\t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  SWAP2 \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  SWAP1 \t\t\t\n  DUP8 \t\t\t\n  AND \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 171\t\t\t\n  JUMPI \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 2520601D\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 4\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  REVERT \t\t\t\ntag 171\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  PUSH FFFFFFFFFFFF\t\t\t\n  DUP1 \t\t\t\n  DUP9 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  AND \t\t\t\n  SUB \t\t\t\n  PUSH [tag] 172\t\t\t\n  JUMPI \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 173\t\t\t\n  DUP9 \t\t\t\n  PUSH [tag] 156\t\t\t\n  PUSH 1\t\t\t\n  DUP7 \t\t\t\n  PUSH [tag] 157\t\t\t\n  JUMP \t\t\t\ntag 173\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  SLOAD \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  SWAP3 \t\t\t\n  SWAP1 \t\t\t\n  SWAP3 \t\t\t\n  AND \t\t\t\n  PUSH 1000000000000\t\t\t\n  MUL \t\t\t\n  PUSH FFFFFFFFFFFF\t\t\t\n  SWAP1 \t\t\t\n  SWAP3 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  OR \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\n  PUSH [tag] 175\t\t\t\n  JUMP \t\t\t\ntag 172\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 40\t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH FFFFFFFFFFFF\t\t\t\n  DUP1 \t\t\t\n  DUP9 \t\t\t\n  AND \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP1 \t\t\t\n  DUP9 \t\t\t\n  AND \t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  DUP12 \t\t\t\n  SLOAD \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  DUP14 \t\t\t\n  SSTORE \t\t\t\n  PUSH 0\t\t\t\n  DUP14 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  KECCAK256 \t\t\t\n  SWAP5 \t\t\t\n  MLOAD \t\t\t\n  SWAP2 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  SWAP3 \t\t\t\n  AND \t\t\t\n  PUSH 1000000000000\t\t\t\n  MUL \t\t\t\n  SWAP3 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  OR \t\t\t\n  SWAP2 \t\t\t\n  ADD \t\t\t\n  SSTORE \t\t\t\ntag 175\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  DUP4 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 126\t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 168\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH 40\t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH FFFFFFFFFFFF\t\t\t\n  DUP1 \t\t\t\n  DUP6 \t\t\t\n  AND \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP1 \t\t\t\n  DUP6 \t\t\t\n  AND \t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  DUP9 \t\t\t\n  SLOAD \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  DUP11 \t\t\t\n  SSTORE \t\t\t\n  PUSH 0\t\t\t\n  DUP11 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  SWAP2 \t\t\t\n  DUP3 \t\t\t\n  KECCAK256 \t\t\t\n  SWAP6 \t\t\t\n  MLOAD \t\t\t\n  SWAP3 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  SWAP4 \t\t\t\n  AND \t\t\t\n  PUSH 1000000000000\t\t\t\n  MUL \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP4 \t\t\t\n  AND \t\t\t\n  OR \t\t\t\n  SWAP3 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  SSTORE \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 126\t\t\t\n  JUMP \t\t\t\ntag 165\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH FFFFFFFFFFFF\t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 123\t\t\t\n  JUMPI \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 6DFCC65\t\t\t\n  PUSH E4\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 30\t\t\t\n  PUSH 4\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  DUP4 \t\t\t\n  SWAP1 \t\t\t\n  MSTORE \t\t\t\n  PUSH 44\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 17\t\t\t\n  JUMP \t\t\t\ntag 3\t\t\te-Identifier: MIT\\npragma soli...\n  JUMPDEST \t\t\te-Identifier: MIT\\npragma soli...\n  PUSH 0\t\t\tracts@\n  PUSH 20\t\t\tel\n  DUP3 \t\t\tt \"@openz\n  DUP5 \t\t\tl\";\\nimp\n  SUB \t\t\t0.sol\";\\nimport \"@openze\n  SLT \t\t\tERC20.sol\";\\nimport \"@openzepp...\n  ISZERO \t\t\t20/ERC20.sol\";\\nimport \"@openz...\n  PUSH [tag] 193\t\t\t20/ERC20.sol\";\\nimport \"@openz...\n  JUMPI \t\t\t20/ERC20.sol\";\\nimport \"@openz...\n  PUSH 0\t\t\t.\n  DUP1 \t\t\ts\n  REVERT \t\t\tontracts@5.0\ntag 193\t\t\t20/ERC20.sol\";\\nimport \"@openz...\n  JUMPDEST \t\t\t20/ERC20.sol\";\\nimport \"@openz...\n  DUP2 \t\t\ts/ERC20Burnable.\n  MLOAD \t\t\ts/ERC20Burnable.\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\tontracts@5.0.0/token/ERC20/ext...\n  AND \t\t\tontracts@5.0.0/token/ERC20/ext...\n  DUP2 \t\t\tzeppelin/contracts@5.0.0/token...\n  EQ \t\t\tzeppelin/contracts@5.0.0/token...\n  PUSH [tag] 120\t\t\tort \"@openzeppelin/contracts@5...\n  JUMPI \t\t\tort \"@openzeppelin/contracts@5...\n  PUSH 0\t\t\ts\n  DUP1 \t\t\tP\n  REVERT \t\t\ts/ERC20Pausa\ntag 183\t\t\tacts@5.0.0/access/Ownable.sol\"...\n  JUMPDEST \t\t\tacts@5.0.0/access/Ownable.sol\"...\n  PUSH 4E487B71\t\t\tts@5.0.0/t\n  PUSH E0\t\t\tntr\n  SHL \t\t\tn/contracts@5.0.0/to\n  PUSH 0\t\t\te\n  MSTORE \t\t\tpenzeppelin/contracts@5.0.0/to...\n  PUSH 41\t\t\t/ERC\n  PUSH 4\t\t\to\n  MSTORE \t\t\textensions/ERC2\n  PUSH 24\t\t\tt \"@\n  PUSH 0\t\t\tp\n  REVERT \t\t\tol\";\\nimport \"@o\ntag 184\t\t\t/contracts@5.0.0/token/ERC20/e...\n  JUMPDEST \t\t\t/contracts@5.0.0/token/ERC20/e...\n  PUSH 1\t\t\tc\n  DUP2 \t\t\tlin/contract\n  DUP2 \t\t\tlin/contract\n  SHR \t\t\tlin/contract\n  SWAP1 \t\t\tlin/contract\n  DUP3 \t\t\t0FlashMint.s\n  AND \t\t\t0FlashMint.s\n  DUP1 \t\t\t0FlashMint.s\n  PUSH [tag] 197\t\t\ttract SumaSamms is ERC20, ERC2...\n  JUMPI \t\t\ttract SumaSamms is ERC20, ERC2...\n  PUSH 7F\t\t\t, Ow\n  DUP3 \t\t\tPausab\n  AND \t\t\tRC20Pausable, Own\n  SWAP2 \t\t\turnable, ERC20Pausable, Own\n  POP \t\t\turnable, ERC20Pausable, Own\ntag 197\t\t\ttract SumaSamms is ERC20, ERC2...\n  JUMPDEST \t\t\ttract SumaSamms is ERC20, ERC2...\n  PUSH 20\t\t\t  \n  DUP3 \t\t\thMint \n  LT \t\t\tlashMint {\\n   \n  DUP2 \t\t\t, ERC20Votes, ERC2\n  SUB \t\t\tmit, ERC20Votes, ERC20FlashMin...\n  PUSH [tag] 198\t\t\tPermit, ERC20Votes, ERC20Flash...\n  JUMPI \t\t\tPermit, ERC20Votes, ERC20Flash...\n  PUSH 4E487B71\t\t\tERC20(\"Sum\n  PUSH E0\t\t\t   \n  SHL \t\t\t\\n        ERC20(\"Suma\n  PUSH 0\t\t\te\n  MSTORE \t\t\ttialOwner)\\n        ERC20(\"Sum...\n  PUSH 22\t\t\tOwna\n  PUSH 4\t\t\t \n  MSTORE \t\t\t)\\n        Ownab\n  PUSH 24\t\t\t  ER\n  PUSH 0\t\t\t \n  REVERT \t\t\ter)\\n        ERC\ntag 198\t\t\tPermit, ERC20Votes, ERC20Flash...\n  JUMPDEST \t\t\tPermit, ERC20Votes, ERC20Flash...\n  POP \t\t\tPermit, ERC20Votes, ERC20Flash...\n  SWAP2 \t\t\t/contracts@5.0.0/token/ERC20/e...\n  SWAP1 \t\t\t/contracts@5.0.0/token/ERC20/e...\n  POP \t\t\t/contracts@5.0.0/token/ERC20/e...\n  JUMP \t\t\t/contracts@5.0.0/token/ERC20/e...\ntag 186\t\t\t\\n\\n    function unpause() pub...\n  JUMPDEST \t\t\t\\n\\n    function unpause() pub...\n  PUSH 1F\t\t\tin\n  DUP3 \t\t\tto,\n  GT \t\t\tss to, uint\n  ISZERO \t\t\tdress to, uint256 amount) publ...\n  PUSH [tag] 64\t\t\tdress to, uint256 amount) publ...\n  JUMPI \t\t\tdress to, uint256 amount) publ...\n  DUP1 \t\t\t     \n  PUSH 0\t\t\t\\n\n  MSTORE \t\t\tOwner {\\n        \n  PUSH 20\t\t\tollo\n  PUSH 0\t\t\te\n  KECCAK256 \t\t\t\\n    // The follow\n  PUSH 1F\t\t\tup\n  DUP5 \t\t\t  function\n  ADD \t\t\t\\n\\n    function _upd\n  PUSH 5\t\t\tt\n  SHR \t\t\tlidity.\\n\\n    function _upda\n  DUP2 \t\t\t by \n  ADD \t\t\tired by Solidity.\\n\\n    funct...\n  PUSH 20\t\t\tt256\n  DUP6 \t\t\tress to, u\n  LT \t\t\taddress to, uint256 \n  ISZERO \t\t\tm, address to, uint256 value)\\...\n  PUSH [tag] 202\t\t\tm, address to, uint256 value)\\...\n  JUMPI \t\t\tm, address to, uint256 value)\\...\n  POP \t\t\t\n  DUP1 \t\t\terna\ntag 202\t\t\tm, address to, uint256 value)\\...\n  JUMPDEST \t\t\tm, address to, uint256 value)\\...\n  PUSH 1F\t\t\t)\\n\n  DUP5 \t\t\tVot\n  ADD \t\t\tRC20Votes)\\n \n  PUSH 5\t\t\t,\n  SHR \t\t\table, ERC20Votes)\\n  \n  DUP3 \t\t\t20Pa\n  ADD \t\t\t ERC20Pausable, ERC20Votes)\\n ...\n  SWAP2 \t\t\tide(ERC20, ERC20Pausable, ERC2...\n  POP \t\t\tide(ERC20, ERC20Pausable, ERC2...\ntag 203\t\t\t    function nonces(address ow...\n  JUMPDEST \t\t\t    function nonces(address ow...\n  DUP2 \t\t\ts(\n  DUP2 \t\t\tn non\n  LT \t\t\ttion nonces(a\n  ISZERO \t\t\t    function nonces(address ow...\n  PUSH [tag] 205\t\t\t    function nonces(address ow...\n  JUMPI \t\t\t    function nonces(address ow...\n  PUSH 0\t\t\td\n  DUP2 \t\t\t        override\n  SSTORE \t\t\t        override\n  PUSH 1\t\t\tu\n  ADD \t\t\t)\\n        pub\n  PUSH [tag] 203\t\t\t    function nonces(address ow...\n  JUMP \t\t\t    function nonces(address ow...\ntag 205\t\t\t    function nonces(address ow...\n  JUMPDEST \t\t\t    function nonces(address ow...\n  POP \t\t\tfun\n  POP \t\t\tfun\n  POP \t\t\t\\n\\n    function unpause() pub...\n  POP \t\t\t\\n\\n    function unpause() pub...\n  POP \t\t\t\\n\\n    function unpause() pub...\n  JUMP \t\t\t\\n\\n    function unpause() pub...\ntag 12\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH 40\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 209\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 209\t\t\t\n  PUSH [tag] 183\t\t\t\n  JUMP \t\t\t\ntag 209\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 210\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 211\t\t\t\n  DUP5 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 184\t\t\t\n  JUMP \t\t\t\ntag 211\t\t\t\n  JUMPDEST \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 186\t\t\t\n  JUMP \t\t\t\ntag 210\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  GT \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 213\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  DUP5 \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 214\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  DUP6 \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\ntag 214\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  PUSH 3\t\t\t\n  DUP7 \t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  SHR \t\t\t\n  NOT \t\t\t\n  AND \t\t\t\n  PUSH 1\t\t\t\n  DUP6 \t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  OR \t\t\t\n  DUP6 \t\t\t\n  SSTORE \t\t\t\n  PUSH [tag] 212\t\t\t\n  JUMP \t\t\t\ntag 213\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\to\n  DUP6 \t\t\t function paus\n  DUP2 \t\t\t function paus\n  MSTORE \t\t\t function paus\n  PUSH 20\t\t\t _pa\n  DUP2 \t\t\tner {\\n        _pau\n  KECCAK256 \t\t\tner {\\n        _pau\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  DUP7 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\ntag 217\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 219\t\t\t\n  JUMPI \t\t\t\n  DUP9 \t\t\t\n  DUP7 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  DUP3 \t\t\t\n  SSTORE \t\t\t\n  SWAP5 \t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  SWAP5 \t\t\t\n  PUSH 1\t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  PUSH [tag] 217\t\t\t\n  JUMP \t\t\t\ntag 219\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  DUP6 \t\t\t\n  DUP3 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 220\t\t\t\n  JUMPI \t\t\t\n  DUP8 \t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  PUSH 3\t\t\t\n  DUP9 \t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  PUSH F8\t\t\t\n  AND \t\t\t\n  SHR \t\t\t\n  NOT \t\t\t\n  AND \t\t\t\n  DUP2 \t\t\t\n  SSTORE \t\t\t\ntag 220\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  DUP5 \t\t\t\n  PUSH 1\t\t\t\n  SHL \t\t\t\n  ADD \t\t\t\n  DUP6 \t\t\t\n  SSTORE \t\t\t\ntag 212\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 188\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 4E487B71\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  PUSH 0\t\t\t\n  MSTORE \t\t\t\n  PUSH 11\t\t\t\n  PUSH 4\t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  PUSH 0\t\t\t\n  REVERT \t\t\t\ntag 189\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\ntag 224\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  DUP6 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 226\t\t\t\n  JUMPI \t\t\t\n  DUP2 \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  DIV \t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 228\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 228\t\t\t\n  PUSH [tag] 188\t\t\t\n  JUMP \t\t\t\ntag 228\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  DUP6 \t\t\t\n  AND \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 229\t\t\t\n  JUMPI \t\t\t\n  SWAP2 \t\t\t\n  DUP2 \t\t\t\n  MUL \t\t\t\n  SWAP2 \t\t\t\ntag 229\t\t\t\n  JUMPDEST \t\t\t\n  SWAP4 \t\t\t\n  DUP5 \t\t\t\n  SHR \t\t\t\n  SWAP4 \t\t\t\n  SWAP1 \t\t\t\n  DUP1 \t\t\t\n  MUL \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 224\t\t\t\n  JUMP \t\t\t\ntag 226\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 190\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 231\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  PUSH [tag] 43\t\t\t\n  JUMP \t\t\t\ntag 231\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 232\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 43\t\t\t\n  JUMP \t\t\t\ntag 232\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 234\t\t\t\n  JUMPI \t\t\t\n  PUSH 2\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 235\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 233\t\t\t\n  JUMP \t\t\t\ntag 234\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH [tag] 43\t\t\t\n  JUMP \t\t\t\ntag 235\t\t\t\n  JUMPDEST \t\t\t\n  PUSH FF\t\t\t\n  DUP5 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 237\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 237\t\t\t\n  PUSH [tag] 188\t\t\t\n  JUMP \t\t\t\ntag 237\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  DUP3 \t\t\t\n  SHL \t\t\t\n  PUSH [tag] 43\t\t\t\n  JUMP \t\t\t\ntag 233\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP4 \t\t\t\n  LT \t\t\t\n  PUSH 133\t\t\t\n  DUP4 \t\t\t\n  LT \t\t\t\n  AND \t\t\t\n  PUSH 4E\t\t\t\n  DUP5 \t\t\t\n  LT \t\t\t\n  PUSH B\t\t\t\n  DUP5 \t\t\t\n  LT \t\t\t\n  AND \t\t\t\n  OR \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 238\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  EXP \t\t\t\n  PUSH [tag] 43\t\t\t\n  JUMP \t\t\t\ntag 238\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 239\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 189\t\t\t\n  JUMP \t\t\t\ntag 239\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  DIV \t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 241\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 241\t\t\t\n  PUSH [tag] 188\t\t\t\n  JUMP \t\t\t\ntag 241\t\t\t\n  JUMPDEST \t\t\t\n  MUL \t\t\t\n  SWAP4 \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 33\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 120\t\t\t\n  PUSH FF\t\t\t\n  DUP5 \t\t\t\n  AND \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 190\t\t\t\n  JUMP \t\t\t\ntag 35\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  MUL \t\t\t\n  DUP2 \t\t\t\n  ISZERO \t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  DIV \t\t\t\n  DUP5 \t\t\t\n  EQ \t\t\t\n  OR \t\t\t\n  PUSH [tag] 43\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 43\t\t\t\n  PUSH [tag] 188\t\t\t\n  JUMP \t\t\t\ntag 59\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  DUP4 \t\t\t\n  MSTORE \t\t\t\n  DUP4 \t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 20\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 0\t\t\t\ntag 249\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 251\t\t\t\n  JUMPI \t\t\t\n  DUP6 \t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  DUP6 \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  PUSH [tag] 249\t\t\t\n  JUMP \t\t\t\ntag 251\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH 0\t\t\t\n  PUSH 40\t\t\t\n  DUP3 \t\t\t\n  DUP7 \t\t\t\n  ADD \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 40\t\t\t\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  AND \t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  ADD \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 61\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  MLOAD \t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 198\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  PUSH 20\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  PUSH 3\t\t\t\n  SHL \t\t\t\n  SHL \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 110\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 43\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 43\t\t\t\n  PUSH [tag] 188\t\t\t\n  JUMP \t\t\t\ntag 121\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  AND \t\t\t\n  DUP4 \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 262\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 262\t\t\t\n  PUSH [tag] 188\t\t\t\n  JUMP \t\t\t\ntag 262\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 136\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH D0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  AND \t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 262\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 262\t\t\t\n  PUSH [tag] 188\t\t\t\n  JUMP \t\t\t\ntag 157\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 43\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 43\t\t\t\n  PUSH [tag] 188\t\t\t\n  JUMP \t\t\t\ntag 191\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 80\t\t\tcontract SumaSamms is ERC20, E...\n  MLOAD \t\t\tcontract SumaSamms is ERC20, E...\n  PUSH A0\t\t\tcontract SumaSamms is ERC20, E...\n  MLOAD \t\t\tcontract SumaSamms is ERC20, E...\n  PUSH C0\t\t\tcontract SumaSamms is ERC20, E...\n  MLOAD \t\t\tcontract SumaSamms is ERC20, E...\n  PUSH E0\t\t\tcontract SumaSamms is ERC20, E...\n  MLOAD \t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 100\t\t\tcontract SumaSamms is ERC20, E...\n  MLOAD \t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 120\t\t\tcontract SumaSamms is ERC20, E...\n  MLOAD \t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 140\t\t\tcontract SumaSamms is ERC20, E...\n  MLOAD \t\t\tcontract SumaSamms is ERC20, E...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract SumaSamms is ERC20, E...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n  CODECOPY \t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n  ASSIGNIMMUTABLE 3461\t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n  ASSIGNIMMUTABLE 3458\t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n  ASSIGNIMMUTABLE 3455\t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n  ASSIGNIMMUTABLE 3453\t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n  ASSIGNIMMUTABLE 3451\t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n  ASSIGNIMMUTABLE 3449\t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n  ASSIGNIMMUTABLE 3447\t\t\tcontract SumaSamms is ERC20, E...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract SumaSamms is ERC20, E...\n  PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n  RETURN \t\t\tcontract SumaSamms is ERC20, E...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 40\t\t\tcontract SumaSamms is ERC20, E...\n      MSTORE \t\t\tcontract SumaSamms is ERC20, E...\n      CALLVALUE \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      ISZERO \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 1\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      REVERT \t\t\tcontract SumaSamms is ERC20, E...\n    tag 1\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPDEST \t\t\tcontract SumaSamms is ERC20, E...\n      POP \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 4\t\t\tcontract SumaSamms is ERC20, E...\n      CALLDATASIZE \t\t\tcontract SumaSamms is ERC20, E...\n      LT \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 2\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n      CALLDATALOAD \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH E0\t\t\tcontract SumaSamms is ERC20, E...\n      SHR \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 70A08231\t\t\tcontract SumaSamms is ERC20, E...\n      GT \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 38\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 95D89B41\t\t\tcontract SumaSamms is ERC20, E...\n      GT \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 39\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH D505ACCF\t\t\tcontract SumaSamms is ERC20, E...\n      GT \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 40\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH D505ACCF\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 33\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH D9D98CE4\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 34\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH DD62ED3E\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 35\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH F1127ED8\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 36\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH F2FDE38B\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 37\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      REVERT \t\t\tcontract SumaSamms is ERC20, E...\n    tag 40\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPDEST \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 95D89B41\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 29\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 9AB24EB0\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 30\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH A9059CBB\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 31\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH C3CDA520\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 32\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      REVERT \t\t\tcontract SumaSamms is ERC20, E...\n    tag 39\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPDEST \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 8456CB59\t\t\tcontract SumaSamms is ERC20, E...\n      GT \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 41\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 8456CB59\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 24\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 84B0196E\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 25\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 8DA5CB5B\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 26\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 8E539E8C\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 27\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 91DDADF4\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 28\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      REVERT \t\t\tcontract SumaSamms is ERC20, E...\n    tag 41\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPDEST \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 70A08231\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 20\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 715018A6\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 21\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 79CC6790\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 22\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 7ECEBE00\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 23\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      REVERT \t\t\tcontract SumaSamms is ERC20, E...\n    tag 38\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPDEST \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 40C10F19\t\t\tcontract SumaSamms is ERC20, E...\n      GT \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 42\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 5C19A95C\t\t\tcontract SumaSamms is ERC20, E...\n      GT \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 43\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 5C19A95C\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 15\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 5C975ABB\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 16\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 5CFFE9DE\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 17\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 613255AB\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 18\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 6FCFFF45\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 19\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      REVERT \t\t\tcontract SumaSamms is ERC20, E...\n    tag 43\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPDEST \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 40C10F19\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 11\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 42966C68\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 12\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 4BF5D7E9\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 13\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 587CDE1E\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 14\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      REVERT \t\t\tcontract SumaSamms is ERC20, E...\n    tag 42\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPDEST \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 313CE567\t\t\tcontract SumaSamms is ERC20, E...\n      GT \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 44\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 313CE567\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 7\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 3644E515\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 8\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 3A46B1A8\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 9\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 3F4BA83A\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 10\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      REVERT \t\t\tcontract SumaSamms is ERC20, E...\n    tag 44\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPDEST \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 6FDDE03\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 3\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 95EA7B3\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 4\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 18160DDD\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 5\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 23B872DD\t\t\tcontract SumaSamms is ERC20, E...\n      EQ \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH [tag] 6\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPI \t\t\tcontract SumaSamms is ERC20, E...\n    tag 2\t\t\tcontract SumaSamms is ERC20, E...\n      JUMPDEST \t\t\tcontract SumaSamms is ERC20, E...\n      PUSH 0\t\t\tcontract SumaSamms is ERC20, E...\n      DUP1 \t\t\tcontract SumaSamms is ERC20, E...\n      REVERT \t\t\tcontract SumaSamms is ERC20, E...\n    tag 3\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 45\t\t\t\n      PUSH [tag] 46\t\t\t\n      JUMP \t\t\t\n    tag 45\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 47\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 48\t\t\t\n      JUMP \t\t\t\n    tag 47\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 4\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 49\t\t\t\n      PUSH [tag] 50\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 51\t\t\t\n      JUMP \t\t\t\n    tag 50\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 52\t\t\t\n      JUMP \t\t\t\n    tag 49\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\tC20, ERC20Paus\n      ISZERO \t\t\tC20, ERC20Paus\n      ISZERO \t\t\tride(ERC20, ERC20Pausa\n      DUP2 \t\t\ternal\\n        override(ERC20,...\n      MSTORE \t\t\ternal\\n        override(ERC20,...\n      PUSH 20\t\t\t\\n \n      ADD \t\t\t uint256 value)\\n  \n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t   // The following functions ...\n    tag 5\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\t\n      SLOAD \t\t\t\n    tag 55\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\tmit, Nonces)\\n        retu\n      DUP2 \t\t\tmit, Nonces)\\n        retu\n      MSTORE \t\t\tmit, Nonces)\\n        retu\n      PUSH 20\t\t\tid\n      ADD \t\t\tw\\n        override\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\ttes)\\n    {\\n        super._up...\n    tag 6\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 49\t\t\t\n      PUSH [tag] 60\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 61\t\t\t\n      JUMP \t\t\t\n    tag 60\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 62\t\t\t\n      JUMP \t\t\t\n    tag 7\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 12\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t\n    tag 8\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 55\t\t\t\n      PUSH [tag] 69\t\t\t\n      JUMP \t\t\t\n    tag 9\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 55\t\t\t\n      PUSH [tag] 73\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 51\t\t\t\n      JUMP \t\t\t\n    tag 73\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 74\t\t\t\n      JUMP \t\t\t\n    tag 10\t\t\tfunction unpause() public only...\n      JUMPDEST \t\t\tfunction unpause() public only...\n      PUSH [tag] 76\t\t\tfunction unpause() public only...\n      PUSH [tag] 77\t\t\tfunction unpause() public only...\n      JUMP \t\t\tfunction unpause() public only...\n    tag 76\t\t\tfunction unpause() public only...\n      JUMPDEST \t\t\tfunction unpause() public only...\n      STOP \t\t\tfunction unpause() public only...\n    tag 11\t\t\tfunction mint(address to, uint...\n      JUMPDEST \t\t\tfunction mint(address to, uint...\n      PUSH [tag] 76\t\t\tfunction mint(address to, uint...\n      PUSH [tag] 79\t\t\tfunction mint(address to, uint...\n      CALLDATASIZE \t\t\tfunction mint(address to, uint...\n      PUSH 4\t\t\tfunction mint(address to, uint...\n      PUSH [tag] 51\t\t\tfunction mint(address to, uint...\n      JUMP \t\t\tfunction mint(address to, uint...\n    tag 79\t\t\tfunction mint(address to, uint...\n      JUMPDEST \t\t\tfunction mint(address to, uint...\n      PUSH [tag] 80\t\t\tfunction mint(address to, uint...\n      JUMP \t\t\tfunction mint(address to, uint...\n    tag 12\t\t\tnable, ERC20Pausable, Ownable,...\n      JUMPDEST \t\t\tnable, ERC20Pausable, Ownable,...\n      PUSH [tag] 76\t\t\tnable, ERC20Pausable, Ownable,...\n      PUSH [tag] 82\t\t\tnable, ERC20Pausable, Ownable,...\n      CALLDATASIZE \t\t\tnable, ERC20Pausable, Ownable,...\n      PUSH 4\t\t\tnable, ERC20Pausable, Ownable,...\n      PUSH [tag] 83\t\t\tnable, ERC20Pausable, Ownable,...\n      JUMP \t\t\tnable, ERC20Pausable, Ownable,...\n    tag 82\t\t\tnable, ERC20Pausable, Ownable,...\n      JUMPDEST \t\t\tnable, ERC20Pausable, Ownable,...\n      PUSH [tag] 84\t\t\tnable, ERC20Pausable, Ownable,...\n      JUMP \t\t\tnable, ERC20Pausable, Ownable,...\n    tag 13\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 45\t\t\t\n      PUSH [tag] 86\t\t\t\n      JUMP \t\t\t\n    tag 14\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 88\t\t\t\n      PUSH [tag] 89\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 90\t\t\t\n      JUMP \t\t\t\n    tag 89\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 9\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 88\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t\n    tag 15\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 76\t\t\t\n      PUSH [tag] 95\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 90\t\t\t\n      JUMP \t\t\t\n    tag 95\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 96\t\t\t\n      JUMP \t\t\t\n    tag 16\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5\t\t\t\n      SLOAD \t\t\t\n      PUSH FF\t\t\t\n      AND \t\t\t\n      PUSH [tag] 49\t\t\t\n      JUMP \t\t\t\n    tag 17\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 49\t\t\t\n      PUSH [tag] 101\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 102\t\t\t\n      JUMP \t\t\t\n    tag 101\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 103\t\t\t\n      JUMP \t\t\t\n    tag 18\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 55\t\t\t\n      PUSH [tag] 106\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 90\t\t\t\n      JUMP \t\t\t\n    tag 106\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 107\t\t\t\n      JUMP \t\t\t\n    tag 19\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 109\t\t\t\n      PUSH [tag] 110\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 90\t\t\t\n      JUMP \t\t\t\n    tag 110\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 111\t\t\t\n      JUMP \t\t\t\n    tag 109\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH FFFFFFFF\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t\n    tag 20\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 55\t\t\t\n      PUSH [tag] 115\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 90\t\t\t\n      JUMP \t\t\t\n    tag 115\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 21\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 76\t\t\t\n      PUSH [tag] 119\t\t\t\n      JUMP \t\t\t\n    tag 22\t\t\t\\n\\n    function mint(address ...\n      JUMPDEST \t\t\t\\n\\n    function mint(address ...\n      PUSH [tag] 76\t\t\t\\n\\n    function mint(address ...\n      PUSH [tag] 121\t\t\t\\n\\n    function mint(address ...\n      CALLDATASIZE \t\t\t\\n\\n    function mint(address ...\n      PUSH 4\t\t\t\\n\\n    function mint(address ...\n      PUSH [tag] 51\t\t\t\\n\\n    function mint(address ...\n      JUMP \t\t\t\\n\\n    function mint(address ...\n    tag 121\t\t\t\\n\\n    function mint(address ...\n      JUMPDEST \t\t\t\\n\\n    function mint(address ...\n      PUSH [tag] 122\t\t\t\\n\\n    function mint(address ...\n      JUMP \t\t\t\\n\\n    function mint(address ...\n    tag 23\t\t\tfunction nonces(address owner)...\n      JUMPDEST \t\t\tfunction nonces(address owner)...\n      PUSH [tag] 55\t\t\tfunction nonces(address owner)...\n      PUSH [tag] 124\t\t\tfunction nonces(address owner)...\n      CALLDATASIZE \t\t\tfunction nonces(address owner)...\n      PUSH 4\t\t\tfunction nonces(address owner)...\n      PUSH [tag] 90\t\t\tfunction nonces(address owner)...\n      JUMP \t\t\tfunction nonces(address owner)...\n    tag 124\t\t\tfunction nonces(address owner)...\n      JUMPDEST \t\t\tfunction nonces(address owner)...\n      PUSH [tag] 125\t\t\tfunction nonces(address owner)...\n      JUMP \t\t\tfunction nonces(address owner)...\n    tag 24\t\t\tfunction pause() public onlyOw...\n      JUMPDEST \t\t\tfunction pause() public onlyOw...\n      PUSH [tag] 76\t\t\tfunction pause() public onlyOw...\n      PUSH [tag] 128\t\t\tfunction pause() public onlyOw...\n      JUMP \t\t\tfunction pause() public onlyOw...\n    tag 25\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 129\t\t\t\n      PUSH [tag] 130\t\t\t\n      JUMP \t\t\t\n    tag 129\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 47\t\t\t\n      SWAP8 \t\t\t\n      SWAP7 \t\t\t\n      SWAP6 \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 132\t\t\t\n      JUMP \t\t\t\n    tag 26\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5\t\t\t\n      SLOAD \t\t\t\n      PUSH 100\t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH [tag] 88\t\t\t\n      JUMP \t\t\t\n    tag 27\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 55\t\t\t\n      PUSH [tag] 137\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 83\t\t\t\n      JUMP \t\t\t\n    tag 137\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 138\t\t\t\n      JUMP \t\t\t\n    tag 28\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 140\t\t\t\n      PUSH [tag] 141\t\t\t\n      JUMP \t\t\t\n    tag 140\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t\n    tag 29\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 45\t\t\t\n      PUSH [tag] 145\t\t\t\n      JUMP \t\t\t\n    tag 30\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 55\t\t\t\n      PUSH [tag] 148\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 90\t\t\t\n      JUMP \t\t\t\n    tag 148\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 149\t\t\t\n      JUMP \t\t\t\n    tag 31\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 49\t\t\t\n      PUSH [tag] 152\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 51\t\t\t\n      JUMP \t\t\t\n    tag 152\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 153\t\t\t\n      JUMP \t\t\t\n    tag 32\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 76\t\t\t\n      PUSH [tag] 156\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 156\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP \t\t\t\n    tag 33\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 76\t\t\t\n      PUSH [tag] 160\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 161\t\t\t\n      JUMP \t\t\t\n    tag 160\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 162\t\t\t\n      JUMP \t\t\t\n    tag 34\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 55\t\t\t\n      PUSH [tag] 164\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 51\t\t\t\n      JUMP \t\t\t\n    tag 164\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 165\t\t\t\n      JUMP \t\t\t\n    tag 35\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 55\t\t\t\n      PUSH [tag] 168\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 169\t\t\t\n      JUMP \t\t\t\n    tag 168\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP4 \t\t\t\n      SWAP1 \t\t\t\n      SWAP5 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 36\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 172\t\t\t\n      PUSH [tag] 173\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 174\t\t\t\n      JUMP \t\t\t\n    tag 173\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 175\t\t\t\n      JUMP \t\t\t\n    tag 172\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP3 \t\t\t\n      MLOAD \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      SWAP3 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP3 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t\n    tag 37\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 76\t\t\t\n      PUSH [tag] 179\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 90\t\t\t\n      JUMP \t\t\t\n    tag 179\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 180\t\t\t\n      JUMP \t\t\t\n    tag 46\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 3\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 184\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 185\t\t\t\n      JUMP \t\t\t\n    tag 184\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 186\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 185\t\t\t\n      JUMP \t\t\t\n    tag 186\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 187\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 188\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 187\t\t\t\n      JUMP \t\t\t\n    tag 188\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 189\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 189\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 187\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 52\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\t  ERC20(\"S\n      PUSH [tag] 193\t\t\t\n      DUP2 \t\t\t  ERC20(\"S\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 194\t\t\t\n      JUMP \t\t\t\n    tag 193\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 190\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 62\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\t  ERC20(\"S\n      PUSH [tag] 198\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t  ERC20(\"S\n      DUP6 \t\t\t\n      PUSH [tag] 199\t\t\t\n      JUMP \t\t\t\n    tag 198\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 200\t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 201\t\t\t\n      JUMP \t\t\t\n    tag 200\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 69\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 204\t\t\t\n      PUSH [tag] 205\t\t\t\n      JUMP \t\t\t\n    tag 204\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 74\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 207\t\t\t\n      PUSH [tag] 141\t\t\t\n      JUMP \t\t\t\n    tag 207\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 208\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 7669FC0F\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 24\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n    tag 209\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 208\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 211\t\t\t\n      PUSH [tag] 212\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 213\t\t\t\n      JUMP \t\t\t\n    tag 212\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH A\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 214\t\t\t\n      JUMP \t\t\t\n    tag 211\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 77\t\t\tfunction unpause() public only...\n      JUMPDEST \t\t\tfunction unpause() public only...\n      PUSH [tag] 216\t\t\tes(owner);\\n  \n      PUSH [tag] 217\t\t\tes(owner);\\n\n      JUMP \t\t\tes(owner);\\n  \n    tag 216\t\t\tes(owner);\\n  \n      JUMPDEST \t\t\tes(owner);\\n  \n      PUSH [tag] 219\t\t\t_unpause()\n      PUSH [tag] 220\t\t\t_unpause\n      JUMP \t\t\t_unpause()\n    tag 219\t\t\t_unpause()\n      JUMPDEST \t\t\t_unpause()\n      JUMP \t\t\tfunction unpause() public only...\n    tag 80\t\t\tfunction mint(address to, uint...\n      JUMPDEST \t\t\tfunction mint(address to, uint...\n      PUSH [tag] 222\t\t\tes(owner);\\n  \n      PUSH [tag] 217\t\t\tes(owner);\\n\n      JUMP \t\t\tes(owner);\\n  \n    tag 222\t\t\tes(owner);\\n  \n      JUMPDEST \t\t\tes(owner);\\n  \n      PUSH [tag] 224\t\t\t_mint(to, amount)\n      DUP3 \t\t\tto\n      DUP3 \t\t\tamount\n      PUSH [tag] 225\t\t\t_mint\n      JUMP \t\t\t_mint(to, amount)\n    tag 224\t\t\t_mint(to, amount)\n      JUMPDEST \t\t\t_mint(to, amount)\n      POP \t\t\tfunction mint(address to, uint...\n      POP \t\t\tfunction mint(address to, uint...\n      JUMP \t\t\tfunction mint(address to, uint...\n    tag 84\t\t\tnable, ERC20Pausable, Ownable,...\n      JUMPDEST \t\t\tnable, ERC20Pausable, Ownable,...\n      PUSH [tag] 227\t\t\t, ERC20FlashMint {\\n    con\n      CALLER \t\t\t  ERC20(\"S\n      DUP3 \t\t\t   co\n      PUSH [tag] 229\t\t\t, ERC\n      JUMP \t\t\t, ERC20FlashMint {\\n    con\n    tag 227\t\t\t, ERC20FlashMint {\\n    con\n      JUMPDEST \t\t\t, ERC20FlashMint {\\n    con\n      POP \t\t\tnable, ERC20Pausable, Ownable,...\n      JUMP \t\t\tnable, ERC20Pausable, Ownable,...\n    tag 86\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 231\t\t\t\n      PUSH [tag] 232\t\t\t\n      JUMP \t\t\t\n    tag 231\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH [tag] 233\t\t\t\n      PUSH [tag] 141\t\t\t\n      JUMP \t\t\t\n    tag 233\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 234\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1BFC1C5\t\t\t\n      PUSH E6\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 234\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1D\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 6D6F64653D626C6F636B6E756D6265722666726F6D3D64656661756C74000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 96\t\t\t\n      JUMPDEST \t\t\t\n      CALLER \t\t\t  ERC20(\"S\n      PUSH [tag] 224\t\t\t\n      DUP2 \t\t\t  ERC20(\"S\n      DUP4 \t\t\t\n      PUSH [tag] 239\t\t\t\n      JUMP \t\t\t\n    tag 103\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 242\t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 107\t\t\t\n      JUMP \t\t\t\n    tag 242\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 243\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH FD9A7609\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\tmit, Nonces)\\n        retu\n      SWAP1 \t\t\tmit, Nonces)\\n        retu\n      MSTORE \t\t\tmit, Nonces)\\n        retu\n      PUSH 24\t\t\tw\\n        override\n      ADD \t\t\tw\\n        override\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\ttes)\\n    {\\n        super._up...\n    tag 243\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 245\t\t\t\n      DUP8 \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 165\t\t\t\n      JUMP \t\t\t\n    tag 245\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 246\t\t\t\n      DUP9 \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 225\t\t\t\n      JUMP \t\t\t\n    tag 246\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 23E30C8B\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9\t\t\tnt(address to, uint256 amount)...\n      SWAP1 \t\t\tnt(address to, uint256 amount)...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP11 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      PUSH 23E30C8B\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 248\t\t\t\n      SWAP1 \t\t\t\n      CALLER \t\t\t  ERC20(\"S\n      SWAP1 \t\t\t  ERC20(\"S\n      DUP13 \t\t\t\n      SWAP1 \t\t\t\n      DUP13 \t\t\t\n      SWAP1 \t\t\t\n      DUP9 \t\t\t\n      SWAP1 \t\t\t\n      DUP14 \t\t\t\n      SWAP1 \t\t\t\n      DUP14 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMP \t\t\t\n    tag 248\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      PUSH 0\t\t\t\n      DUP8 \t\t\t\n      GAS \t\t\t\n      CALL \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 251\t\t\t\n      JUMPI \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      RETURNDATACOPY \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 251\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      PUSH 1F\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 252\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 253\t\t\t\n      JUMP \t\t\t\n    tag 252\t\t\t\n      JUMPDEST \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 254\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 678C5B\t\t\t\n      PUSH E8\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP10 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 254\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 258\t\t\t\n      DUP10 \t\t\t\n      ADDRESS \t\t\t\n      PUSH [tag] 259\t\t\t\n      DUP6 \t\t\t\n      DUP12 \t\t\t\n      PUSH [tag] 260\t\t\t\n      JUMP \t\t\t\n    tag 259\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 199\t\t\t\n      JUMP \t\t\t\n    tag 258\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 261\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n    tag 261\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 262\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 263\t\t\t\n      DUP10 \t\t\t\n      PUSH [tag] 264\t\t\t\n      DUP5 \t\t\t\n      DUP11 \t\t\t\n      PUSH [tag] 260\t\t\t\n      JUMP \t\t\t\n    tag 264\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 229\t\t\t\n      JUMP \t\t\t\n    tag 263\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 267\t\t\t\n      JUMP \t\t\t\n    tag 262\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 266\t\t\t\n      DUP10 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 229\t\t\t\n      JUMP \t\t\t\n    tag 266\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 267\t\t\t\n      DUP10 \t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 201\t\t\t\n      JUMP \t\t\t\n    tag 267\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      SWAP9 \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 107\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      ADDRESS \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 269\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMP \t\t\t\n    tag 269\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 190\t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      NOT \t\t\t\n      PUSH [tag] 273\t\t\t\n      JUMP \t\t\t\n    tag 111\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 190\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 276\t\t\t\n      JUMP \t\t\t\n    tag 119\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 279\t\t\tes(owner);\\n  \n      PUSH [tag] 217\t\t\tes(owner);\\n\n      JUMP \t\t\tes(owner);\\n  \n    tag 279\t\t\tes(owner);\\n  \n      JUMPDEST \t\t\tes(owner);\\n  \n      PUSH [tag] 219\t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 282\t\t\t\n      JUMP \t\t\t\n    tag 122\t\t\t\\n\\n    function mint(address ...\n      JUMPDEST \t\t\t\\n\\n    function mint(address ...\n      PUSH [tag] 284\t\t\t_mint(to, amount);\\n    }\\n\\n ...\n      DUP3 \t\t\t);\\n    \n      CALLER \t\t\t  ERC20(\"S\n      DUP4 \t\t\tllowi\n      PUSH [tag] 199\t\t\t_mint(to, amoun\n      JUMP \t\t\t_mint(to, amount);\\n    }\\n\\n ...\n    tag 284\t\t\t_mint(to, amount);\\n    }\\n\\n ...\n      JUMPDEST \t\t\t_mint(to, amount);\\n    }\\n\\n ...\n      PUSH [tag] 224\t\t\ts are overrides requi\n      DUP3 \t\t\toverrid\n      DUP3 \t\t\t requ\n      PUSH [tag] 229\t\t\ts are\n      JUMP \t\t\ts are overrides requi\n    tag 125\t\t\tfunction nonces(address owner)...\n      JUMPDEST \t\t\tfunction nonces(address owner)...\n      PUSH 0\t\t\tuint256\n      PUSH [tag] 190\t\t\tsuper.nonces(owner)\n      DUP3 \t\t\towner\n      PUSH [tag] 289\t\t\tsuper.nonces\n      JUMP \t\t\tsuper.nonces(owner)\n    tag 128\t\t\tfunction pause() public onlyOw...\n      JUMPDEST \t\t\tfunction pause() public onlyOw...\n      PUSH [tag] 291\t\t\tes(owner);\\n  \n      PUSH [tag] 217\t\t\tes(owner);\\n\n      JUMP \t\t\tes(owner);\\n  \n    tag 291\t\t\tes(owner);\\n  \n      JUMPDEST \t\t\tes(owner);\\n  \n      PUSH [tag] 219\t\t\t_pause()\n      PUSH [tag] 294\t\t\t_pause\n      JUMP \t\t\t_pause()\n    tag 130\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 296\t\t\t\n      PUSH [tag] 297\t\t\t\n      JUMP \t\t\t\n    tag 296\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 298\t\t\t\n      PUSH [tag] 299\t\t\t\n      JUMP \t\t\t\n    tag 298\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH F\t\t\t\n      PUSH F8\t\t\t\n      SHL \t\t\t\n      SWAP12 \t\t\t\n      SWAP4 \t\t\t\n      SWAP11 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP9 \t\t\t\n      POP \t\t\t\n      CHAINID \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      ADDRESS \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 138\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 306\t\t\t\n      PUSH [tag] 141\t\t\t\n      JUMP \t\t\t\n    tag 306\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 307\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 7669FC0F\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 24\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 307\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 309\t\t\t\n      PUSH [tag] 310\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 213\t\t\t\n      JUMP \t\t\t\n    tag 310\t\t\t\n      JUMPDEST \t\t\t\n      PUSH B\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 214\t\t\t\n      JUMP \t\t\t\n    tag 309\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 141\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 204\t\t\t\n      PUSH [tag] 232\t\t\t\n      JUMP \t\t\t\n    tag 145\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 184\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 185\t\t\t\n      JUMP \t\t\t\n    tag 149\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH A\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      PUSH [tag] 320\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 321\t\t\t\n      JUMP \t\t\t\n    tag 320\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 153\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\t  ERC20(\"S\n      PUSH [tag] 193\t\t\t\n      DUP2 \t\t\t  ERC20(\"S\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 201\t\t\t\n      JUMP \t\t\t\n    tag 158\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      TIMESTAMP \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 326\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 2341D787\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\tmit, Nonces)\\n        retu\n      SWAP1 \t\t\tmit, Nonces)\\n        retu\n      MSTORE \t\t\tmit, Nonces)\\n        retu\n      PUSH 24\t\t\tw\\n        override\n      ADD \t\t\tw\\n        override\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\ttes)\\n    {\\n        super._up...\n    tag 326\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH E48329057BFD03D55E49B547132E39CFFD9C1820AD7B9D4C5307691425D15ADF\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 60\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 328\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 329\t\t\t\n      SWAP1 \t\t\t\n      PUSH A0\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      PUSH [tag] 332\t\t\t\n      JUMP \t\t\t\n    tag 329\t\t\t\n      JUMPDEST \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 333\t\t\t\n      JUMP \t\t\t\n    tag 328\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 334\t\t\t\n      DUP2 \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMP \t\t\t\n    tag 334\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 336\t\t\t\n      DUP2 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 239\t\t\t\n      JUMP \t\t\t\n    tag 336\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 162\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      TIMESTAMP \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 338\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 313C8981\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\tmit, Nonces)\\n        retu\n      SWAP1 \t\t\tmit, Nonces)\\n        retu\n      MSTORE \t\t\tmit, Nonces)\\n        retu\n      PUSH 24\t\t\tw\\n        override\n      ADD \t\t\tw\\n        override\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\ttes)\\n    {\\n        super._up...\n    tag 338\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9\t\t\t\\n    function mint(address to...\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 340\t\t\t\n      DUP13 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\\n    // The fo\n      PUSH 0\t\t\tSamms\")\n      SWAP1 \t\t\t\\n    // The fo\n      DUP2 \t\t\t\\n    // The fo\n      MSTORE \t\t\t\\n    // The fo\n      PUSH 8\t\t\t\\n    //\n      PUSH 20\t\t\t\\n    // The fo\n      MSTORE \t\t\t\\n    // The fo\n      PUSH 40\t\t\t\\n    // The fo\n      SWAP1 \t\t\t\\n    // The fo\n      KECCAK256 \t\t\t\\n    // The fo\n      DUP1 \t\t\t\\n    // The foll\n      SLOAD \t\t\t\\n    // The foll\n      PUSH 1\t\t\t\\n    // The foll\n      DUP2 \t\t\t\\n    // The foll\n      ADD \t\t\t\\n    // The foll\n      SWAP1 \t\t\t\\n    // The foll\n      SWAP2 \t\t\t\\n    // The foll\n      SSTORE \t\t\t\\n    // The foll\n      SWAP1 \t\t\t\\n    // The foll\n      JUMP \t\t\tAS\")\\n        Ownable(initialO...\n    tag 340\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP7 \t\t\t\n      SWAP1 \t\t\t\n      SWAP7 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP5 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH A0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH C0\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH E0\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 344\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 332\t\t\t\n      JUMP \t\t\t\n    tag 344\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 345\t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      DUP8 \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 333\t\t\t\n      JUMP \t\t\t\n    tag 345\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP10 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 346\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 25C00723\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP12 \t\t\t\n      AND \t\t\t\n      PUSH 24\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 346\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 349\t\t\t\n      DUP11 \t\t\t\n      DUP11 \t\t\t\n      DUP11 \t\t\t\n      PUSH [tag] 194\t\t\t\n      JUMP \t\t\t\n    tag 349\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 165\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      ADDRESS \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 351\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 5AD3EDC9\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 351\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n    tag 353\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 175\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 353\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 360\t\t\t\n      JUMP \t\t\t\n    tag 180\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 362\t\t\tes(owner);\\n  \n      PUSH [tag] 217\t\t\tes(owner);\\n\n      JUMP \t\t\tes(owner);\\n  \n    tag 362\t\t\tes(owner);\\n  \n      JUMPDEST \t\t\tes(owner);\\n  \n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 364\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1E4FBDF7\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 364\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 227\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 282\t\t\t\n      JUMP \t\t\t\n    tag 181\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 353\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 369\t\t\t\n      JUMP \t\t\t\n    tag 182\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 353\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 372\t\t\t\n      JUMP \t\t\t\n    tag 194\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 375\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 376\t\t\t\n      JUMP \t\t\t\n    tag 375\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 199\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP4 \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH 0\t\t\t\n      NOT \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 383\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 380\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 7DC7A0D9\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 64\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 380\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 383\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 376\t\t\t\n      JUMP \t\t\t\n    tag 383\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 201\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 385\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 4B637E8F\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 385\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 387\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH EC442F05\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 387\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 375\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 390\t\t\t\n      JUMP \t\t\t\n    tag 205\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      ADDRESS \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      PUSHIMMUTABLE 3451\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 392\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSHIMMUTABLE 3449\t\t\t\n      CHAINID \t\t\t\n      EQ \t\t\t\n    tag 392\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 393\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSHIMMUTABLE 3447\t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 393\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 204\t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSHIMMUTABLE 3453\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSHIMMUTABLE 3455\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      CHAINID \t\t\t\n      PUSH 80\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      ADDRESS \t\t\t\n      PUSH A0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      PUSH C0\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 213\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 398\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 6DFCC65\t\t\t\n      PUSH E4\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 30\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 398\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 214\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      PUSH 5\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 402\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 403\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 404\t\t\t\n      JUMP \t\t\t\n    tag 403\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 405\t\t\t\n      SWAP1 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 273\t\t\t\n      JUMP \t\t\t\n    tag 405\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP9 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SLOAD \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP8 \t\t\t\n      AND \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 408\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 409\t\t\t\n      JUMP \t\t\t\n    tag 408\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 410\t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 260\t\t\t\n      JUMP \t\t\t\n    tag 410\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n    tag 409\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n    tag 402\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 411\t\t\t\n      DUP8 \t\t\t\n      DUP8 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 412\t\t\t\n      JUMP \t\t\t\n    tag 411\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 413\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 414\t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 415\t\t\t\n      PUSH 1\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 273\t\t\t\n      JUMP \t\t\t\n    tag 415\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      KECCAK256 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 414\t\t\t\n      JUMPDEST \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH [tag] 416\t\t\t\n      JUMP \t\t\t\n    tag 413\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n    tag 416\t\t\t\n      JUMPDEST \t\t\t\n      SWAP8 \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 217\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5\t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      PUSH 100\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      AND \t\t\t\n      CALLER \t\t\t  ERC20(\"S\n      EQ \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 118CDAA7\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      CALLER \t\t\t  ERC20(\"S\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 220\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 424\t\t\t\n      PUSH [tag] 425\t\t\t\n      JUMP \t\t\t\n    tag 424\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH FF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      PUSH 5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA\t\t\t\n      CALLER \t\t\t  ERC20(\"S\n    tag 427\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG1 \t\t\t\n      JUMP \t\t\t\n    tag 225\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 430\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH EC442F05\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 430\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 224\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 390\t\t\t\n      JUMP \t\t\t\n    tag 229\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 434\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 4B637E8F\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 434\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 224\t\t\t\n      DUP3 \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 390\t\t\t\n      JUMP \t\t\t\n    tag 232\t\t\t      _pause();\\n    }\\n\\n    ...\n      JUMPDEST \t\t\t      _pause();\\n    }\\n\\n    ...\n      PUSH 0\t\t\tpublic\n      PUSH [tag] 204\t\t\t  _unpause();\\n    }\\n\\n    fu...\n      NUMBER \t\t\t}\\n\\n    funct\n      PUSH [tag] 213\t\t\t  _unpause();\\n   \n      JUMP \t\t\t  _unpause();\\n    }\\n\\n    fu...\n    tag 239\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 9\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      DUP7 \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      SSTORE \t\t\t\n      SWAP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP5 \t\t\t\n      AND \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      DUP5 \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      PUSH 3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      LOG4 \t\t\t\n      PUSH [tag] 375\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 442\t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 443\t\t\t\n      JUMP \t\t\t\n    tag 442\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 444\t\t\t\n      JUMP \t\t\t\n    tag 276\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH A\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 190\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 450\t\t\t\n      JUMP \t\t\t\n    tag 282\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 100\t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MUL \t\t\t\n      PUSH 100\t\t\t\n      PUSH 1\t\t\t\n      PUSH A8\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SWAP5 \t\t\t\n      SSTORE \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP4 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      DIV \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0\t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 289\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t ERC20Pausable\n      AND \t\t\t ERC20Pausable\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t ERC20Pausable\n      DUP2 \t\t\t ERC20Pausable\n      MSTORE \t\t\t ERC20Pausable\n      PUSH 8\t\t\t ERC20P\n      PUSH 20\t\t\t ERC20Pausable\n      MSTORE \t\t\t ERC20Pausable\n      PUSH 40\t\t\t ERC20Pausable\n      DUP2 \t\t\t ERC20Pausable\n      KECCAK256 \t\t\t ERC20Pausable\n      SLOAD \t\t\t ERC20Pausable\n      PUSH [tag] 190\t\t\t\n      JUMP \t\t\tken/ERC20/extensions/ERC20Flas...\n    tag 294\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 456\t\t\t        returns (ui\n      PUSH [tag] 457\t\t\t        returns (\n      JUMP \t\t\t        returns (ui\n    tag 456\t\t\t        returns (ui\n      JUMPDEST \t\t\t        returns (ui\n      PUSH 5\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH FF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      PUSH 62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258\t\t\t\n      PUSH [tag] 427\t\t\t\n      CALLER \t\t\t  ERC20(\"S\n      SWAP1 \t\t\t  ERC20(\"S\n      JUMP \t\t\trmit, ERC20Votes, ERC20FlashMi...\n    tag 297\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 204\t\t\t\n      PUSHIMMUTABLE 3458\t\t\t\n      PUSH 6\t\t\t\n      PUSH [tag] 463\t\t\t\n      JUMP \t\t\t\n    tag 299\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 204\t\t\t\n      PUSHIMMUTABLE 3461\t\t\t\n      PUSH 7\t\t\t\n      PUSH [tag] 463\t\t\t\n      JUMP \t\t\t\n    tag 321\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 351\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 468\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 415\t\t\t\n      PUSH 1\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 273\t\t\t\n      JUMP \t\t\t\n    tag 468\t\t\t\n      JUMPDEST \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH [tag] 353\t\t\t\n      JUMP \t\t\t\n    tag 332\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 190\t\t\t\n      PUSH [tag] 473\t\t\t\n      PUSH [tag] 205\t\t\t\n      JUMP \t\t\t\n    tag 473\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1901\t\t\t\n      PUSH F0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 2\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 42\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 333\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 476\t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 477\t\t\t\n      JUMP \t\t\t\n    tag 476\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 478\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 479\t\t\t\n      JUMP \t\t\t\n    tag 478\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP7 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 335\t\t\tnal\\n        override(ERC20, E...\n      JUMPDEST \t\t\tnal\\n        override(ERC20, E...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\\n    // The fo\n      AND \t\t\t\\n    // The fo\n      PUSH 0\t\t\tfrom, to, value\n      SWAP1 \t\t\t\\n    // The fo\n      DUP2 \t\t\t\\n    // The fo\n      MSTORE \t\t\t\\n    // The fo\n      PUSH 8\t\t\t\\n    //\n      PUSH 20\t\t\t\\n    // The fo\n      MSTORE \t\t\t\\n    // The fo\n      PUSH 40\t\t\t\\n    // The fo\n      SWAP1 \t\t\t\\n    // The fo\n      KECCAK256 \t\t\t\\n    // The fo\n      DUP1 \t\t\t\\n    // The foll\n      SLOAD \t\t\t\\n    // The foll\n      PUSH 1\t\t\t\\n    // The foll\n      DUP2 \t\t\t\\n    // The foll\n      ADD \t\t\t\\n    // The foll\n      SWAP1 \t\t\t\\n    // The foll\n      SWAP2 \t\t\t\\n    // The foll\n      SSTORE \t\t\t\\n    // The foll\n      DUP2 \t\t\tress owner)\\n    \n      DUP2 \t\t\tress owner)\\n    \n      EQ \t\t\tress owner)\\n    \n      PUSH [tag] 375\t\t\t(address owner)\\n        publi...\n      JUMPI \t\t\t(address owner)\\n        publi...\n      PUSH 40\t\t\t\\n        override(ERC20Permit...\n      MLOAD \t\t\t\\n        override(ERC20Permit...\n      PUSH 1D4B623\t\t\t\n      PUSH E6\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\\n        override(ERC20Permit...\n      MSTORE \t\t\t\\n        override(ERC20Permit...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\\n        override(ERC20Permit...\n      DUP3 \t\t\t\\n        override(ERC20Permit...\n      ADD \t\t\t\\n        override(ERC20Permit...\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\\n        override(ERC20Permit...\n      JUMP \t\t\t\n    tag 360\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH A\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      PUSH [tag] 353\t\t\t\n      SWAP1 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 490\t\t\t\n      JUMP \t\t\t\n    tag 376\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 492\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH E602DF05\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 492\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 494\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 4A1406B1\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 494\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP4 \t\t\t\n      DUP8 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      KECCAK256 \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 383\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925\t\t\t\n      DUP5 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 497\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\tmit, Nonces)\\n        retu\n      MSTORE \t\t\tmit, Nonces)\\n        retu\n      PUSH 20\t\t\tid\n      ADD \t\t\tw\\n        override\n      SWAP1 \t\t\tw\\n        override\n      JUMP \t\t\ttes)\\n    {\\n        super._up...\n    tag 497\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 390\t\t\tfunction _update(address from,...\n      JUMPDEST \t\t\tfunction _update(address from,...\n      PUSH [tag] 375\t\t\tsuper._update(from, to, value)\n      DUP4 \t\t\tfrom\n      DUP4 \t\t\tto\n      DUP4 \t\t\tvalue\n      PUSH [tag] 500\t\t\tsuper._update\n      JUMP \t\t\tsuper._update(from, to, value)\n    tag 404\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      PUSH 0\t\t\t\n      SUB \t\t\t\n      PUSH [tag] 505\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 505\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 506\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 507\t\t\t\n      JUMP \t\t\t\n    tag 506\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      PUSH 1\t\t\t\n      SWAP1 \t\t\t\n      SHL \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 509\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 509\t\t\t\n      PUSH [tag] 510\t\t\t\n      JUMP \t\t\t\n    tag 509\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 512\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 512\t\t\t\n      PUSH [tag] 510\t\t\t\n      JUMP \t\t\t\n    tag 512\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 514\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 514\t\t\t\n      PUSH [tag] 510\t\t\t\n      JUMP \t\t\t\n    tag 514\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 516\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 516\t\t\t\n      PUSH [tag] 510\t\t\t\n      JUMP \t\t\t\n    tag 516\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 518\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 518\t\t\t\n      PUSH [tag] 510\t\t\t\n      JUMP \t\t\t\n    tag 518\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 520\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 520\t\t\t\n      PUSH [tag] 510\t\t\t\n      JUMP \t\t\t\n    tag 520\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 522\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 522\t\t\t\n      PUSH [tag] 510\t\t\t\n      JUMP \t\t\t\n    tag 522\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 353\t\t\t\n      DUP2 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 525\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 525\t\t\t\n      PUSH [tag] 510\t\t\t\n      JUMP \t\t\t\n    tag 525\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      PUSH [tag] 526\t\t\t\n      JUMP \t\t\t\n    tag 412\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n    tag 529\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 530\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 531\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 532\t\t\t\n      JUMP \t\t\t\n    tag 531\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP8 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SLOAD \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 534\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 535\t\t\t\n      JUMP \t\t\t\n    tag 534\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 536\t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 260\t\t\t\n      JUMP \t\t\t\n    tag 536\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n    tag 535\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 529\t\t\t\n      JUMP \t\t\t\n    tag 530\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 425\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5\t\t\t\n      SLOAD \t\t\t\n      PUSH FF\t\t\t\n      AND \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 8DFC202B\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 443\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMP \t\t\t\n    tag 444\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 543\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n    tag 543\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 375\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 545\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH A\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 546\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 182\t\t\t\n      PUSH [tag] 547\t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 548\t\t\t\n      JUMP \t\t\t\n    tag 547\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 549\t\t\t\n      JUMP \t\t\t\n    tag 546\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP5 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH DEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 550\t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 550\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 545\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 375\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH A\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 553\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 181\t\t\t\n      PUSH [tag] 547\t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 548\t\t\t\n      JUMP \t\t\t\n    tag 553\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH DEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 555\t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 555\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 450\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 398\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 6DFCC65\t\t\t\n      PUSH E4\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 457\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5\t\t\t\n      SLOAD \t\t\t\n      PUSH FF\t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH D93C0665\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 463\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH FF\t\t\tes(address owner)\\n        pub...\n      DUP4 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 566\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 567\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 568\t\t\t\n      JUMP \t\t\t\n    tag 567\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMP \t\t\t\n    tag 566\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 570\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 185\t\t\t\n      JUMP \t\t\t\n    tag 570\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 571\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 185\t\t\t\n      JUMP \t\t\t\n    tag 571\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 572\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 573\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 572\t\t\t\n      JUMP \t\t\t\n    tag 573\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 574\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 574\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 572\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMP \t\t\t\n    tag 477\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP1 \t\t\t\n      PUSH 7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\t\t\t\n      DUP5 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 577\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 3\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 576\t\t\t\n      JUMP \t\t\t\n    tag 577\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      MSTORE \t\t\t\n      DUP11 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH FF\t\t\t\n      DUP10 \t\t\t\n      AND \t\t\t\n      SWAP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 60\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP8 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      SWAP1 \t\t\t\n      PUSH A0\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP6 \t\t\t\n      GAS \t\t\t\n      STATICCALL \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 581\t\t\t\n      JUMPI \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      RETURNDATACOPY \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 581\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 582\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 576\t\t\t\n      JUMP \t\t\t\n    tag 582\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 576\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 479\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 588\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 588\t\t\t\n      PUSH [tag] 586\t\t\t\n      JUMP \t\t\t\n    tag 588\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 589\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 589\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 594\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 594\t\t\t\n      PUSH [tag] 586\t\t\t\n      JUMP \t\t\t\n    tag 594\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 595\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH F645EEDF\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 595\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 600\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 600\t\t\t\n      PUSH [tag] 586\t\t\t\n      JUMP \t\t\t\n    tag 600\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 601\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH FCE698F7\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\tmit, Nonces)\\n        retu\n      SWAP1 \t\t\tmit, Nonces)\\n        retu\n      MSTORE \t\t\tmit, Nonces)\\n        retu\n      PUSH 24\t\t\tw\\n        override\n      ADD \t\t\tw\\n        override\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\ttes)\\n    {\\n        super._up...\n    tag 601\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 3\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 607\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 607\t\t\t\n      PUSH [tag] 586\t\t\t\n      JUMP \t\t\t\n    tag 607\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 224\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 35E2F383\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\tmit, Nonces)\\n        retu\n      SWAP1 \t\t\tmit, Nonces)\\n        retu\n      MSTORE \t\t\tmit, Nonces)\\n        retu\n      PUSH 24\t\t\tw\\n        override\n      ADD \t\t\tw\\n        override\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\ttes)\\n    {\\n        super._up...\n    tag 490\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP3 \t\t\t\n      PUSH 0\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 613\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 613\t\t\t\n      PUSH [tag] 614\t\t\t\n      JUMP \t\t\t\n    tag 613\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      SLOAD \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 500\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 617\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 618\t\t\t\n      JUMP \t\t\t\n    tag 617\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 619\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 620\t\t\t\n      PUSH 2\t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 620\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 623\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH E58AE93\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 623\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 619\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 375\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 626\t\t\t\n      JUMP \t\t\t\n    tag 507\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 80\t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 628\t\t\t\n      JUMPI \t\t\t\n      PUSH 80\t\t\t\n      SWAP3 \t\t\t\n      DUP4 \t\t\t\n      SHR \t\t\t\n      SWAP3 \t\t\t\n      ADD \t\t\t\n    tag 628\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 629\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      SWAP3 \t\t\t\n      DUP4 \t\t\t\n      SHR \t\t\t\n      SWAP3 \t\t\t\n      ADD \t\t\t\n    tag 629\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 630\t\t\t\n      JUMPI \t\t\t\n      PUSH 20\t\t\t\n      SWAP3 \t\t\t\n      DUP4 \t\t\t\n      SHR \t\t\t\n      SWAP3 \t\t\t\n      ADD \t\t\t\n    tag 630\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 10\t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 631\t\t\t\n      JUMPI \t\t\t\n      PUSH 10\t\t\t\n      SWAP3 \t\t\t\n      DUP4 \t\t\t\n      SHR \t\t\t\n      SWAP3 \t\t\t\n      ADD \t\t\t\n    tag 631\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 8\t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 632\t\t\t\n      JUMPI \t\t\t\n      PUSH 8\t\t\t\n      SWAP3 \t\t\t\n      DUP4 \t\t\t\n      SHR \t\t\t\n      SWAP3 \t\t\t\n      ADD \t\t\t\n    tag 632\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4\t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 633\t\t\t\n      JUMPI \t\t\t\n      PUSH 4\t\t\t\n      SWAP3 \t\t\t\n      DUP4 \t\t\t\n      SHR \t\t\t\n      SWAP3 \t\t\t\n      ADD \t\t\t\n    tag 633\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 634\t\t\t\n      JUMPI \t\t\t\n      PUSH 2\t\t\t\n      SWAP3 \t\t\t\n      DUP4 \t\t\t\n      SHR \t\t\t\n      SWAP3 \t\t\t\n      ADD \t\t\t\n    tag 634\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 526\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 637\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 353\t\t\t\n      JUMP \t\t\t\n    tag 637\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 532\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 640\t\t\t\n      PUSH 2\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      XOR \t\t\t\n      PUSH [tag] 641\t\t\t\n      JUMP \t\t\t\n    tag 640\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 353\t\t\t\n      SWAP1 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 260\t\t\t\n      JUMP \t\t\t\n    tag 548\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 398\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 6DFCC65\t\t\t\n      PUSH E4\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH D0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 549\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 648\t\t\t\n      PUSH [tag] 649\t\t\t\n      PUSH [tag] 141\t\t\t\n      JUMP \t\t\t\n    tag 649\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 650\t\t\t\n      PUSH [tag] 651\t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 321\t\t\t\n      JUMP \t\t\t\n    tag 651\t\t\t\n      JUMPDEST \t\t\t\n      DUP7 \t\t\t\n      DUP9 \t\t\t\n      PUSH FFFFFFFF\t\t\t\n      AND \t\t\t\n      JUMP \t\t\t\n    tag 650\t\t\t\n      JUMPDEST \t\t\t\n      DUP8 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 652\t\t\t\n      JUMP \t\t\t\n    tag 648\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 647\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 568\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 654\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 655\t\t\t\n      JUMP \t\t\t\n    tag 654\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP2 \t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      DUP4 \t\t\t\n      CALLDATACOPY \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 618\t\t\t);\\n    }\\n\\n    // The follow...\n      JUMPDEST \t\t\t);\\n    }\\n\\n    // The follow...\n      PUSH [tag] 660\t\t\t        returns (ui\n      PUSH [tag] 457\t\t\t        returns (\n      JUMP \t\t\t        returns (ui\n    tag 660\t\t\t        returns (ui\n      JUMPDEST \t\t\t        returns (ui\n      PUSH [tag] 375\t\t\trom, address to, uint256 value\n      DUP4 \t\t\to, u\n      DUP4 \t\t\tt2\n      DUP4 \t\t\t valu\n      PUSH [tag] 663\t\t\trom, address \n      JUMP \t\t\trom, address to, uint256 value\n    tag 626\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 666\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 667\t\t\t\n      PUSH B\t\t\t\n      PUSH [tag] 181\t\t\t\n      PUSH [tag] 547\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 548\t\t\t\n      JUMP \t\t\t\n    tag 667\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 666\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 669\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 670\t\t\t\n      PUSH B\t\t\t\n      PUSH [tag] 182\t\t\t\n      PUSH [tag] 547\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 548\t\t\t\n      JUMP \t\t\t\n    tag 670\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 669\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 9\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      DUP6 \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 375\t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 444\t\t\t\n      JUMP \t\t\t\n    tag 652\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 648\t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 677\t\t\t\n      JUMP \t\t\t\n    tag 655\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 1F\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 2CD44AC3\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 663\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 681\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 2\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 682\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 260\t\t\t\n      JUMP \t\t\t\n    tag 682\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 683\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 681\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 684\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 391434E3\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 64\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 684\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n    tag 683\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 686\t\t\t\n      JUMPI \t\t\t\n      PUSH 2\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      PUSH [tag] 687\t\t\t\n      JUMP \t\t\t\n    tag 686\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n    tag 687\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 688\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\tmit, Nonces)\\n        retu\n      MSTORE \t\t\tmit, Nonces)\\n        retu\n      PUSH 20\t\t\tid\n      ADD \t\t\tw\\n        override\n      SWAP1 \t\t\tw\\n        override\n      JUMP \t\t\ttes)\\n    {\\n        super._up...\n    tag 688\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 677\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 690\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 691\t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 415\t\t\t\n      PUSH 1\t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 273\t\t\t\n      JUMP \t\t\t\n    tag 691\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      DIV \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      DUP8 \t\t\t\n      AND \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 693\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 2520601D\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 693\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP1 \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 694\t\t\t\n      JUMPI \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 695\t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 415\t\t\t\n      PUSH 1\t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 273\t\t\t\n      JUMP \t\t\t\n    tag 695\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      MUL \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      PUSH [tag] 697\t\t\t\n      JUMP \t\t\t\n    tag 694\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP1 \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      DUP12 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP14 \t\t\t\n      SSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP14 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP5 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      MUL \t\t\t\n      SWAP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      OR \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      SSTORE \t\t\t\n    tag 697\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP4 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 647\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 690\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      DUP9 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP11 \t\t\t\n      SSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP11 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP6 \t\t\t\n      MLOAD \t\t\t\n      SWAP3 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      SWAP4 \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      MUL \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP4 \t\t\t\n      AND \t\t\t\n      OR \t\t\t\n      SWAP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SSTORE \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 647\t\t\t\n      JUMP \t\t\t\n    tag 701\t\t\te-Identifier: MIT\\npragma soli...\n      JUMPDEST \t\t\te-Identifier: MIT\\npragma soli...\n      PUSH 0\t\t\t\\n\\ni\n      DUP2 \t\t\t0/tok\n      MLOAD \t\t\ts@5.0.0/toke\n      DUP1 \t\t\tmport \n      DUP5 \t\t\tl\";\n      MSTORE \t\t\tRC20.sol\";\\nimport \"\n      PUSH 0\t\t\tr\n    tag 707\t\t\t0/token/ERC20/extensions/ERC20...\n      JUMPDEST \t\t\t0/token/ERC20/extensions/ERC20...\n      DUP2 \t\t\textens\n      DUP2 \t\t\t2\n      LT \t\t\tERC20/extensi\n      ISZERO \t\t\t0/token/ERC20/extensions/ERC20...\n      PUSH [tag] 709\t\t\t0/token/ERC20/extensions/ERC20...\n      JUMPI \t\t\t0/token/ERC20/extensions/ERC20...\n      PUSH 20\t\t\t@5.0\n      DUP2 \t\t\t \"@openzeppel\n      DUP6 \t\t\t \"@openzeppel\n      ADD \t\t\t \"@openzeppel\n      DUP2 \t\t\tport \"@openzeppelin/co\n      ADD \t\t\tport \"@openzeppelin/co\n      MLOAD \t\t\tl\";\\nimport \"@openzeppelin/con\n      DUP7 \t\t\ts/ERC20Paus\n      DUP4 \t\t\ts/ERC20Paus\n      ADD \t\t\ts/ERC20Paus\n      DUP3 \t\t\tsions/ERC20Pausable.\n      ADD \t\t\tsions/ERC20Pausable.\n      MSTORE \t\t\t0/extensions/ERC20Pausable.sol...\n      ADD \t\t\t0Burnable.so\n      PUSH [tag] 707\t\t\t0/token/ERC20/extensions/ERC20...\n      JUMP \t\t\t0/token/ERC20/extensions/ERC20...\n    tag 709\t\t\t0/token/ERC20/extensions/ERC20...\n      JUMPDEST \t\t\t0/token/ERC20/extensions/ERC20...\n      POP \t\t\tken\n      PUSH 0\t\t\tc\n      PUSH 20\t\t\tppel\n      DUP3 \t\t\t \"@ope\n      DUP7 \t\t\tmpo\n      ADD \t\t\t\";\\nimport \"@open\n      ADD \t\t\t.sol\";\\nimport \"@openzeppeli\n      MSTORE \t\t\tOwnable.sol\";\\nimport \"@openze...\n      PUSH 20\t\t\t \"@o\n      PUSH 1F\t\t\t\\ni\n      NOT \t\t\tol\";\\nim\n      PUSH 1F\t\t\tmi\n      DUP4 \t\t\tERC20P\n      ADD \t\t\tons/ERC20Permit\n      AND \t\t\tensions/ERC20Permit.sol\";\\nimp\n      DUP6 \t\t\t0/e\n      ADD \t\t\tERC20/extensions/ERC20Permit.s...\n      ADD \t\t\tken/ERC20/extensions/ERC20Perm...\n      SWAP2 \t\t\t.0.0/token/ERC20/extensions/ER...\n      POP \t\t\t.0.0/token/ERC20/extensions/ER...\n      POP \t\t\t.0.0/token/ERC20/extensions/ER...\n      SWAP3 \t\t\te-Identifier: MIT\\npragma soli...\n      SWAP2 \t\t\te-Identifier: MIT\\npragma soli...\n      POP \t\t\te-Identifier: MIT\\npragma soli...\n      POP \t\t\te-Identifier: MIT\\npragma soli...\n      JUMP \t\t\te-Identifier: MIT\\npragma soli...\n    tag 48\t\t\tcontracts@5.0.0/token/ERC20/ex...\n      JUMPDEST \t\t\tcontracts@5.0.0/token/ERC20/ex...\n      PUSH 20\t\t\tum\n      DUP2 \t\t\t\\ncontract\n      MSTORE \t\t\t.sol\";\\n\\ncontract Suma\n      PUSH 0\t\t\tions\n      PUSH [tag] 353\t\t\tRC20Burnable, ERC20Pausable, O...\n      PUSH 20\t\t\t20\n      DUP4 \t\t\twnable, E\n      ADD \t\t\te, Ownable, ERC20P\n      DUP5 \t\t\t0Pausa\n      PUSH [tag] 701\t\t\tRC20Burnable, ERC20Pausable, O...\n      JUMP \t\t\tRC20Burnable, ERC20Pausable, O...\n    tag 702\t\t\tVotes, ERC20FlashMint {\\n    c...\n      JUMPDEST \t\t\tVotes, ERC20FlashMint {\\n    c...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t(\"SumaSamms\", \"SSAS\")\\n       ...\n      AND \t\t\t(\"SumaSamms\", \"SSAS\")\\n       ...\n      DUP2 \t\t\t     ERC20(\"SumaSamms\", \"SSAS\"...\n      EQ \t\t\t     ERC20(\"SumaSamms\", \"SSAS\"...\n      PUSH [tag] 227\t\t\tOwner)\\n        ERC20(\"SumaSam...\n      JUMPI \t\t\tOwner)\\n        ERC20(\"SumaSam...\n      PUSH 0\t\t\tw\n      DUP1 \t\t\ta\n      REVERT \t\t\te(initialOwn\n    tag 51\t\t\tRC20Permit(\"SumaSamms\")\\n    {...\n      JUMPDEST \t\t\tRC20Permit(\"SumaSamms\")\\n    {...\n      PUSH 0\t\t\tcimals\n      DUP1 \t\t\t);\\n   \n      PUSH 40\t\t\t  \n      DUP4 \t\t\tyOwner {\\n\n      DUP6 \t\t\tublic o\n      SUB \t\t\t() public onlyOwner {\\n \n      SLT \t\t\tause() public onlyOwner {\\n   ...\n      ISZERO \t\t\tn pause() public onlyOwner {\\n...\n      PUSH [tag] 715\t\t\tn pause() public onlyOwner {\\n...\n      JUMPI \t\t\tn pause() public onlyOwner {\\n...\n      PUSH 0\t\t\t \n      DUP1 \t\t\t;\n      REVERT \t\t\tpause();\\n   \n    tag 715\t\t\tn pause() public onlyOwner {\\n...\n      JUMPDEST \t\t\tn pause() public onlyOwner {\\n...\n      DUP3 \t\t\tyOwner {\\n\n      CALLDATALOAD \t\t\t() public onlyOwner {\\n \n      PUSH [tag] 716\t\t\tnpause();\\n    }\\n\\n    functi...\n      DUP2 \t\t\ttion \n      PUSH [tag] 702\t\t\tnpause();\\n    }\\n\\n    functi...\n      JUMP \t\t\tnpause();\\n    }\\n\\n    functi...\n    tag 716\t\t\tnpause();\\n    }\\n\\n    functi...\n      JUMPDEST \t\t\tnpause();\\n    }\\n\\n    functi...\n      SWAP5 \t\t\tt256 \n      PUSH 20\t\t\tou\n      SWAP4 \t\t\t   _mint(to, amoun\n      SWAP1 \t\t\t   _mint(to, amoun\n      SWAP4 \t\t\t   _mint(to, amoun\n      ADD \t\t\t   _mint(to, amoun\n      CALLDATALOAD \t\t\tOwner {\\n        _mint(to, amo...\n      SWAP4 \t\t\tOwner {\\n        _mint(to, amo...\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\tRC20Permit(\"SumaSamms\")\\n    {...\n    tag 61\t\t\t6)\\n    {\\n        return supe...\n      JUMPDEST \t\t\t6)\\n    {\\n        return supe...\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 720\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 720\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 721\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 702\t\t\t\n      JUMP \t\t\t\n    tag 721\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 722\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 702\t\t\t\n      JUMP \t\t\t\n    tag 722\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t6)\\n    {\\n        return supe...\n      SWAP6 \t\t\t6)\\n    {\\n        return supe...\n      SWAP3 \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t6)\\n    {\\n        return supe...\n    tag 83\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 726\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 726\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 90\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 728\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 728\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 353\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 702\t\t\t\n      JUMP \t\t\t\n    tag 102\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 80\t\t\t\n      DUP7 \t\t\t\n      DUP9 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 732\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 732\t\t\t\n      JUMPDEST \t\t\t\n      DUP6 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 733\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 702\t\t\t\n      JUMP \t\t\t\n    tag 733\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 734\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 702\t\t\t\n      JUMP \t\t\t\n    tag 734\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 60\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 735\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 735\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP9 \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SLT \t\t\t\n      PUSH [tag] 736\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 736\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 737\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 737\t\t\t\n      JUMPDEST \t\t\t\n      DUP10 \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      ADD \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 738\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 738\t\t\t\n      JUMPDEST \t\t\t\n      SWAP7 \t\t\t\n      SWAP10 \t\t\t\n      SWAP6 \t\t\t\n      SWAP9 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 132\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FF\t\t\t\n      PUSH F8\t\t\t\n      SHL \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      PUSH E0\t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 741\t\t\t\n      PUSH E0\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      DUP11 \t\t\t\n      PUSH [tag] 701\t\t\t\n      JUMP \t\t\t\n    tag 741\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 40\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 742\t\t\t\n      DUP2 \t\t\t\n      DUP11 \t\t\t\n      PUSH [tag] 701\t\t\t\n      JUMP \t\t\t\n    tag 742\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      DUP10 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      PUSH 80\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH A0\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      DUP8 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH C0\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP6 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n    tag 743\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 745\t\t\t\n      JUMPI \t\t\t\n      DUP4 \t\t\t\n      MLOAD \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 743\t\t\t\n      JUMP \t\t\t\n    tag 745\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP13 \t\t\t\n      SWAP12 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 703\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FF\t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 748\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 748\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 157\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH C0\t\t\t\n      DUP8 \t\t\t\n      DUP10 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 750\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 750\t\t\t\n      JUMPDEST \t\t\t\n      DUP7 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 751\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 702\t\t\t\n      JUMP \t\t\t\n    tag 751\t\t\t\n      JUMPDEST \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 752\t\t\t\n      PUSH 60\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 703\t\t\t\n      JUMP \t\t\t\n    tag 752\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 80\t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH A0\t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      JUMP \t\t\t\n    tag 161\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH E0\t\t\t\n      DUP9 \t\t\t\n      DUP11 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 754\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 754\t\t\t\n      JUMPDEST \t\t\t\n      DUP8 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 755\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 702\t\t\t\n      JUMP \t\t\t\n    tag 755\t\t\t\n      JUMPDEST \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 756\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 702\t\t\t\n      JUMP \t\t\t\n    tag 756\t\t\t\n      JUMPDEST \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH 60\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 757\t\t\t\n      PUSH 80\t\t\t\n      DUP10 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 703\t\t\t\n      JUMP \t\t\t\n    tag 757\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH A0\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH C0\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      SWAP9 \t\t\t\n      SWAP2 \t\t\t\n      SWAP5 \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 169\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 759\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 759\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 760\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 702\t\t\t\n      JUMP \t\t\t\n    tag 760\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 761\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 702\t\t\t\n      JUMP \t\t\t\n    tag 761\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 174\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 763\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 763\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 764\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 702\t\t\t\n      JUMP \t\t\t\n    tag 764\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 761\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 185\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 768\t\t\t\n      JUMPI \t\t\t\n      PUSH 7F\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 768\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 769\t\t\t\n      JUMPI \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 769\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 249\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP8 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 60\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH A0\t\t\t\n      PUSH 80\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      PUSH C0\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      CALLDATACOPY \t\t\t\n      PUSH 0\t\t\t\n      PUSH C0\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH C0\t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      PUSH 1F\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP8 \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 253\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 773\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 773\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 704\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 260\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 190\t\t\t\n      PUSH [tag] 704\t\t\t\n      JUMP \t\t\t\n    tag 273\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 190\t\t\t\n      PUSH [tag] 704\t\t\t\n      JUMP \t\t\t\n    tag 369\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 787\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 787\t\t\t\n      PUSH [tag] 704\t\t\t\n      JUMP \t\t\t\n    tag 787\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 372\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 787\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 787\t\t\t\n      PUSH [tag] 704\t\t\t\n      JUMP \t\t\t\n    tag 510\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 12\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 586\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 21\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 614\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 32\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 641\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 802\t\t\t\n      JUMPI \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 12\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 802\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    .data\n  F6C9A2FA34B6CB85A7E5838C28EBAA0801A385B177CF814C28625BC2CCD304FA:\n    dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724\n"
}